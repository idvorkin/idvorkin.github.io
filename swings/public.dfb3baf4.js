let e,t,r,n,a,i,s,o;function l(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}var u,d,h,p,c=globalThis;function f(e,t){return Object.keys(t).forEach(function(r){"default"===r||"__esModule"===r||Object.prototype.hasOwnProperty.call(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[r]}})}),e}var m={},g={},y=c.parcelRequire9c79;null==y&&((y=function(e){if(e in m)return m[e].exports;if(e in g){var t=g[e];delete g[e];var r={id:e,exports:{}};return m[e]=r,t.call(r.exports,r,r.exports),r.exports}var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){g[e]=t},c.parcelRequire9c79=y);var x=y.register;x("dee6J",function(e,t){}),x("k66zl",function(e,t){!function(e,t,r){function n(e){var t,r=this,n=(t=0xefc8249d,function(e){e=String(e);for(var r=0;r<e.length;r++){var n=.02519603282416938*(t+=e.charCodeAt(r));t=n>>>0,n-=t,n*=t,t=n>>>0,n-=t,t+=0x100000000*n}return(t>>>0)*23283064365386963e-26});r.next=function(){var e=2091639*r.s0+23283064365386963e-26*r.c;return r.s0=r.s1,r.s1=r.s2,r.s2=e-(r.c=0|e)},r.c=1,r.s0=n(" "),r.s1=n(" "),r.s2=n(" "),r.s0-=n(e),r.s0<0&&(r.s0+=1),r.s1-=n(e),r.s1<0&&(r.s1+=1),r.s2-=n(e),r.s2<0&&(r.s2+=1)}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function i(e,t){var r=new n(e),i=t&&t.state,s=r.next;return s.int32=function(){return 0x100000000*r.next()|0},s.double=function(){return s()+(2097152*s()|0)*11102230246251565e-32},s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.alea=i}(0,e,"function"==typeof define&&define)}),x("5wC0j",function(e,t){!function(e,t,r){function n(e){var t=this,r="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:r+=e;for(var n=0;n<r.length+64;n++)t.x^=r.charCodeAt(n),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function i(e,t){var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xor128=i}(0,e,"function"==typeof define&&define)}),x("5MbFK",function(e,t){!function(e,t,r){function n(e){var t=this,r="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^(e^e<<1))|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:r+=e;for(var n=0;n<r.length+64;n++)t.x^=r.charCodeAt(n),n==r.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function i(e,t){var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xorwow=i}(0,e,"function"==typeof define&&define)}),x("dhcg8",function(e,t){!function(e,t,r){function n(e){var t=this;t.next=function(){var e,r,n=t.x,a=t.i;return e=n[a],e^=e>>>7,r=e^e<<24^((e=n[a+1&7])^e>>>10)^((e=n[a+3&7])^e>>>3)^((e=n[a+4&7])^e<<7),e=n[a+7&7],e^=e<<13,r^=e^e<<9,n[a]=r,t.i=a+1&7,r};var r,n=e,a=[];if(n===(0|n))a[0]=n;else for(r=0,n=""+n;r<n.length;++r)a[7&r]=a[7&r]<<15^n.charCodeAt(r)+a[r+1&7]<<13;for(;a.length<8;)a.push(0);for(r=0;r<8&&0===a[r];++r);for(8==r?a[7]=-1:a[r],t.x=a,t.i=0,r=256;r>0;--r)t.next()}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function i(e,t){null==e&&(e=+new Date);var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&(i.x&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xorshift7=i}(0,e,"function"==typeof define&&define)}),x("ddz0R",function(e,t){!function(e,t,r){function n(e){var t=this;t.next=function(){var e,r,n=t.w,a=t.X,i=t.i;return t.w=n=n+0x61c88647|0,r=a[i+34&127],e=a[i=i+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,r=a[i]=r^e,t.i=i,r+(n^n>>>16)|0},!function(e,t){var r,n,a,i,s,o=[],l=128;for(t===(0|t)?(n=t,t=null):(t+="\0",n=0,l=Math.max(l,t.length)),a=0,i=-32;i<l;++i)t&&(n^=t.charCodeAt((i+32)%t.length)),0===i&&(s=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,i>=0&&(s=s+0x61c88647|0,a=0==(r=o[127&i]^=n+s)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,i=512;i>0;--i)n=o[a+34&127],r=o[a=a+1&127],n^=n<<13,r^=r<<17,n^=n>>>15,r^=r>>>12,o[a]=n^r;e.w=s,e.X=o,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function i(e,t){null==e&&(e=+new Date);var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&(i.X&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xor4096=i}(0,e,"function"==typeof define&&define)}),x("8erNG",function(e,t){!function(e,t,r){function n(e){var t=this,r="";t.next=function(){var e=t.b,r=t.c,n=t.d,a=t.a;return e=e<<25^e>>>7^r,r=r-n|0,n=n<<24^n>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^r,t.c=r=r-n|0,t.d=n<<16^r>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-0x61c88647,t.d=0x517cc1b7,e===Math.floor(e)?(t.a=e/0x100000000|0,t.b=0|e):r+=e;for(var n=0;n<r.length+20;n++)t.b^=r.charCodeAt(n),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function i(e,t){var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.tychei=i}(0,e,"function"==typeof define&&define)});class b{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class v{refCount(e){return w("refCount")}incRef(e){return w("incRef")}timerAvailable(){return!0}time(e){return w("time")}read(e){return w("read")}readSync(e){return w("readSync")}readToGPU(e,t){return w("readToGPU")}numDataIds(){return w("numDataIds")}disposeData(e,t){return w("disposeData")}write(e,t,r){return w("write")}move(e,t,r,n,a){return w("move")}createTensorFromGPUData(e,t,r){return w("createTensorFromGPUData")}memory(){return w("memory")}floatPrecision(){return w("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return w("dispose")}}function w(e){throw Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var S={};function k(e){let t=e.length,r=0;for(;t>0;)r=Math.random()*t|0,$(e,--t,r)}function C(e,t){if(e.length!==t.length)throw Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let r=e.length,n=0;for(;r>0;)n=Math.random()*r|0,$(e,--r,n),$(t,r,n)}function I(e,t,r){return Math.max(e,Math.min(t,r))}function T(e){return e%2==0?e:e+1}function $(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}function N(e){let t=0;for(let r=0;r<e.length;r++)t+=e[r];return t}function E(e,t){let r=Math.random();return t*r+(1-r)*e}function R(e,t){let r=0;for(let n=0;n<e.length;n++){let a=Number(e[n])-Number(t[n]);r+=a*a}return r}function A(e,t){if(!e)throw Error("string"==typeof t?t:t())}function _(e,t,r=""){A(L(e,t),()=>r+` Shapes ${e} and ${t} must match`)}function O(e){A(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function F(e){if(0===e.length)return 1;let t=e[0];for(let r=1;r<e.length;r++)t*=e[r];return t}function P(e){return 0===e.length}function D(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(null!==e[r]&&null!==t[r]&&e[r]!==t[r])return!1;return!0}function L(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}function M(e){return e%1==0}function B(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;{if(e===-1/0)return -1;let t=Math.exp(2*e);return(t-1)/(t+1)}}function z(e){let t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function U(e){let t=new Uint32Array(e);for(let r=0;r<e;++r)t[r]=r;return k(t),t}function W(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function V(e,t=e=>0,r,n){return new Promise((a,i)=>{let s=0,o=()=>{if(e())return void a();let l=t(++s);if(null!=r&&s>=r)return void i();null!=n?n(o,l):setTimeout(o,l)};o()})}function G(e,t){let r=1,n=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)r*=e[t];else if(-1===e[t]){if(-1!==n)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${n} and dim ${t}`);n=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===n){if(t>0&&t!==r)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===r)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%r!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${r}`);let a=e.slice();return a[n]=t/r,a}function H(e,t){let r=t.length;return A((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-r&&e<r),()=>`All values in axis param must be in range [-${r}, ${r}) but got axis ${e}`),A(e.every(e=>M(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?r+e:e)}function j(e,t){let r=[],n=[],a=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||a?null:H(t,e).sort(),s=0;for(let t=0;t<e.length;++t){if(null!=i){if(i[s]===t&&1!==e[t])throw Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==i[s]||i[s]>t)&&1===e[t]&&(r.push(e[t]),n.push(t)),i[s]<=t&&s++}1!==e[t]&&(r.push(e[t]),n.push(t))}return{newShape:r,keptDims:n}}function K(e,t){return q(e,t)}function q(e,t){let r=null;if(null==e||"float32"===e)r=new Float32Array(t);else if("int32"===e)r=new Int32Array(t);else if("bool"===e)r=new Uint8Array(t);else if("string"===e)r=Array(t);else throw Error(`Unknown data type ${e}`);return r}function X(e,t){for(let r=0;r<e.length;r++){let n=e[r];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${t} being uploaded contains ${n}.`)}}function Y(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Q(e,t){return"complex64"!==t&&("float32"!==t||"complex64"===e)&&("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)}function Z(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw Error(`Unknown dtype ${e}`)}function J(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function ee(e){return"string"==typeof e||e instanceof String}function et(e){return"boolean"==typeof e}function er(e){return"number"==typeof e}function en(e){if(Array.isArray(e))return en(e[0]);if(e instanceof Float32Array);else if(e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray)return"int32";else if(er(e));else if(ee(e))return"string";else if(et(e))return"bool";return"float32"}function ea(e){return!!(e&&e.constructor&&e.call&&e.apply)}function ei(e,t){for(let r=t;r<e;++r)if(e%r==0)return r;return e}function es(e){let t=e.length;if(t<2)return[];let r=Array(t-1);r[t-2]=e[t-1];for(let n=t-3;n>=0;--n)r[n]=r[n+1]*e[n+1];return r}function eo(e,t,r=!1){if(0===e.length)return t[0];let n=e.reduce((e,t)=>e*t)*(r?2:1);if(0===n)return[];if(n!==t.length)throw Error(`[${e}] does not match the input size ${t.length}${r?" for a complex tensor":""}.`);return function e(t,r,n,a=!1){let i=[];if(1===r.length){let e=r[0]*(a?2:1);for(let r=0;r<e;r++)i[r]=n[t+r]}else{let s=r[0],o=r.slice(1),l=o.reduce((e,t)=>e*t)*(a?2:1);for(let r=0;r<s;r++)i[r]=e(t+r*l,o,n,a)}return i}(0,e,t,r)}function el(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw Error(`Unknown dtype ${t}`)}function eu(e,t){let r=ed(e,t);for(let e=0;e<r.length;e++)r[e]=1;return r}function ed(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw Error(`Unknown data type ${t}`)}function eh(e,t){let r=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return eo(e,new Float32Array(r));if("int32"===t)return eo(e,new Int32Array(r));if("bool"===t)return eo(e,new Uint8Array(r));throw Error(`Unknown data type ${t}`)}function ep(e){e.forEach(t=>{A(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function ec(e,t,r){if(0===t)return 0;if(1===t)return e[0];let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=r[t]*e[t];return n}function ef(e,t,r){if(0===t)return[];if(1===t)return[e];let n=Array(t);for(let t=0;t<n.length-1;++t)n[t]=Math.floor(e/r[t]),e-=n[t]*r[t];return n[n.length-1]=e,n}function em(e){return e&&e.then&&"function"==typeof e.then}l(S,"shuffle",()=>k),l(S,"swap",()=>$),l(S,"shuffleCombo",()=>C),l(S,"clamp",()=>I),l(S,"nearestLargerEven",()=>T),l(S,"sum",()=>N),l(S,"randUniform",()=>E),l(S,"distSquared",()=>R),l(S,"assert",()=>A),l(S,"assertShapesMatch",()=>_),l(S,"arraysEqual",()=>L),l(S,"assertNonNull",()=>O),l(S,"sizeFromShape",()=>F),l(S,"isScalarShape",()=>P),l(S,"arraysEqualWithNull",()=>D),l(S,"isInt",()=>M),l(S,"tanh",()=>B),l(S,"sizeToSquarishShape",()=>z),l(S,"createShuffledIndices",()=>U),l(S,"rightPad",()=>W),l(S,"repeatedTry",()=>V),l(S,"inferFromImplicitShape",()=>G),l(S,"parseAxisParam",()=>H),l(S,"squeezeShape",()=>j),l(S,"getTypedArrayFromDType",()=>K),l(S,"getArrayFromDType",()=>q),l(S,"checkConversionForErrors",()=>X),l(S,"isValidDtype",()=>Y),l(S,"hasEncodingLoss",()=>Q),l(S,"bytesPerElement",()=>Z),l(S,"bytesFromStringArray",()=>J),l(S,"isString",()=>ee),l(S,"isBoolean",()=>et),l(S,"isNumber",()=>er),l(S,"inferDtype",()=>en),l(S,"isFunction",()=>ea),l(S,"nearestDivisor",()=>ei),l(S,"computeStrides",()=>es),l(S,"toNestedArray",()=>eo),l(S,"convertBackendValuesAndArrayBuffer",()=>el),l(S,"makeOnesTypedArray",()=>eu),l(S,"makeZerosTypedArray",()=>ed),l(S,"makeZerosNestedTypedArray",()=>eh),l(S,"assertNonNegativeIntegerDimensions",()=>ep),l(S,"locToIndex",()=>ec),l(S,"indexToLoc",()=>ef),l(S,"isPromise",()=>em);const eg="tfjsflags";class ey{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ex,this.populateURLFlags()}setPlatform(e,t){null==this.platform||eb.getBool("IS_TEST")||eb.getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=e,this.platform=t}registerFlag(e,t,r){if(this.flagRegistry[e]={evaluationFn:t,setHook:r},null!=this.urlFlags[e]){let t=this.urlFlags[e];eb.getBool("IS_TEST")||eb.getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(em(t))throw Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;let e=this.getQueryParams(this.global.location.search);eg in e&&e[eg].split(",").forEach(e=>{let[t,r]=e.split(":");this.urlFlags[t]=function(e,t){let r=t.toLowerCase();return"true"===r||"false"===r?"true"===r:`${+r}`===r?+r:t}(0,r)})}}function ex(e){let t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...r)=>{var n,a,i;return n=t,a=r[0],i=r[1],n[decodeURIComponent(a)]=decodeURIComponent(i||""),r.join("=")}),t}let eb=null;var ev={};function ew(){if(null==e){let t;if("undefined"!=typeof window)t=window;else if(void 0!==c)t=c;else if(void 0!==ev)t=ev;else if("undefined"!=typeof self)t=self;else throw Error("Could not find a global object");e=t}return e}function eS(e,t){let r=function(){let e=ew();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(r.has(e))return r.get(e);{let n=t();return r.set(e,n),r.get(e)}}const ek="Acos",eC="Acosh",eI="AddN",eT="ArgMax",e$="ArgMin",eN="Asin",eE="Asinh",eR="Atan",eA="Atanh",e_="Atan2",eO="AvgPool",eF="AvgPoolGrad",eP="AvgPool3D",eD="AvgPool3DGrad",eL="BatchMatMul",eM="BatchToSpaceND",eB="Bincount",ez="BitwiseAnd",eU="BroadcastArgs",eW="Cast",eV="Ceil",eG="ClipByValue",eH="Complex",ej="ComplexAbs",eK="Concat",eq="Conv2D",eX="Conv2DBackpropFilter",eY="Conv2DBackpropInput",eQ="Conv3D",eZ="Conv3DBackpropFilterV2",eJ="Conv3DBackpropInputV2",e0="Cosh",e1="Cumprod",e2="Cumsum",e3="CropAndResize",e4="DenseBincount",e6="DepthToSpace",e5="DepthwiseConv2dNative",e8="DepthwiseConv2dNativeBackpropFilter",e7="DepthwiseConv2dNativeBackpropInput",e9="Diag",te="Dilation2D",tt="Draw",tr="RealDiv",tn="Einsum",ta="EluGrad",ti="Equal",ts="ExpandDims",to="Expm1",tl="Fill",tu="FlipLeftRight",td="Floor",th="FloorDiv",tp="FusedBatchNorm",tc="GatherV2",tf="GatherNd",tm="Greater",tg="GreaterEqual",ty="Identity",tx="IFFT",tb="Imag",tv="IsFinite",tw="IsInf",tS="IsNan",tk="LeakyRelu",tC="Less",tI="LessEqual",tT="LinSpace",t$="Log1p",tN="LogicalAnd",tE="LogicalNot",tR="LogicalOr",tA="LRNGrad",t_="Maximum",tO="MaxPool",tF="MaxPoolGrad",tP="MaxPool3D",tD="MaxPool3DGrad",tL="MaxPoolWithArgmax",tM="Mean",tB="Minimum",tz="MirrorPad",tU="Multinomial",tW="Multiply",tV="NotEqual",tG="NonMaxSuppressionV3",tH="NonMaxSuppressionV4",tj="NonMaxSuppressionV5",tK="OnesLike",tq="OneHot",tX="Pack",tY="PadV2",tQ="Prelu",tZ="Prod",tJ="RaggedGather",t0="RaggedRange",t1="RaggedTensorToTensor",t2="Range",t3="Real",t4="Reciprocal",t6="Relu",t5="Reshape",t8="ResizeNearestNeighbor",t7="ResizeNearestNeighborGrad",t9="ResizeBilinear",re="ResizeBilinearGrad",rt="Relu6",rr="Reverse",rn="Round",ra="Rsqrt",ri="ScatterNd",rs="TensorScatterUpdate",ro="SearchSorted",rl="Select",ru="Selu",rd="Slice",rh="Sinh",rp="Sign",rc="Sigmoid",rf="Softplus",rm="Sqrt",rg="SpaceToBatchND",ry="SplitV",rx="Softmax",rb="SparseFillEmptyRows",rv="SparseReshape",rw="SparseSegmentMean",rS="SparseSegmentSum",rk="SparseToDense",rC="SquaredDifference",rI="Square",rT="StaticRegexReplace",r$="StridedSlice",rN="StringNGrams",rE="StringSplit",rR="StringToHashBucketFast",rA="Tanh",r_="Tile",rO="TopK",rF="Transform",rP="Transpose",rD="Unique",rL="Unpack",rM="UnsortedSegmentSum",rB="ZerosLike",rz="Step",rU="FromPixels",rW="RotateWithOffset",rV="_FusedMatMul",rG="FusedConv2D",rH="FusedDepthwiseConv2D";var rj={};function rK(...e){eb.getBool("IS_TEST")||eb.getBool("PROD")||console.warn(...e)}function rq(...e){eb.getBool("IS_TEST")||eb.getBool("PROD")||console.log(...e)}l(rj,"warn",()=>rK),l(rj,"log",()=>rq);const rX=eS("kernelRegistry",()=>new Map),rY=eS("gradRegistry",()=>new Map);function rQ(e,t){var r,n;let a=(r=e,n=t,`${n}_${r}`);return rX.get(a)}function rZ(e){let t=rX.entries(),r=[];for(;;){let{done:n,value:a}=t.next();if(n)break;let[i,s]=a,[o]=i.split("_");o===e&&r.push(s)}return r}function rJ(e){var t,r;let{kernelName:n,backendName:a}=e,i=(t=n,r=a,`${r}_${t}`);rX.has(i)&&rK(`The kernel '${n}' for backend '${a}' is already registered`),rX.set(i,e)}var r0={};function r1(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}l(r0,"createScalarValue",()=>nR),l(r0,"encodeString",()=>nF),l(r0,"toTypedArray",()=>nA),l(r0,"flatten",()=>nL),l(r0,"now",()=>n_),l(r0,"fetch",()=>nO),l(r0,"decodeString",()=>nP),l(r0,"isTypedArray",()=>nD);var r2={};l(r2,"hexToLong",()=>nb),l(r2,"fingerPrint64",()=>nE);var r3={};r3=r6;var r4=null;try{r4=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r6(e,t,r){this.low=0|e,this.high=0|t,this.unsigned=!!r}function r5(e){return!0===(e&&e.__isLong__)}r6.prototype.__isLong__,Object.defineProperty(r6.prototype,"__isLong__",{value:!0}),r6.isLong=r5;var r8={},r7={};function r9(e,t){var r,n,a;if(t)return(e>>>=0,(a=0<=e&&e<256)&&(n=r7[e]))?n:(r=nt(e,(0|e)<0?-1:0,!0),a&&(r7[e]=r),r);return(e|=0,(a=-128<=e&&e<128)&&(n=r8[e]))?n:(r=nt(e,e<0?-1:0,!1),a&&(r8[e]=r),r)}function ne(e,t){if(isNaN(e))return t?nd:nu;if(t){if(e<0)return nd;if(e>=ns)return nm}else{if(e<=-no)return ng;if(e+1>=no)return nf}return e<0?ne(-e,t).neg():nt(e%ni|0,e/ni|0,t)}function nt(e,t,r){return new r6(e,t,r)}r6.fromInt=r9,r6.fromNumber=ne,r6.fromBits=nt;var nr=Math.pow;function nn(e,t,r){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return nu;if("number"==typeof t?(r=t,t=!1):t=!!t,(r=r||10)<2||36<r)throw RangeError("radix");if((n=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return nn(e.substring(1),t,r).neg();for(var n,a=ne(nr(r,8)),i=nu,s=0;s<e.length;s+=8){var o=Math.min(8,e.length-s),l=parseInt(e.substring(s,s+o),r);if(o<8){var u=ne(nr(r,o));i=i.mul(u).add(ne(l))}else i=(i=i.mul(a)).add(ne(l))}return i.unsigned=t,i}function na(e,t){return"number"==typeof e?ne(e,t):"string"==typeof e?nn(e,t):nt(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r6.fromString=nn,r6.fromValue=na;var ni=0x100000000,ns=0xffffffffffffffff,no=0x8000000000000000,nl=r9(0x1000000),nu=r9(0);r6.ZERO=nu;var nd=r9(0,!0);r6.UZERO=nd;var nh=r9(1);r6.ONE=nh;var np=r9(1,!0);r6.UONE=np;var nc=r9(-1);r6.NEG_ONE=nc;var nf=nt(-1,0x7fffffff,!1);r6.MAX_VALUE=nf;var nm=nt(-1,-1,!0);r6.MAX_UNSIGNED_VALUE=nm;var ng=nt(0,-0x80000000,!1);r6.MIN_VALUE=ng;var ny=r6.prototype;ny.toInt=function(){return this.unsigned?this.low>>>0:this.low},ny.toNumber=function(){return this.unsigned?(this.high>>>0)*ni+(this.low>>>0):this.high*ni+(this.low>>>0)},ny.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(!this.eq(ng))return"-"+this.neg().toString(e);else{var t=ne(e),r=this.div(t),n=r.mul(t).sub(this);return r.toString(e)+n.toInt().toString(e)}for(var a=ne(nr(e,6),this.unsigned),i=this,s="";;){var o=i.div(a),l=(i.sub(o.mul(a)).toInt()>>>0).toString(e);if((i=o).isZero())return l+s;for(;l.length<6;)l="0"+l;s=""+l+s}},ny.getHighBits=function(){return this.high},ny.getHighBitsUnsigned=function(){return this.high>>>0},ny.getLowBits=function(){return this.low},ny.getLowBitsUnsigned=function(){return this.low>>>0},ny.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ng)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return 0!=this.high?t+33:t+1},ny.isZero=function(){return 0===this.high&&0===this.low},ny.eqz=ny.isZero,ny.isNegative=function(){return!this.unsigned&&this.high<0},ny.isPositive=function(){return this.unsigned||this.high>=0},ny.isOdd=function(){return(1&this.low)==1},ny.isEven=function(){return(1&this.low)==0},ny.equals=function(e){return r5(e)||(e=na(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},ny.eq=ny.equals,ny.notEquals=function(e){return!this.eq(e)},ny.neq=ny.notEquals,ny.ne=ny.notEquals,ny.lessThan=function(e){return 0>this.comp(e)},ny.lt=ny.lessThan,ny.lessThanOrEqual=function(e){return 0>=this.comp(e)},ny.lte=ny.lessThanOrEqual,ny.le=ny.lessThanOrEqual,ny.greaterThan=function(e){return this.comp(e)>0},ny.gt=ny.greaterThan,ny.greaterThanOrEqual=function(e){return this.comp(e)>=0},ny.gte=ny.greaterThanOrEqual,ny.ge=ny.greaterThanOrEqual,ny.compare=function(e){if(r5(e)||(e=na(e)),this.eq(e))return 0;var t=this.isNegative(),r=e.isNegative();return t&&!r?-1:!t&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},ny.comp=ny.compare,ny.negate=function(){return!this.unsigned&&this.eq(ng)?ng:this.not().add(nh)},ny.neg=ny.negate,ny.add=function(e){r5(e)||(e=na(e));var t,r,n=this.high>>>16,a=65535&this.high,i=this.low>>>16,s=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,d=65535&e.low,h=0,p=0;return t=0+((r=0+(s+d))>>>16),r&=65535,t+=i+u,p+=t>>>16,t&=65535,p+=a+l,h+=p>>>16,p&=65535,h+=n+o,nt(t<<16|r,(h&=65535)<<16|p,this.unsigned)},ny.subtract=function(e){return r5(e)||(e=na(e)),this.add(e.neg())},ny.sub=ny.subtract,ny.multiply=function(e){if(this.isZero())return nu;if(r5(e)||(e=na(e)),r4)return nt(r4.mul(this.low,this.high,e.low,e.high),r4.get_high(),this.unsigned);if(e.isZero())return nu;if(this.eq(ng))return e.isOdd()?ng:nu;if(e.eq(ng))return this.isOdd()?ng:nu;if(this.isNegative())if(e.isNegative())return this.neg().mul(e.neg());else return this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(nl)&&e.lt(nl))return ne(this.toNumber()*e.toNumber(),this.unsigned);var t,r,n=this.high>>>16,a=65535&this.high,i=this.low>>>16,s=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,d=65535&e.low,h=0,p=0;return t=0+((r=0+s*d)>>>16),r&=65535,t+=i*d,p+=t>>>16,t&=65535,t+=s*u,p+=t>>>16,t&=65535,p+=a*d,h+=p>>>16,p&=65535,p+=i*u,h+=p>>>16,p&=65535,p+=s*l,h+=p>>>16,p&=65535,h+=n*d+a*u+i*l+s*o,nt(t<<16|r,(h&=65535)<<16|p,this.unsigned)},ny.mul=ny.multiply,ny.divide=function(e){if(r5(e)||(e=na(e)),e.isZero())throw Error("division by zero");if(r4){var t,r,n;return this.unsigned||-0x80000000!==this.high||-1!==e.low||-1!==e.high?nt((this.unsigned?r4.div_u:r4.div_s)(this.low,this.high,e.low,e.high),r4.get_high(),this.unsigned):this}if(this.isZero())return this.unsigned?nd:nu;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return nd;if(e.gt(this.shru(1)))return np;n=nd}else{if(this.eq(ng))if(e.eq(nh)||e.eq(nc))return ng;else return e.eq(ng)?nh:(t=this.shr(1).div(e).shl(1)).eq(nu)?e.isNegative()?nh:nc:(r=this.sub(e.mul(t)),n=t.add(r.div(e)));if(e.eq(ng))return this.unsigned?nd:nu;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();n=nu}for(r=this;r.gte(e);){for(var a=Math.ceil(Math.log(t=Math.max(1,Math.floor(r.toNumber()/e.toNumber())))/Math.LN2),i=a<=48?1:nr(2,a-48),s=ne(t),o=s.mul(e);o.isNegative()||o.gt(r);)t-=i,o=(s=ne(t,this.unsigned)).mul(e);s.isZero()&&(s=nh),n=n.add(s),r=r.sub(o)}return n},ny.div=ny.divide,ny.modulo=function(e){return(r5(e)||(e=na(e)),r4)?nt((this.unsigned?r4.rem_u:r4.rem_s)(this.low,this.high,e.low,e.high),r4.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},ny.mod=ny.modulo,ny.rem=ny.modulo,ny.not=function(){return nt(~this.low,~this.high,this.unsigned)},ny.and=function(e){return r5(e)||(e=na(e)),nt(this.low&e.low,this.high&e.high,this.unsigned)},ny.or=function(e){return r5(e)||(e=na(e)),nt(this.low|e.low,this.high|e.high,this.unsigned)},ny.xor=function(e){return r5(e)||(e=na(e)),nt(this.low^e.low,this.high^e.high,this.unsigned)},ny.shiftLeft=function(e){return(r5(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?nt(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):nt(0,this.low<<e-32,this.unsigned)},ny.shl=ny.shiftLeft,ny.shiftRight=function(e){return(r5(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?nt(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):nt(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},ny.shr=ny.shiftRight,ny.shiftRightUnsigned=function(e){if(r5(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?nt(this.low>>>e|t<<32-e,t>>>e,this.unsigned):32===e?nt(t,0,this.unsigned):nt(t>>>e-32,0,this.unsigned)},ny.shru=ny.shiftRightUnsigned,ny.shr_u=ny.shiftRightUnsigned,ny.toSigned=function(){return this.unsigned?nt(this.low,this.high,!1):this},ny.toUnsigned=function(){return this.unsigned?this:nt(this.low,this.high,!0)},ny.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},ny.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},ny.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r6.fromBytes=function(e,t,r){return r?r6.fromBytesLE(e,t):r6.fromBytesBE(e,t)},r6.fromBytesLE=function(e,t){return new r6(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r6.fromBytesBE=function(e,t){return new r6(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const nx=r3.default||r3;function nb(e){return nx.fromString(e,!0,16)}const nv=nb("c3a5c85c97cb3127"),nw=nb("b492b66fbe98f273"),nS=nb("9ae16a3b2f90404f");function nk(e){return e.xor(e.shru(47))}function nC(e,t,r){let n=e.slice(t,t+r);return nx.fromBytes(Array.from(n),!0,!0)}function nI(e,t){return nC(e,t,8)}function nT(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function n$(e,t,r=nb("9ddfea08eb382d69")){let n=e.xor(t).mul(r);n=n.xor(n.shru(47));let a=t.xor(n).mul(r);return(a=a.xor(a.shru(47))).mul(r)}function nN(e,t,r,n){return function(e,t,r,n,a,i){a=a.add(e),i=nT(i.add(a).add(n),21);let s=a;return a=(a=a.add(t)).add(r),i=i.add(nT(a,44)),[a.add(n),i.add(s)]}(nI(e,t),nI(e,t+8),nI(e,t+16),nI(e,t+24),r,n)}function nE(e,t=e.length){let r=nx.fromNumber(81,!0);if(t<=32)if(t<=16)return function(e,t=e.length){if(t>=8){let r=nS.add(2*t),n=nI(e,0).add(nS),a=nI(e,t-8);return n$(nT(a,37).mul(r).add(n),nT(n,25).add(a).mul(r),r)}if(t>=4){let r=nS.add(2*t);return n$(nC(e,0,4).shl(3).add(t),nC(e,t-4,4),r)}if(t>0){let r=e[0],n=e[t>>1],a=e[t-1];return nk(nS.mul(r+(n<<8)).xor(nv.mul(t+(a<<2)))).mul(nS)}return nS}(e,t);else return function(e,t=e.length){let r=nS.add(2*t),n=nI(e,0).mul(nw),a=nI(e,8),i=nI(e,t-8).mul(r),s=nI(e,t-16).mul(nS);return n$(nT(n.add(a),43).add(nT(i,30)).add(s),n.add(nT(a.add(nS),18)).add(i),r)}(e,t);if(t<=64)return function(e,t=e.length){let r=nS.add(2*t),n=nI(e,0).mul(nS),a=nI(e,8),i=nI(e,t-8).mul(r),s=nI(e,t-16).mul(nS),o=nT(n.add(a),43).add(nT(i,30)).add(s),l=n$(o,n.add(nT(a.add(nS),18)).add(i),r),u=nI(e,16).mul(r),d=nI(e,24),h=o.add(nI(e,t-32)).mul(r),p=l.add(nI(e,t-24)).mul(r);return n$(nT(u.add(d),43).add(nT(h,30)).add(p),u.add(nT(d.add(n),18)).add(h),r)}(e,t);let n=r,a=r.mul(nw).add(113),i=nk(a.mul(nS).add(113)).mul(nS),s=[nx.UZERO,nx.UZERO],o=[nx.UZERO,nx.UZERO];n=n.mul(nS).add(nI(e,0));let l=0,u=(t-1>>6)*64,d=u+(t-1&63)-63;do n=nT(n.add(a).add(s[0]).add(nI(e,l+8)),37).mul(nw),a=nT(a.add(s[1]).add(nI(e,l+48)),42).mul(nw),n=n.xor(o[1]),a=a.add(s[0]).add(nI(e,l+40)),i=nT(i.add(o[0]),33).mul(nw),s=nN(e,l,s[1].mul(nw),n.add(o[0])),o=nN(e,l+32,i.add(o[1]),a.add(nI(e,l+16))),[i,n]=[n,i],l+=64;while(l!==u)let h=nw.add(i.and(255).shl(1));return l=d,o[0]=o[0].add(t-1&63),s[0]=s[0].add(o[0]),o[0]=o[0].add(s[0]),n=nT(n.add(a).add(s[0]).add(nI(e,l+8)),37).mul(h),a=nT(a.add(s[1]).add(nI(e,l+48)),42).mul(h),n=n.xor(o[1].mul(9)),a=a.add(s[0].mul(9).add(nI(e,l+40))),i=nT(i.add(o[0]),33).mul(h),s=nN(e,l,s[1].mul(h),n.add(o[0])),o=nN(e,l+32,i.add(o[1]),a.add(nI(e,l+16))),[i,n]=[n,i],n$(n$(s[0],o[0],h).add(nk(a).mul(nv)).add(i),n$(s[1],o[1],h).add(n),h)}function nR(e,t){return"string"===t?nF(e):nA([e],t)}function nA(e,t){var r;if("string"===t)throw Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=nL(e)),eb.getBool("DEBUG")&&X(e,t),(r=e)instanceof Float32Array&&"float32"===t||r instanceof Int32Array&&"int32"===t||r instanceof Uint8Array&&"bool"===t)return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){let t=new Uint8Array(e.length);for(let r=0;r<t.length;++r)0!==Math.round(e[r])&&(t[r]=1);return t}throw Error(`Unknown data type ${t}`)}function n_(){return eb.platform.now()}function nO(e,t){return eb.platform.fetch(e,t)}function nF(e,t="utf-8"){return t=t||"utf-8",eb.platform.encode(e,t)}function nP(e,t="utf-8"){return t=t||"utf-8",eb.platform.decode(e,t)}function nD(e){return null!=eb.platform.isTypedArray?eb.platform.isTypedArray(e):r1(e)}function nL(e,t=[],r=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||em(e)||null==e||nD(e)&&r)t.push(e);else if(Array.isArray(e)||nD(e))for(let n=0;n<e.length;++n)nL(e[n],t,r);else{let n=-1;for(let t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(n=Math.max(n,Number(t)));for(let a=0;a<=n;a++)nL(e[a],t,r)}return t}f(r0,S),f(r0,r2);class nM{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new nB)}profileKernel(e,t,r){let n,a,i=()=>{n=r()},s=n_();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(i);else{for(let e of(i(),n))e.dataSync();a=Promise.resolve({kernelMs:n_()-s})}if(eb.getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<n.length;t++){let r=n[t];r.data().then(t=>{!function(e,t,r){if("float32"===t)for(let t=0;t<e.length;t++){let n=e[t];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${r}'`),!0}}(t,r.dtype,e)})}return{kernelName:e,outputs:n,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){let{kernelName:t,outputs:r,timeMs:n,inputs:a,extraInfo:i}=e;r.forEach(e=>{Promise.all([e.data(),n,i]).then(r=>{this.logger.logKernelProfile(t,e,r[0],r[1],a,r[2])})})}}class nB{logKernelProfile(e,t,r,n,a,i){let s="number"==typeof n?W(`${n}ms`,9):n.error,o=W(e,25),l=t.rank,u=t.size,d=W(t.shape.toString(),14),h="";for(let e in a){let r=a[e];if(null!=r){let n=r.shape||t.shape,a=n.length;h+=`${e}: ${a}D ${a>0?n:""} `}}console.log(`%c${o}	%c${s}	%c${l}D ${d}	%c${u}	%c${h}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function nz(e,t,r){let n;return W(Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:ee(e)?`'${e}'`:"bool"===r?nU(e):parseFloat(e.toFixed(7)).toString(),t)}function nU(e){return 0===e?"false":"true"}function nW(e){let t=[];for(let r=0;r<e.length;r+=2)t.push([e[r],e[r+1]]);return t}class nV{constructor(e,t,r){if(this.dtype=t,this.shape=e.slice(),this.size=F(e),null!=r){let e=r.length;A(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||q(t,this.size),this.strides=es(e)}set(e,...t){0===t.length&&(t=[0]),A(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let r=this.locToIndex(t);this.values[r]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(let r of e){if(r<0||r>=this.shape[t])throw Error(`Requested out of range element at ${e}.   Buffer shape=${this.shape}`);t++}let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=this.strides[t]*e[t];return this.values[r]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];let t=Array(this.shape.length);for(let r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return nG().makeTensor(this.values,this.shape,this.dtype)}}let nG=null,nH=null;class nj{constructor(e,t,r,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=F(e),this.strides=es(e),this.dataId=r,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return nH.buffer(this.shape,this.dtype,e)}bufferSync(){return nH.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return eo(this.shape,e,"complex64"===this.dtype)}arraySync(){return eo(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();let e=nG().read(this.dataId);if("string"===this.dtype){let t=await e;try{return t.map(e=>nP(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),nG().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=nG().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>nP(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await nG().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),nG().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw Error("Tensor is disposed.")}print(e=!1){return nH.print(this,e)}clone(){return this.throwIfDisposed(),nH.clone(this)}toString(e=!1){return function(e,t,r,n){let a=es(t),i=function(e,t,r,n){let a=F(t),i=n[n.length-1],s=Array(i).fill(0),o=t.length,l="complex64"===r?nW(e):e;if(o>1)for(let e=0;e<a/i;e++){let t=e*i;for(let e=0;e<i;e++)s[e]=Math.max(s[e],nz(l[t+e],0,r).length)}return s}(e,t,r,a),s=t.length,o=function e(t,r,n,a,i,s=!0){let o="complex64"===n?2:1,l=r[0],u=r.length;if(0===u)return"complex64"===n?[nz(nW(t)[0],0,n)]:"bool"===n?[nU(t[0])]:[t[0].toString()];if(1===u){if(l>20){let e=Array.from(t.slice(0,3*o)),r=Array.from(t.slice((l-3)*o,l*o));return"complex64"===n&&(e=nW(e),r=nW(r)),["["+e.map((e,t)=>nz(e,i[t],n)).join(", ")+", ..., "+r.map((e,t)=>nz(e,i[l-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?nW(t):Array.from(t)).map((e,t)=>nz(e,i[t],n)).join(", ")+"]"]}let d=r.slice(1),h=a.slice(1),p=a[0]*o,c=[];if(l>20){for(let r=0;r<3;r++){let a=r*p,s=a+p;c.push(...e(t.slice(a,s),d,n,h,i,!1))}c.push("...");for(let r=l-3;r<l;r++){let a=r*p,s=a+p;c.push(...e(t.slice(a,s),d,n,h,i,r===l-1))}}else for(let r=0;r<l;r++){let a=r*p,s=a+p;c.push(...e(t.slice(a,s),d,n,h,i,r===l-1))}let f=2===u?",":"";c[0]="["+(l>0?c[0]+f:"");for(let e=1;e<c.length-1;e++)c[e]=" "+c[e]+f;let m=",\n";for(let e=2;e<u;e++)m+="\n";return c[c.length-1]=" "+c[c.length-1]+"]"+(s?"":m),c}(e,t,r,a,i),l=["Tensor"];return n&&(l.push(`  dtype: ${r}`),l.push(`  rank: ${s}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),nH.cast(this,e)}variable(e=!0,t,r){return this.throwIfDisposed(),nG().makeVariable(this,e,t,r)}}function nK(){return eS("Tensor",()=>nj)}Object.defineProperty(nj,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),nK();class nq extends nj{constructor(e,t,r,n){super(e.shape,e.dtype,e.dataId,n),this.trainable=t,this.name=r}assign(e){if(e.dtype!==this.dtype)throw Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!L(e.shape,this.shape))throw Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);nG().disposeTensor(this),this.dataId=e.dataId,nG().incRef(this,null)}dispose(){nG().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(nq,Symbol.hasInstance,{value:e=>e instanceof nj&&null!=e.assign&&e.assign instanceof Function}),(Tm=TF||(TF={})).R0="R0",Tm.R1="R1",Tm.R2="R2",Tm.R3="R3",Tm.R4="R4",Tm.R5="R5",Tm.R6="R6",(Tg=TP||(TP={})).float32="float32",Tg.int32="int32",Tg.bool="int32",Tg.complex64="complex64",(Ty=TD||(TD={})).float32="float32",Ty.int32="int32",Ty.bool="bool",Ty.complex64="complex64",(Tx=TL||(TL={})).float32="float32",Tx.int32="float32",Tx.bool="float32",Tx.complex64="complex64",(Tb=TM||(TM={})).float32="complex64",Tb.int32="complex64",Tb.bool="complex64",Tb.complex64="complex64";const nX={float32:TL,int32:TP,bool:TD,complex64:TM};function nY(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw Error(`Can not upcast ${e} with ${t}`)}return nX[e][t]}function nQ(e){return nY(e,"int32")}function nZ(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function nJ(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function n0(e,t){if(e.dtype===t.dtype)return[e,t];let r=nY(e.dtype,t.dtype);return[e.cast(r),t.cast(r)]}function n1(e){let t=[];return function e(t,r,n){var a;if(null!=t){if(t instanceof nj)return void r.push(t);if(Array.isArray(a=t)||"object"==typeof a)for(let a in t){let i=t[a];n.has(i)||(n.add(i),e(i,r,n))}}}(e,t,new Set),t}function n2(e){return null!=e.kernelName}class n3{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}}class n4{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new n3}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let r=e[t];if(await this.initializeBackend(r).success)return void await this.setBackend(r)}throw Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(!(e in this.registryFactory))return null;else{let{asyncInit:t}=this.initializeBackend(e);if(t)return null}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,r=1){return e in this.registryFactory?(rK(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}async setBackend(e){if(null==this.registryFactory[e])throw Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;let{success:t,asyncInit:r}=this.initializeBackend(e);if(!(r?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new nM(this.backendInstance),!0}setupRegisteredKernels(){rZ(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){rZ(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){let t=this.registryFactory[e];if(null==t)throw Error(`Cannot initialize backend ${e}, no registration found.`);try{let r=t.factory();if(!r||r instanceof v||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{let t=++this.pendingBackendInitId,n=r.then(r=>!(t<this.pendingBackendInitId)&&(this.registry[e]=r,this.pendingBackendInit=null,!0)).catch(r=>!(t<this.pendingBackendInitId)&&(this.pendingBackendInit=null,rK(`Initialization of backend ${e} failed`),rK(r.stack||r.message),!1));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return rK(`Initialization of backend ${e} failed`),rK(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let r=e[t],{success:n,asyncInit:a}=this.initializeBackend(r);if(a||n)return{name:r,asyncInit:a}}throw Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let r=this.state.tensorInfo.get(t),n=r.backend,a=this.readSync(t),i=n.refCount(t);n.disposeData(t,!0),r.backend=e,e.move(t,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let r,n=null;if(null==t){if("function"!=typeof e)throw Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw Error("When calling with two arguments, the 2nd argument to tidy() must be a function");n=e}return this.scopedRun(()=>this.startScope(n),()=>this.endScope(r),()=>((r=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),r))}scopedRun(e,t,r){e();try{let e=r();return t(),e}catch(e){throw t(),e}}nextTensorId(){return n4.nextTensorId++}nextVariableId(){return n4.nextVariableId++}clone(e){let t=n5.runKernel(ty,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>n5.runKernel(eW,{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,r){if(null==this.backendName&&this.backend,null==rQ(e,this.backendName))throw Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,r){let n=this.backend.numDataIds(),a=0;r.forEach(e=>{a+="complex64"===e.dtype?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],s=n-t-a-i;if(s>0)throw Error(`Backend '${this.backendName}' has an internal memory leak (${s} data ids) after running '${e}'`)}runKernelFunc(e){let t,r,n,a,i=[],s=this.isTapeOn(),o=this.state.numBytes,l=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;let u=n2(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(n2(e)){let{kernelName:t,inputs:a,attrs:o}=e;null==this.backendName&&this.backend;let l=rQ(t,this.backendName);A(null!=l,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),r=()=>{let e=this.backend.numDataIds(),r=Array.isArray(n=l.kernelFunc({inputs:a,attrs:o,backend:this.backend}))?n:[n];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,r);let u=r.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(s){let e=this.getTensorsForGradient(t,a,u);i=this.saveTensorsForBackwardMode(e)}return u}}else{let{forwardFunc:t}=e,a=e=>{s&&(i=e.map(e=>this.keep(this.clone(e))))};r=()=>{let e=this.backend.numDataIds(),r=Array.isArray(n=this.tidy(()=>t(this.backend,a)))?n:[n];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,r),r}}let{inputs:d,attrs:h}=e,p=n2(e)?null:e.backwardsFunc;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(a=this.profiler.profileKernel(u,d,()=>r()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(a),t=a.outputs):t=r()}),s&&this.addTapeNode(u,d,t,p,i,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-l,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map(e=>null!=d[e]?d[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:a.timeMs,extraInfo:a.extraInfo}),Array.isArray(n)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,r){let n=rY.get(e);if(null!=n){let e,a=n.inputsToSave||[],i=n.outputsToSave||[];n.saveAllInputs?(A(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),e=Object.keys(t).map(e=>t[e])):e=a.map(e=>t[e]);let s=r.filter((e,t)=>i[t]);return e.concat(s)}return[]}makeTensor(e,t,r,n){if(null==e)throw Error("Values passed to engine.makeTensor() are null");r=r||"float32",n=n||this.backend;let a=e;"string"===r&&ee(e[0])&&(a=e.map(e=>nF(e)));let i=n.write(a,t,r),s=new nj(t,r,i,this.nextTensorId());if(this.trackTensor(s,n),"string"===r){let e=this.state.tensorInfo.get(i),t=J(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return s}makeTensorFromDataId(e,t,r,n){let a={dataId:e,shape:t,dtype:r=r||"float32"};return this.makeTensorFromTensorInfo(a,n)}makeTensorFromTensorInfo(e,t){let{dataId:r,shape:n,dtype:a}=e,i=new nj(n,a,r,this.nextTensorId());return this.trackTensor(i,t),i}makeVariable(e,t=!0,r,n){r=r||this.nextVariableId().toString(),null!=n&&n!==e.dtype&&(e=e.cast(n));let a=new nq(e,t,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*Z(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof nq||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){let t=e.size*Z(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,r=this.state.numTensors;for(let n of(this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-r,this.state.activeProfile.kernels))n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,r,n,a,i){let s={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:a},o=rY.get(e);null!=o&&(n=o.gradFunc),null!=n&&(s.gradient=e=>(e=e.map((e,t)=>{if(null==e){let e=r[t],n=ed(e.size,e.dtype);return this.makeTensor(n,e.shape,e.dtype)}return e}),n(e.length>1?e:e[0],a,i))),this.state.activeTape.push(s)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=n1(e),r=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){let t=this.state.activeScope.track[e];t.kept||r.has(t.id)||t.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==n.id||this.track(e)})}gradients(e,t,r,n=!1){if(A(t.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);let a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));A(a instanceof nj,()=>"The result y returned by f() must be a tensor.");let i=function(e,t,r){let n={},a={};for(let e=0;e<t.length;e++)n[t[e].id]=!0;for(let r=0;r<e.length;r++){let i=e[r],s=i.inputs;for(let e in s){let r=s[e],o=!1;for(let e=0;e<t.length;e++)if(n[r.id]){i.outputs.forEach(e=>n[e.id]=!0),o=!0,a[i.id]=!0;break}if(o)break}}let i={};i[r.id]=!0;let s={};for(let t=e.length-1;t>=0;t--){let r=e[t],n=r.inputs;for(let e=0;e<r.outputs.length;e++)if(i[r.outputs[e].id]){for(let e in n)i[n[e].id]=!0,s[r.id]=!0;break}}let o=[];for(let t=0;t<e.length;t++){let r=e[t];if(a[r.id]&&s[r.id]){let e={};for(let t in r.inputs){let a=r.inputs[t];n[a.id]&&(e[t]=a)}let t=Object.assign({},r);t.inputs=e,t.outputs=r.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!n&&0===i.length&&t.length>0)throw Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let e={};e[a.id]=null==r?function(e){let t=eu(F(e),"float32");return n5.makeTensor(t,e,"float32")}(a.shape):r,function(e,t,r,n){for(let a=t.length-1;a>=0;a--){let i=t[a],s=[];if(i.outputs.forEach(t=>{let r=e[t.id];null!=r?s.push(r):s.push(null)}),null==i.gradient)throw Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);let o=i.gradient(s);for(let t in i.inputs){if(!(t in o))throw Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);let a=r(()=>o[t]());if("float32"!==a.dtype)throw Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);let s=i.inputs[t];if(!L(a.shape,s.shape))throw Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${s.shape}'`);if(null==e[s.id])e[s.id]=a;else{let t=e[s.id];e[s.id]=n(t,a),t.dispose()}}}}(e,i,e=>this.tidy(e),n8);let n=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(let t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:n}})}customGrad(e){return A(ea(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let r;A(t.every(e=>e instanceof nj),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let n={};return t.forEach((e,t)=>{n[t]=e}),this.runKernelFunc({forwardFunc:(n,a)=>(A((r=e(...t,a)).value instanceof nj,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),A(ea(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(e,n)=>{let a=r.gradFunc(e,n),i=Array.isArray(a)?a:[a];A(i.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),A(i.every(e=>e instanceof nj),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let s={};return i.forEach((e,t)=>{s[t]=()=>e}),s},inputs:n})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){let t=n_(),r=await this.backend.time(e);return r.wallMs=n_()-t,r}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){for(let e in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new n3,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function n6(){let e=ew();if(null==e._tfengine){let t=new ey(e);e._tfengine=new n4(t)}return eb=e._tfengine.ENV,nG=()=>e._tfengine,e._tfengine}n4.nextTensorId=0,n4.nextVariableId=0;const n5=n6();function n8(e,t){return n5.runKernel("Add",{a:e,b:t})}var n7={};function n9(e){t=e}function ae(e){if(void 0!==t)return t;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;let t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){let t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function at(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}l(n7,"mockIsMobile",()=>n9),l(n7,"isMobile",()=>ae),l(n7,"isBrowser",()=>at);const ar=eb;function an(e,t){let r=e;if(nD(e))return"string"===t?[]:[e.length];if(nZ(e)){let t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(nJ(e))return[e.buffer.size/(null==t?4:Z(t))];if(!Array.isArray(e))return[];let n=[];for(;Array.isArray(r)||nD(r)&&"string"!==t;)n.push(r.length),r=r[0];return Array.isArray(e)&&eb.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,r,n){if(n=n||[],!Array.isArray(t)&&!nD(t))return void A(0===r.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${r[0]} elements`);A(r.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`),A(t.length===r[0],()=>`Element arr[${n.join("][")}] should have ${r[0]} elements, but has ${t.length} elements`);let a=r.slice(1);for(let r=0;r<t.length;++r)e(t[r],a,n.concat(r))}(e,n,[]),n}function aa(e,t,r,n){if("string_or_numeric"!==e){if(null==e)throw Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw Error(`Argument '${r}' passed to '${n}' must be ${e} tensor, but got ${t} tensor`)}}function ai(e,t,r,n="numeric"){if(e instanceof nK())return aa(n,e.dtype,t,r),e;let a=en(e);if("string"!==a&&["bool","int32","float32"].indexOf(n)>=0&&(a=n),aa(n,a,t,r),null==e||!nD(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){let n=null==e?"null":e.constructor.name;throw Error(`Argument '${t}' passed to '${r}' must be a Tensor or TensorLike, but got '${n}'`)}let i=an(e,a);nD(e)||Array.isArray(e)||(e=[e]);let s="string"!==a?nA(e,a):nL(e,[],!0);return n5.makeTensor(s,i,a)}function as(e,t,r,n="numeric"){if(!Array.isArray(e))throw Error(`Argument ${t} passed to ${r} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,a)=>ai(e,`${t}[${a}]`,r,n))}ar.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),ar.registerFlag("IS_BROWSER",()=>at()),ar.registerFlag("IS_NODE",()=>!1),ar.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),ar.registerFlag("IS_SAFARI",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),ar.registerFlag("PROD",()=>!1),ar.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>ar.getBool("DEBUG")),ar.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),ar.registerFlag("IS_TEST",()=>!1),ar.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>ar.getBool("DEBUG")),ar.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),ar.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),ar.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const ao="__op";function al(e){let t=Object.keys(e);if(1!==t.length)throw Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let r=t[0],n=e[r];r.endsWith("_")&&(r=r.substring(0,r.length-1));let a=(...e)=>{n5.startScope(r);try{let t=n(...e);return em(t)&&console.error("Cannot return a Promise inside of tidy."),n5.endScope(t),t}catch(e){throw n5.endScope(null),e}};return Object.defineProperty(a,"name",{value:r+=ao,configurable:!0}),a}const au=al({complex_:function(e,t){let r=ai(e,"real","complex"),n=ai(t,"imag","complex");return _(r.shape,n.shape,`real and imag shapes, ${r.shape} and ${n.shape}, must match in call to tf.complex().`),n5.runKernel(eH,{real:r,imag:n})}});function ad(e,t,r,n){if(null==n)n=en(e);else if("complex64"===n)throw Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(nJ(e)||nZ(e)){if("float32"!==n&&"int32"!==n)throw Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${n}.`);return n5.backend.createTensorFromGPUData(e,t||r,n)}if(!nD(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ep(t);let e=F(t),n=F(r);A(e===n,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${n}`);for(let e=0;e<r.length;++e){let n=r[e],a=e!==r.length-1||n!==F(t.slice(e));A(r[e]===t[e]||!a,()=>`Error creating a new Tensor. Inferred shape (${r}) does not match the provided shape (${t}). `)}}return nD(e)||Array.isArray(e)||(e=[e]),t=t||r,e="string"!==n?nA(e,n):nL(e,[],!0),n5.makeTensor(e,t,n)}function ah(e,t,r){let n=an(e,r);return ad(e,t,n,r)}const ap={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class ac{static join(e){return new ac(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e||(e instanceof Array||(e=[e]),0===(e=e.map(e=>nD(e)?e.buffer:e)).length))return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let r=0;r<e.length;r++){let n=e[r];r!==e.length-1&&n.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);let a=t+n.byteLength;this.shards.push({buffer:n,start:t,end:a}),t=a}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length||(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e))return new ArrayBuffer(0);let r=this.findShardForByte(e);if(-1===r)throw Error(`Could not find start shard for byte ${e}`);let n=new ArrayBuffer(t-e),a=new Uint8Array(n),i=0;for(let n=r;n<this.shards.length;n++){let r=this.shards[n],s=e+i-r.start,o=i,l=Math.min(t,r.end)-r.start,u=new Uint8Array(r.buffer,s,l-s);if(a.set(u,o),i+=u.length,t<r.end)break}return n}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return -1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:+(e>=t.end)}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;let r=function(e,t){let r=0,n=e.length;for(;r<=n;){let a=Math.floor((n-r)/2)+r,i=t(e[a]);if(0===i)return a;i<0?n=a:r=a+1}return -1}(this.shards,t);return -1===r?-1:(this.previousShardIndex=r,this.previousShardIndex)}}function af(e,t){return n5.tidy(e,t)}function am(e){n1(e).forEach(e=>e.dispose())}function ag(e){return n5.keep(e)}function ay(e){return n5.setBackend(e)}function ax(){return n5.backendName}function ab(e,t,r=1){return n5.registerBackend(e,t,r)}function av(){return n5.backend}TB=function(e){for(var t,r=e.length,n=r%3,a=[],i=0,s=r-n;i<s;i+=16383)a.push(function(e,t,r){for(var n,a=[],i=t;i<r;i+=3)n=(e[i]<<16&0xff0000)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(aw[n>>18&63]+aw[n>>12&63]+aw[n>>6&63]+aw[63&n]);return a.join("")}(e,i,i+16383>s?s:i+16383));return 1===n?a.push(aw[(t=e[r-1])>>2]+aw[t<<4&63]+"=="):2===n&&a.push(aw[(t=(e[r-2]<<8)+e[r-1])>>10]+aw[t>>4&63]+aw[t<<2&63]+"="),a.join("")};for(var aw=[],aS=[],ak="undefined"!=typeof Uint8Array?Uint8Array:Array,aC="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",aI=0,aT=aC.length;aI<aT;++aI)aw[aI]=aC[aI],aS[aC.charCodeAt(aI)]=aI;aS[45]=62,aS[95]=63,Tz=function(e,t,r,n,a){var i,s,o=8*a-n-1,l=(1<<o)-1,u=l>>1,d=-7,h=r?a-1:0,p=r?-1:1,c=e[t+h];for(h+=p,i=c&(1<<-d)-1,c>>=-d,d+=o;d>0;i=256*i+e[t+h],h+=p,d-=8);for(s=i&(1<<-d)-1,i>>=-d,d+=n;d>0;s=256*s+e[t+h],h+=p,d-=8);if(0===i)i=1-u;else{if(i===l)return s?NaN:1/0*(c?-1:1);s+=Math.pow(2,n),i-=u}return(c?-1:1)*s*Math.pow(2,i-n)},TU=function(e,t,r,n,a,i){var s,o,l,u=8*i-a-1,d=(1<<u)-1,h=d>>1,p=5960464477539062e-23*(23===a),c=n?0:i-1,f=n?1:-1,m=+(t<0||0===t&&1/t<0);for(isNaN(t=Math.abs(t))||t===1/0?(o=+!!isNaN(t),s=d):(s=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-s))<1&&(s--,l*=2),s+h>=1?t+=p/l:t+=p*Math.pow(2,1-h),t*l>=2&&(s++,l/=2),s+h>=d?(o=0,s=d):s+h>=1?(o=(t*l-1)*Math.pow(2,a),s+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,a),s=0));a>=8;e[r+c]=255&o,c+=f,o/=256,a-=8);for(s=s<<a|o,u+=a;u>0;e[r+c]=255&s,c+=f,s/=256,u-=8);e[r+c-f]|=128*m};const a$="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;function aN(e){if(e>0x7fffffff)throw RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,aE.prototype),t}function aE(e,t,r){if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return a_(e)}return aR(e,t,r)}function aR(e,t,r){if("string"==typeof e){var n=e,a=t;if(("string"!=typeof a||""===a)&&(a="utf8"),!aE.isEncoding(a))throw TypeError("Unknown encoding: "+a);let r=0|aD(n,a),i=aN(r),s=i.write(n,a);return s!==r&&(i=i.slice(0,s)),i}if(ArrayBuffer.isView(e)){var i=e;if(a6(i,Uint8Array)){let e=new Uint8Array(i);return aF(e.buffer,e.byteOffset,e.byteLength)}return aO(i)}if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(a6(e,ArrayBuffer)||e&&a6(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(a6(e,SharedArrayBuffer)||e&&a6(e.buffer,SharedArrayBuffer)))return aF(e,t,r);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return aE.from(s,t,r);let o=function(e){if(aE.isBuffer(e)){let t=0|aP(e.length),r=aN(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||function(e){return e!=e}(e.length)?aN(0):aO(e):"Buffer"===e.type&&Array.isArray(e.data)?aO(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return aE.from(e[Symbol.toPrimitive]("string"),t,r);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function aA(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function a_(e){return aA(e),aN(e<0?0:0|aP(e))}function aO(e){let t=e.length<0?0:0|aP(e.length),r=aN(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function aF(e,t,r){let n;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw RangeError('"length" is outside of buffer bounds');return Object.setPrototypeOf(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),aE.prototype),n}function aP(e){if(e>=0x7fffffff)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function aD(e,t){if(aE.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||a6(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return a2(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return a3(e).length;default:if(a)return n?-1:a2(e).length;t=(""+t).toLowerCase(),a=!0}}function aL(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0||(r>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,r){let n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let a="";for(let n=t;n<r;++n)a+=a5[e[n]];return a}(this,t,r);case"utf8":case"utf-8":return aU(this,t,r);case"ascii":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let a=t;a<r;++a)n+=String.fromCharCode(127&e[a]);return n}(this,t,r);case"latin1":case"binary":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let a=t;a<r;++a)n+=String.fromCharCode(e[a]);return n}(this,t,r);case"base64":var a,i,s;return a=this,i=t,s=r,0===i&&s===a.length?TB(a):TB(a.slice(i,s));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,r){let n=e.slice(t,r),a="";for(let e=0;e<n.length-1;e+=2)a+=String.fromCharCode(n[e]+256*n[e+1]);return a}(this,t,r);default:if(n)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function aM(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}function aB(e,t,r,n,a){var i;if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>0x7fffffff?r=0x7fffffff:r<-0x80000000&&(r=-0x80000000),(i=r*=1)!=i&&(r=a?0:e.length-1),r<0&&(r=e.length+r),r>=e.length)if(a)return -1;else r=e.length-1;else if(r<0)if(!a)return -1;else r=0;if("string"==typeof t&&(t=aE.from(t,n)),aE.isBuffer(t))return 0===t.length?-1:az(e,t,r,n,a);if("number"==typeof t){if(t&=255,"function"==typeof Uint8Array.prototype.indexOf)if(a)return Uint8Array.prototype.indexOf.call(e,t,r);else return Uint8Array.prototype.lastIndexOf.call(e,t,r);return az(e,[t],r,n,a)}throw TypeError("val must be string, number or Buffer")}function az(e,t,r,n,a){let i,s=1,o=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s=2,o/=2,l/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(a){let n=-1;for(i=r;i<o;i++)if(u(e,i)===u(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===l)return n*s}else -1!==n&&(i-=i-n),n=-1}else for(r+l>o&&(r=o-l),i=r;i>=0;i--){let r=!0;for(let n=0;n<l;n++)if(u(e,i+n)!==u(t,n)){r=!1;break}if(r)return i}return -1}function aU(e,t,r){r=Math.min(e.length,r);let n=[],a=t;for(;a<r;){let t=e[a],i=null,s=t>239?4:t>223?3:t>191?2:1;if(a+s<=r){let r,n,o,l;switch(s){case 1:t<128&&(i=t);break;case 2:(192&(r=e[a+1]))==128&&(l=(31&t)<<6|63&r)>127&&(i=l);break;case 3:r=e[a+1],n=e[a+2],(192&r)==128&&(192&n)==128&&(l=(15&t)<<12|(63&r)<<6|63&n)>2047&&(l<55296||l>57343)&&(i=l);break;case 4:r=e[a+1],n=e[a+2],o=e[a+3],(192&r)==128&&(192&n)==128&&(192&o)==128&&(l=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&o)>65535&&l<1114112&&(i=l)}}null===i?(i=65533,s=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),a+=s}var i=n;let s=i.length;if(s<=4096)return String.fromCharCode.apply(String,i);let o="",l=0;for(;l<s;)o+=String.fromCharCode.apply(String,i.slice(l,l+=4096));return o}function aW(e,t,r){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>r)throw RangeError("Trying to access beyond buffer length")}function aV(e,t,r,n,a,i){if(!aE.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<i)throw RangeError('"value" argument is out of bounds');if(r+n>e.length)throw RangeError("Index out of range")}function aG(e,t,r,n,a){aZ(t,n,a,e,r,7);let i=Number(t&BigInt(0xffffffff));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let s=Number(t>>BigInt(32)&BigInt(0xffffffff));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function aH(e,t,r,n,a){aZ(t,n,a,e,r,7);let i=Number(t&BigInt(0xffffffff));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let s=Number(t>>BigInt(32)&BigInt(0xffffffff));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function aj(e,t,r,n,a,i){if(r+n>e.length||r<0)throw RangeError("Index out of range")}function aK(e,t,r,n,a){return t*=1,r>>>=0,a||aj(e,t,r,4,34028234663852886e22,-34028234663852886e22),TU(e,t,r,n,23,4),r+4}function aq(e,t,r,n,a){return t*=1,r>>>=0,a||aj(e,t,r,8,17976931348623157e292,-17976931348623157e292),TU(e,t,r,n,52,8),r+8}aE.TYPED_ARRAY_SUPPORT=function(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),aE.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(aE.prototype,"parent",{enumerable:!0,get:function(){if(aE.isBuffer(this))return this.buffer}}),Object.defineProperty(aE.prototype,"offset",{enumerable:!0,get:function(){if(aE.isBuffer(this))return this.byteOffset}}),aE.poolSize=8192,aE.from=function(e,t,r){return aR(e,t,r)},Object.setPrototypeOf(aE.prototype,Uint8Array.prototype),Object.setPrototypeOf(aE,Uint8Array),aE.alloc=function(e,t,r){return(aA(e),e<=0)?aN(e):void 0!==t?"string"==typeof r?aN(e).fill(t,r):aN(e).fill(t):aN(e)},aE.allocUnsafe=function(e){return a_(e)},aE.allocUnsafeSlow=function(e){return a_(e)},aE.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==aE.prototype},aE.compare=function(e,t){if(a6(e,Uint8Array)&&(e=aE.from(e,e.offset,e.byteLength)),a6(t,Uint8Array)&&(t=aE.from(t,t.offset,t.byteLength)),!aE.isBuffer(e)||!aE.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let a=0,i=Math.min(r,n);a<i;++a)if(e[a]!==t[a]){r=e[a],n=t[a];break}return r<n?-1:+(n<r)},aE.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},aE.concat=function(e,t){let r;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return aE.alloc(0);if(void 0===t)for(r=0,t=0;r<e.length;++r)t+=e[r].length;let n=aE.allocUnsafe(t),a=0;for(r=0;r<e.length;++r){let t=e[r];if(a6(t,Uint8Array))a+t.length>n.length?(aE.isBuffer(t)||(t=aE.from(t)),t.copy(n,a)):Uint8Array.prototype.set.call(n,t,a);else if(aE.isBuffer(t))t.copy(n,a);else throw TypeError('"list" argument must be an Array of Buffers');a+=t.length}return n},aE.byteLength=aD,aE.prototype._isBuffer=!0,aE.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)aM(this,t,t+1);return this},aE.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)aM(this,t,t+3),aM(this,t+1,t+2);return this},aE.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)aM(this,t,t+7),aM(this,t+1,t+6),aM(this,t+2,t+5),aM(this,t+3,t+4);return this},aE.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?aU(this,0,e):aL.apply(this,arguments)},aE.prototype.toLocaleString=aE.prototype.toString,aE.prototype.equals=function(e){if(!aE.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===aE.compare(this,e)},aE.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},a$&&(aE.prototype[a$]=aE.prototype.inspect),aE.prototype.compare=function(e,t,r,n,a){if(a6(e,Uint8Array)&&(e=aE.from(e,e.offset,e.byteLength)),!aE.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===a&&(a=this.length),t<0||r>e.length||n<0||a>this.length)throw RangeError("out of range index");if(n>=a&&t>=r)return 0;if(n>=a)return -1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,a>>>=0,this===e)return 0;let i=a-n,s=r-t,o=Math.min(i,s),l=this.slice(n,a),u=e.slice(t,r);for(let e=0;e<o;++e)if(l[e]!==u[e]){i=l[e],s=u[e];break}return i<s?-1:+(s<i)},aE.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},aE.prototype.indexOf=function(e,t,r){return aB(this,e,t,r,!0)},aE.prototype.lastIndexOf=function(e,t,r){return aB(this,e,t,r,!1)},aE.prototype.write=function(e,t,r,n){var a,i,s,o,l,u,d,h;if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let p=this.length-t;if((void 0===r||r>p)&&(r=p),e.length>0&&(r<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let c=!1;for(;;)switch(n){case"hex":return function(e,t,r,n){let a;r=Number(r)||0;let i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;let s=t.length;for(n>s/2&&(n=s/2),a=0;a<n;++a){var o;let n=parseInt(t.substr(2*a,2),16);if((o=n)!=o)break;e[r+a]=n}return a}(this,e,t,r);case"utf8":case"utf-8":return a=t,i=r,a4(a2(e,this.length-a),this,a,i);case"ascii":case"latin1":case"binary":return s=t,o=r,a4(function(e){let t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(e),this,s,o);case"base64":return l=t,u=r,a4(a3(e),this,l,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return d=t,h=r,a4(function(e,t){let r,n,a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=(r=e.charCodeAt(i))>>8,a.push(r%256),a.push(n);return a}(e,this.length-d),this,d,h);default:if(c)throw TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),c=!0}},aE.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},aE.prototype.slice=function(e,t){let r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);let n=this.subarray(e,t);return Object.setPrototypeOf(n,aE.prototype),n},aE.prototype.readUintLE=aE.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||aW(e,t,this.length);let n=this[e],a=1,i=0;for(;++i<t&&(a*=256);)n+=this[e+i]*a;return n},aE.prototype.readUintBE=aE.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||aW(e,t,this.length);let n=this[e+--t],a=1;for(;t>0&&(a*=256);)n+=this[e+--t]*a;return n},aE.prototype.readUint8=aE.prototype.readUInt8=function(e,t){return e>>>=0,t||aW(e,1,this.length),this[e]},aE.prototype.readUint16LE=aE.prototype.readUInt16LE=function(e,t){return e>>>=0,t||aW(e,2,this.length),this[e]|this[e+1]<<8},aE.prototype.readUint16BE=aE.prototype.readUInt16BE=function(e,t){return e>>>=0,t||aW(e,2,this.length),this[e]<<8|this[e+1]},aE.prototype.readUint32LE=aE.prototype.readUInt32LE=function(e,t){return e>>>=0,t||aW(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+0x1000000*this[e+3]},aE.prototype.readUint32BE=aE.prototype.readUInt32BE=function(e,t){return e>>>=0,t||aW(e,4,this.length),0x1000000*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},aE.prototype.readBigUInt64LE=a8(function(e){aJ(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&a0(e,this.length-8);let n=t+256*this[++e]+65536*this[++e]+0x1000000*this[++e],a=this[++e]+256*this[++e]+65536*this[++e]+0x1000000*r;return BigInt(n)+(BigInt(a)<<BigInt(32))}),aE.prototype.readBigUInt64BE=a8(function(e){aJ(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&a0(e,this.length-8);let n=0x1000000*t+65536*this[++e]+256*this[++e]+this[++e],a=0x1000000*this[++e]+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(a)}),aE.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||aW(e,t,this.length);let n=this[e],a=1,i=0;for(;++i<t&&(a*=256);)n+=this[e+i]*a;return n>=(a*=128)&&(n-=Math.pow(2,8*t)),n},aE.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||aW(e,t,this.length);let n=t,a=1,i=this[e+--n];for(;n>0&&(a*=256);)i+=this[e+--n]*a;return i>=(a*=128)&&(i-=Math.pow(2,8*t)),i},aE.prototype.readInt8=function(e,t){return(e>>>=0,t||aW(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},aE.prototype.readInt16LE=function(e,t){e>>>=0,t||aW(e,2,this.length);let r=this[e]|this[e+1]<<8;return 32768&r?0xffff0000|r:r},aE.prototype.readInt16BE=function(e,t){e>>>=0,t||aW(e,2,this.length);let r=this[e+1]|this[e]<<8;return 32768&r?0xffff0000|r:r},aE.prototype.readInt32LE=function(e,t){return e>>>=0,t||aW(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},aE.prototype.readInt32BE=function(e,t){return e>>>=0,t||aW(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},aE.prototype.readBigInt64LE=a8(function(e){aJ(e>>>=0,"offset");let t=this[e],r=this[e+7];return(void 0===t||void 0===r)&&a0(e,this.length-8),(BigInt(this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24))<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+0x1000000*this[++e])}),aE.prototype.readBigInt64BE=a8(function(e){aJ(e>>>=0,"offset");let t=this[e],r=this[e+7];return(void 0===t||void 0===r)&&a0(e,this.length-8),(BigInt((t<<24)+65536*this[++e]+256*this[++e]+this[++e])<<BigInt(32))+BigInt(0x1000000*this[++e]+65536*this[++e]+256*this[++e]+r)}),aE.prototype.readFloatLE=function(e,t){return e>>>=0,t||aW(e,4,this.length),Tz(this,e,!0,23,4)},aE.prototype.readFloatBE=function(e,t){return e>>>=0,t||aW(e,4,this.length),Tz(this,e,!1,23,4)},aE.prototype.readDoubleLE=function(e,t){return e>>>=0,t||aW(e,8,this.length),Tz(this,e,!0,52,8)},aE.prototype.readDoubleBE=function(e,t){return e>>>=0,t||aW(e,8,this.length),Tz(this,e,!1,52,8)},aE.prototype.writeUintLE=aE.prototype.writeUIntLE=function(e,t,r,n){if(e*=1,t>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;aV(this,e,t,r,n,0)}let a=1,i=0;for(this[t]=255&e;++i<r&&(a*=256);)this[t+i]=e/a&255;return t+r},aE.prototype.writeUintBE=aE.prototype.writeUIntBE=function(e,t,r,n){if(e*=1,t>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;aV(this,e,t,r,n,0)}let a=r-1,i=1;for(this[t+a]=255&e;--a>=0&&(i*=256);)this[t+a]=e/i&255;return t+r},aE.prototype.writeUint8=aE.prototype.writeUInt8=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,1,255,0),this[t]=255&e,t+1},aE.prototype.writeUint16LE=aE.prototype.writeUInt16LE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},aE.prototype.writeUint16BE=aE.prototype.writeUInt16BE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},aE.prototype.writeUint32LE=aE.prototype.writeUInt32LE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,4,0xffffffff,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},aE.prototype.writeUint32BE=aE.prototype.writeUInt32BE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,4,0xffffffff,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},aE.prototype.writeBigUInt64LE=a8(function(e,t=0){return aG(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),aE.prototype.writeBigUInt64BE=a8(function(e,t=0){return aH(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),aE.prototype.writeIntLE=function(e,t,r,n){if(e*=1,t>>>=0,!n){let n=Math.pow(2,8*r-1);aV(this,e,t,r,n-1,-n)}let a=0,i=1,s=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/i|0)-s&255;return t+r},aE.prototype.writeIntBE=function(e,t,r,n){if(e*=1,t>>>=0,!n){let n=Math.pow(2,8*r-1);aV(this,e,t,r,n-1,-n)}let a=r-1,i=1,s=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/i|0)-s&255;return t+r},aE.prototype.writeInt8=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},aE.prototype.writeInt16LE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},aE.prototype.writeInt16BE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},aE.prototype.writeInt32LE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,4,0x7fffffff,-0x80000000),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},aE.prototype.writeInt32BE=function(e,t,r){return e*=1,t>>>=0,r||aV(this,e,t,4,0x7fffffff,-0x80000000),e<0&&(e=0xffffffff+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},aE.prototype.writeBigInt64LE=a8(function(e,t=0){return aG(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),aE.prototype.writeBigInt64BE=a8(function(e,t=0){return aH(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),aE.prototype.writeFloatLE=function(e,t,r){return aK(this,e,t,!0,r)},aE.prototype.writeFloatBE=function(e,t,r){return aK(this,e,t,!1,r)},aE.prototype.writeDoubleLE=function(e,t,r){return aq(this,e,t,!0,r)},aE.prototype.writeDoubleBE=function(e,t,r){return aq(this,e,t,!1,r)},aE.prototype.copy=function(e,t,r,n){if(!aE.isBuffer(e))throw TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r||0===e.length||0===this.length)return 0;if(t<0)throw RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw RangeError("Index out of range");if(n<0)throw RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);let a=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),a},aE.prototype.fill=function(e,t,r,n){let a;if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw TypeError("encoding must be a string");if("string"==typeof n&&!aE.isEncoding(n))throw TypeError("Unknown encoding: "+n);if(1===e.length){let t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw RangeError("Out of range index");if(r<=t)return this;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{let i=aE.isBuffer(e)?e:aE.from(e,n),s=i.length;if(0===s)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<r-t;++a)this[a+t]=i[a%s]}return this};const aX={};function aY(e,t,r){aX[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function aQ(e){let t="",r=e.length,n=+("-"===e[0]);for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function aZ(e,t,r,n,a,i){if(e>r||e<t){let n,a="bigint"==typeof t?"n":"";throw n=i>3?0===t||t===BigInt(0)?`>= 0${a} and < 2${a} ** ${(i+1)*8}${a}`:`>= -(2${a} ** ${(i+1)*8-1}${a}) and < 2 ** ${(i+1)*8-1}${a}`:`>= ${t}${a} and <= ${r}${a}`,new aX.ERR_OUT_OF_RANGE("value",n,e)}aJ(a,"offset"),(void 0===n[a]||void 0===n[a+i])&&a0(a,n.length-(i+1))}function aJ(e,t){if("number"!=typeof e)throw new aX.ERR_INVALID_ARG_TYPE(t,"number",e)}function a0(e,t,r){if(Math.floor(e)!==e)throw aJ(e,r),new aX.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new aX.ERR_BUFFER_OUT_OF_BOUNDS;throw new aX.ERR_OUT_OF_RANGE(r||"offset",`>= ${+!!r} and <= ${t}`,e)}aY("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),aY("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),aY("ERR_OUT_OF_RANGE",function(e,t,r){let n=`The value of "${e}" is out of range.`,a=r;return Number.isInteger(r)&&Math.abs(r)>0x100000000?a=aQ(String(r)):"bigint"==typeof r&&(a=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(a=aQ(a)),a+="n"),n+=` It must be ${t}. Received ${a}`},RangeError);const a1=/[^+/0-9A-Za-z-_]/g;function a2(e,t){let r;t=t||1/0;let n=e.length,a=null,i=[];for(let s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!a){if(r>56319||s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}a=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),a=r;continue}r=(a-55296<<10|r-56320)+65536}else a&&(t-=3)>-1&&i.push(239,191,189);if(a=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else if(r<1114112){if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}else throw Error("Invalid code point")}return i}function a3(e){return function(e){var t,r,n=function(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");-1===r&&(r=t);var n=r===t?0:4-r%4;return[r,n]}(e),a=n[0],i=n[1],s=new ak((a+i)*3/4-i),o=0,l=i>0?a-4:a;for(r=0;r<l;r+=4)t=aS[e.charCodeAt(r)]<<18|aS[e.charCodeAt(r+1)]<<12|aS[e.charCodeAt(r+2)]<<6|aS[e.charCodeAt(r+3)],s[o++]=t>>16&255,s[o++]=t>>8&255,s[o++]=255&t;return 2===i&&(t=aS[e.charCodeAt(r)]<<2|aS[e.charCodeAt(r+1)]>>4,s[o++]=255&t),1===i&&(t=aS[e.charCodeAt(r)]<<10|aS[e.charCodeAt(r+1)]<<4|aS[e.charCodeAt(r+2)]>>2,s[o++]=t>>8&255,s[o++]=255&t),s}(function(e){if((e=(e=e.split("=")[0]).trim().replace(a1,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function a4(e,t,r,n){let a;for(a=0;a<n&&!(a+r>=t.length)&&!(a>=e.length);++a)t[a+r]=e[a];return a}function a6(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}const a5=function(){let e="0123456789abcdef",t=Array(256);for(let r=0;r<16;++r){let n=16*r;for(let a=0;a<16;++a)t[n+a]=e[r]+e[a]}return t}();function a8(e){return"undefined"==typeof BigInt?a7:e}function a7(){throw Error("BigInt not supported")}async function a9(e,t){let r=[],n=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let i=0;i<a.length;++i){let s=a[i],o=Array.isArray(e)?e[i].tensor:e[s];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw Error(`Unsupported dtype in weight '${s}': ${o.dtype}`);let l={name:s,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){let e=new Promise(async e=>{let t=await o.bytes(),r=new Uint8Array(t.reduce((e,t)=>e+t.length,0)+4*t.length),n=0;for(let e=0;e<t.length;e++){let a=t[e],i=new Uint8Array(new Uint32Array([a.length]).buffer);r.set(i,n),n+=4,r.set(a,n),n+=a.length}e(r)});n.push(e)}else n.push(o.data());null!=t&&(l.group=t),r.push(l)}return{data:function(e){if(null===e)throw Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0,r=[];e.forEach(e=>{if(t+=e.byteLength,r.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});let n=new Uint8Array(t),a=0;return r.forEach(e=>{n.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),n.buffer}(await Promise.all(n)),specs:r}}function ie(e,t){let r=new ac(e),n={},a=0;for(let e of t){let t=function(e,t){let r,n=F(e.shape);if("quantization"in e)r=ap[e.quantization.dtype];else if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=4+new Uint32Array(t(e,e+4))[0];return e}else r=ap[e.dtype];return n*r}(e,(e,t)=>r.slice(a+e,a+t));n[e.name]=ir(e,r.slice(a,a+t)),a+=t}return n}async function it(e,t){let r,n=F(e.shape);if("quantization"in e)r=ap[e.quantization.dtype];else if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=4+new Uint32Array(await t(e,e+4))[0];return e}else r=ap[e.dtype];return n*r}function ir(e,t){let r,n=e.name,a=e.dtype,i=e.shape,s=F(i),o=0;if("quantization"in e){let i=e.quantization;if("uint8"===i.dtype||"uint16"===i.dtype){if(!("min"in i&&"scale"in i))throw Error(`Weight ${e.name} with quantization ${i.dtype} doesn't have corresponding metadata min and scale.`)}else if("float16"===i.dtype){if("float32"!==a)throw Error(`Weight ${e.name} is quantized with ${i.dtype} which only supports weights of type float32 not ${a}.`)}else throw Error(`Weight ${e.name} has unknown quantization dtype ${i.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let l=ap[i.dtype],u="uint8"===i.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===a)if("uint8"===i.dtype||"uint16"===i.dtype){r=new Float32Array(u.length);for(let e=0;e<u.length;e++){let t=u[e];r[e]=t*i.scale+i.min}}else if("float16"===i.dtype)r=(function(){let e=function(){let e=e=>{let t=e<<13,r=0;for(;(8388608&t)==0;)r-=8388608,t<<=1;return(t&=-8388609)|(r+=0x38800000)},t=new Uint32Array(2048);t[0]=0;for(let r=1;r<1024;r++)t[r]=e(r);for(let e=1024;e<2048;e++)t[e]=0x38000000+(e-1024<<13);return t}(),t=function(){let e=new Uint32Array(64);e[0]=0,e[31]=0x47800000,e[32]=0x80000000,e[63]=0xc7800000;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=0x80000000+(t-32<<23);return e}(),r=function(){let e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return n=>{let a=new ArrayBuffer(4*n.length),i=new Uint32Array(a);for(let a=0;a<n.length;a++){let s=n[a],o=e[r[s>>10]+(1023&s)]+t[s>>10];i[a]=o}return new Float32Array(a)}})()(u);else throw Error(`Unsupported quantization type ${i.dtype} for weight type float32.`);else if("int32"===a){if("uint8"!==i.dtype&&"uint16"!==i.dtype)throw Error(`Unsupported quantization type ${i.dtype} for weight type int32.`);r=new Int32Array(u.length);for(let e=0;e<u.length;e++){let t=u[e];r[e]=Math.round(t*i.scale+i.min)}}else throw Error(`Unsupported dtype in weight '${n}': ${a}`);o+=s*l}else if("string"===a){let n=F(e.shape);r=[];for(let e=0;e<n;e++){let e=new Uint32Array(t.slice(o,o+4))[0];o+=4;let n=new Uint8Array(t.slice(o,o+e));r.push(n),o+=e}}else{let e=ap[a];if("float32"===a)r=new Float32Array(t);else if("int32"===a)r=new Int32Array(t);else if("bool"===a)r=new Uint8Array(t);else if("complex64"===a){r=new Float32Array(t);let e=new Float32Array(r.length/2),n=new Float32Array(r.length/2);for(let t=0;t<e.length;t++)e[t]=r[2*t],n[t]=r[2*t+1];let a=ah(e,i,"float32"),s=ah(n,i,"float32"),o=au(a,s);return a.dispose(),s.dispose(),o}else throw Error(`Unsupported dtype in weight '${n}': ${a}`);o+=s*e}return ah(r,i,a)}async function ia(e,t,r){let n=new Uint8Array(t);for(;n.byteLength<r;){let{done:t,value:a}=await e.read();if(t&&null==a){let e=r-n.byteLength;throw Error(`Reader is done but ${e} bytes are still expected`)}let i=new Uint8Array(n.length+a.byteLength);i.set(n,0),i.set(new Uint8Array(a),n.length),n=i}return n.buffer}async function ii(e,t){let r={},n=e.getReader(),a=new ArrayBuffer(0);for(let e of t){let t=await it(e,async(e,t)=>(a=await ia(n,a,t)).slice(e,t)),i=(a=await ia(n,a,t)).slice(0,t);a=a.slice(t);let s=ir(e,i);if(r[e.name]=s,"webgpu"===ax()){let e=av();"uploadToGPU"in e&&F(s.shape)>=eb.get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(s.dataId)}}return r}const is="undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa;function io(e){return is?aE.byteLength(e,"utf8"):new Blob([e]).size}function il(e){return ac.join(e)}function iu(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);let t=e.split("/");return t[t.length-1]}function id(e,t){let r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),r}function ih(e,t,r){let n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw Error("modelJSON has weightsManifest but weightSpecs is null");if(!r)throw Error("modelJSON has weightsManifest but weightData is null");n.weightSpecs=t,n.weightData=r}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),n}async function ip(e,t){let r,n;return null!=e.weightsManifest&&([r,n]=await t(e.weightsManifest)),ih(e,r,n)}function ic(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:io(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:io(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new ac(e.weightData).byteLength}}function im(e){let t=[];for(let r of e)t.push(...r.weights);return t}class ig{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ig.instance&&(ig.instance=new ig),ig.instance}static registerSaveRouter(e){ig.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ig.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ig.getHandlers(e,"save")}static getLoadHandlers(e,t){return ig.getHandlers(e,"load",t)}static getHandlers(e,t,r){let n=[];return("load"===t?ig.getInstance().loadRouters:ig.getInstance().saveRouters).forEach(t=>{let a=t(e,r);null!==a&&n.push(a)}),n}}const iy=e=>ig.registerSaveRouter(e),ix=e=>ig.registerLoadRouter(e),ib=e=>ig.getSaveHandlers(e),iv=(e,t)=>ig.getLoadHandlers(e,t),iw="tensorflowjs",iS="models_store",ik="model_info_store";function iC(){if(!eb.getBool("IS_BROWSER"))throw Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw Error("The current browser does not appear to support IndexedDB.");return t}function iI(e){let t=e.result;t.createObjectStore(iS,{keyPath:"modelPath"}),t.createObjectStore(ik,{keyPath:"modelPath"})}class iT{constructor(e){if(this.indexedDB=iC(),null==e||!e)throw Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,r)=>{let n=this.indexedDB.open(iw,1);n.onupgradeneeded=()=>iI(n),n.onsuccess=()=>{let a=n.result;if(null==t){let t=a.transaction(iS,"readonly"),n=t.objectStore(iS).get(this.modelPath);n.onsuccess=()=>{if(null==n.result)return a.close(),r(Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(n.result.modelArtifacts)},n.onerror=e=>(a.close(),r(n.error)),t.oncomplete=()=>a.close()}else{let n,i;t.weightData=ac.join(t.weightData);let s=ic(t),o=a.transaction(ik,"readwrite"),l=o.objectStore(ik);try{n=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return r(e)}n.onsuccess=()=>{let n,u=(i=a.transaction(iS,"readwrite")).objectStore(iS);try{n=u.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return r(e)}n.onsuccess=()=>e({modelArtifactsInfo:s}),n.onerror=e=>{let t=(l=o.objectStore(ik)).delete(this.modelPath);t.onsuccess=()=>(a.close(),r(n.error)),t.onerror=e=>(a.close(),r(n.error))}},n.onerror=e=>(a.close(),r(n.error)),o.oncomplete=()=>{null==i?a.close():i.oncomplete=()=>a.close()}}},n.onerror=e=>r(n.error)})}}iT.URL_SCHEME="indexeddb://";const i$=e=>{var t;return eb.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(iT.URL_SCHEME)?(t=e.slice(iT.URL_SCHEME.length),new iT(t)):null};ig.registerSaveRouter(i$),ig.registerLoadRouter(i$);const iN="tensorflowjs_models",iE="info";function iR(e){return{info:[iN,e,iE].join("/"),topology:[iN,e,"model_topology"].join("/"),weightSpecs:[iN,e,"weight_specs"].join("/"),weightData:[iN,e,"weight_data"].join("/"),modelMetadata:[iN,e,"model_metadata"].join("/")}}function iA(e){for(let t of Object.values(e))window.localStorage.removeItem(t)}class i_{constructor(e){if(!eb.getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=iR(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),n=ic(e),a=ac.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(is)return aE.from(e).toString("base64");let t=new Uint8Array(e),r="";for(let e=0,n=t.length;e<n;e++)r+=String.fromCharCode(t[e]);return btoa(r)}(a));let i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:n}}catch(e){throw iA(this.keys),Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},r=JSON.parse(this.LS.getItem(this.keys.topology));if(null==r)throw Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=r;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==n)throw Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=n;let a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){let e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(null==i)throw Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(is){let t=aE.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}let t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r.set([t.charCodeAt(e)],e);return r.buffer}(i),t}}i_.URL_SCHEME="localstorage://";const iO=e=>{var t;return eb.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(i_.URL_SCHEME)?(t=e.slice(i_.URL_SCHEME.length),new i_(t)):null};ig.registerSaveRouter(iO),ig.registerLoadRouter(iO);class iF{constructor(){this.managers={}}static getInstance(){return null==iF.instance&&(iF.instance=new iF),iF.instance}static registerManager(e,t){A(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),A(e.length>0,()=>"scheme must not be an empty string.");let r=iF.getInstance();A(null==r.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),r.managers[e]=t}static getManager(e){let t=iF.getInstance().managers[e];if(null==t)throw Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(iF.getInstance().managers)}}function iP(e){if(-1===e.indexOf("://"))throw Error(`The url string provided does not contain a scheme. Supported schemes are: ${iF.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function iD(e,t,r=!1){A(e!==t,()=>`Old path and new path are the same: '${e}'`);let n=ig.getLoadHandlers(e);A(n.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),A(n.length<2,()=>`Copying failed because more than one (${n.length}) load handlers for source URL ${e}.`);let a=n[0],i=ig.getSaveHandlers(t);A(i.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),A(i.length<2,()=>`Copying failed because more than one (${n.length}) save handlers for destination URL ${t}.`);let s=i[0],o=iP(e).scheme,l=iP(e).path,u=o===iP(e).scheme,d=await a.load();r&&u&&await iF.getManager(o).removeModel(l);let h=await s.save(d);return r&&!u&&await iF.getManager(o).removeModel(l),h.modelArtifactsInfo}async function iL(){let e=iF.getSchemes(),t={};for(let r of e){let e=await iF.getManager(r).listModels();for(let n in e)t[r+"://"+n]=e[n]}return t}async function iM(e){let t=iP(e);return iF.getManager(t.scheme).removeModel(t.path)}async function iB(e,t){return iD(e,t,!1)}async function iz(e,t){return iD(e,t,!0)}if(eb.get("IS_BROWSER")){eb.setPlatform("browser",new class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if("undefined"==typeof window||!eb.getBool("USE_SETTIMEOUTCUSTOM"))return void setTimeout(e,t);this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))}isTypedArray(e){return r1(e)}});try{iF.registerManager(i_.URL_SCHEME,new class{constructor(){A(eb.getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),A("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=iN+"/",r="/"+iE;for(let n=0;n<this.LS.length;++n){let a=this.LS.key(n);a.startsWith(t)&&a.endsWith(r)&&(e[function(e){let t=e.split("/");if(t.length<3)throw Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;let r=iR(e=(t=e).startsWith(i_.URL_SCHEME)?t.slice(i_.URL_SCHEME.length):t);if(null==this.LS.getItem(r.info))throw Error(`Cannot find model at path '${e}'`);let n=JSON.parse(this.LS.getItem(r.info));return iA(r),n}})}catch(e){}try{iF.registerManager(iT.URL_SCHEME,new class{constructor(){this.indexedDB=iC()}async listModels(){return new Promise((e,t)=>{let r=this.indexedDB.open(iw,1);r.onupgradeneeded=()=>iI(r),r.onsuccess=()=>{let n=r.result,a=n.transaction(ik,"readonly"),i=a.objectStore(ik).getAll();i.onsuccess=()=>{let t={};for(let e of i.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},i.onerror=e=>(n.close(),t(i.error)),a.oncomplete=()=>n.close()},r.onerror=e=>t(r.error)})}async removeModel(e){var t;return e=(t=e).startsWith(iT.URL_SCHEME)?t.slice(iT.URL_SCHEME.length):t,new Promise((t,r)=>{let n=this.indexedDB.open(iw,1);n.onupgradeneeded=()=>iI(n),n.onsuccess=()=>{let a,i=n.result,s=i.transaction(ik,"readwrite"),o=s.objectStore(ik),l=o.get(e);l.onsuccess=()=>{if(null==l.result)return i.close(),r(Error(`Cannot find model with path '${e}' in IndexedDB.`));{let n=o.delete(e),s=()=>{let n=(a=i.transaction(iS,"readwrite")).objectStore(iS).delete(e);n.onsuccess=()=>t(l.result.modelArtifactsInfo),n.onerror=e=>r(l.error)};n.onsuccess=s,n.onerror=e=>(s(),i.close(),r(l.error))}},l.onerror=e=>(i.close(),r(l.error)),s.oncomplete=()=>{null==a?i.close():a.oncomplete=()=>i.close()}},n.onerror=e=>r(n.error)})}})}catch(e){}}const iU={importFetch:()=>y("dee6J")};function iW(e,t="float32",r){return t=t||"float32",ep(e),new nV(e,t,r)}eb.get("IS_NODE")&&!eb.get("IS_BROWSER")&&eb.setPlatform("node",new class{constructor(){this.util=y("dee6J"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=eb.global.fetch?eb.global.fetch(e,t):(null==r&&(r=iU.importFetch()),r(e,t))}now(){let e=ev.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const iV=al({cast_:function(e,t){let r=ai(e,"x","cast");if(!Y(t))throw Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==r.dtype||"string"!==t&&"string"===r.dtype)throw Error("Only strings can be casted to strings");return n5.runKernel(eW,{x:r},{dtype:t})}}),iG=al({clone_:function(e){let t=ai(e,"x","clone","string_or_numeric");return n5.runKernel(ty,{x:t})}});function iH(e,t=!1){console.log(e.toString(t))}n6(),nH={buffer:iW,cast:iV,clone:iG,print:iH};const ij=al({add_:function(e,t){let r=ai(e,"a","add"),n=ai(t,"b","add");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel("Add",a)}}),iK=al({floorDiv_:function(e,t){let r=ai(e,"a","floorDiv"),n=ai(t,"b","floorDiv");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel(th,a)}}),iq=al({div_:function(e,t){let r=ai(e,"a","div"),n=ai(t,"b","div");if([r,n]=n0(r,n),"int32"===r.dtype&&"int32"===n.dtype)return iK(r,n);let a={a:r,b:n};return n5.runKernel(tr,a,{})}}),iX=al({mul_:function(e,t){let r=ai(e,"a","mul"),n=ai(t,"b","mul");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel(tW,a)}}),iY=al({sqrt_:function(e){let t=ai(e,"x","sqrt","float32");return n5.runKernel(rm,{x:t})}}),iQ=al({square_:function(e){let t=ai(e,"x","square");return n5.runKernel("Square",{x:t},{})}}),iZ=al({zerosLike_:function(e){let t=ai(e,"x","zerosLike");return n5.runKernel(rB,{x:t})}});function iJ(e){return n5.customGrad(e)}function i0(e,t){if((nD(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&nD(e)&&!(e instanceof Uint8Array))throw Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ad(e,[],[],t)}const i1=new Map,i2=new Map;class i3{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class i4{constructor(){this.classNameMap={}}static getMap(){return null==i4.instance&&(i4.instance=new i4),i4.instance}static register(e){i4.getMap().classNameMap[e.className]=[e,e.fromConfig]}}class i6 extends i3{minimize(e,t=!1,r){let{value:n,grads:a}=this.computeGradients(e,r);if(null!=r){let e=r.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return(am(a),t)?n:(n.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){A(ea(e),()=>"The f passed in variableGrads(f) must be a function"),A(null==t||Array.isArray(t)&&t.every(e=>e instanceof nq),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let r=null!=t;if(!r)for(let e in t=[],n5.registeredVariables)t.push(n5.registeredVariables[e]);let n=r?t.filter(e=>!e.trainable):null,a=t.length;A((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`);let{value:i,grads:s}=n5.gradients(e,t,null,!0);A(s.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),A(0===i.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let o={};return t.forEach((e,t)=>{null!=s[t]&&(o[e.name]=s[t])}),null!=n&&n.forEach(e=>o[e.name]=null),{value:i,grads:o}}(e,t)}dispose(){null!=this.iterations_&&am(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:i0(this.iterations_,"int32")}}async getWeights(){throw Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}function i5(e,t,r){ep(e),r=r||en(t);let n={shape:e,value:t,dtype:r};return n5.runKernel(tl,{},n)}Object.defineProperty(i6,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const i8=al({pow_:function(e,t){let r=ai(e,"base","pow"),n=ai(t,"exp","pow");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel("Pow",a)}}),i7=al({sub_:function(e,t){let r=ai(e,"a","sub"),n=ai(t,"b","sub");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel("Sub",a)}}),i9=al({abs_:function(e){let t=ai(e,"x","abs");return"complex64"===t.dtype?n5.runKernel(ej,{x:t}):n5.runKernel("Abs",{x:t})}});var se={};function st(e,t){let r=e.length,n=[];for(let a=0;a<r;a++){let i=r-1-a,s=e[i]||1;(t[t.length-1-a]||1)>1&&1===s&&n.unshift(i)}return n}function sr(e,t){let r=[];for(let n=0;n<t.length;n++){let a=e[e.length-n-1],i=t.length-n-1,s=t[i];(null==a||1===a&&s>1)&&r.unshift(i)}return r}function sn(e,t){let r=Math.max(e.length,t.length),n=Array(r);for(let a=0;a<r;a++){let i=e[e.length-a-1];null==i&&(i=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===i)n[r-a-1]=s;else if(1===s)n[r-a-1]=i;else if(i!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);else n[r-a-1]=i}return n}l(se,"getBroadcastDims",()=>st),l(se,"getReductionAxes",()=>sr),l(se,"assertAndGetBroadcastShape",()=>sn);const sa=al({maximum_:function(e,t){let r=ai(e,"a","maximum"),n=ai(t,"b","maximum");[r,n]=n0(r,n),"bool"===r.dtype&&(r=iV(r,"int32"),n=iV(n,"int32")),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(t_,a)}});class si extends i6{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=Array.isArray(e)?e[r].tensor:e[t];if(null==n)return;let a=n5.registeredVariables[t];af(()=>{let e=ij(iX(this.c,n),a);a.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ag(i0(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}const ss=[class extends i6{static get className(){return"Adadelta"}constructor(e,t,r=null){super(),this.learningRate=e,this.rho=t,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==r&&(this.epsilon=n5.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=n5.registeredVariables[t];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${t}/accum_grad`,variable:af(()=>iZ(n).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${t}/accum_var`,variable:af(()=>iZ(n).variable(!1))});let a=Array.isArray(e)?e[r].tensor:e[t];if(null==a)return;let i=this.accumulatedGrads[r].variable,s=this.accumulatedUpdates[r].variable;af(()=>{let e=ij(iX(i,this.rho),iX(iQ(a),1-this.rho)),t=iX(iq(iY(ij(s,this.epsilon)),iY(ij(i,this.epsilon))),a),r=ij(iX(s,this.rho),iX(iQ(t),1-this.rho));i.assign(e),s.assign(r);let o=ij(iX(t,-this.learningRate),n);n.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(am(this.accumulatedGrads.map(e=>e.variable)),am(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){let t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}},class extends i6{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=n5.registeredVariables[t];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${t}/accumulator`,variable:af(()=>i5(n.shape,this.initialAccumulatorValue).variable(!1))});let a=Array.isArray(e)?e[r].tensor:e[t];if(null==a)return;let i=this.accumulatedGrads[r].variable;af(()=>{let e=ij(i,iQ(a));i.assign(e);let t=ij(iX(iq(a,iY(ij(e,n5.backend.epsilon()))),-this.learningRate),n);n.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&am(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}},class extends i6{static get className(){return"Adam"}constructor(e,t,r,n=null){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],af(()=>{this.accBeta1=i0(t).variable(),this.accBeta2=i0(r).variable()}),null==n&&(this.epsilon=n5.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);af(()=>{let r=i7(1,this.accBeta1),n=i7(1,this.accBeta2);t.forEach((t,a)=>{let i=n5.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:af(()=>iZ(i).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:af(()=>iZ(i).variable(!1))});let s=Array.isArray(e)?e[a].tensor:e[t];if(null==s)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=ij(iX(o,this.beta1),iX(s,1-this.beta1)),d=ij(iX(l,this.beta2),iX(iQ(s),1-this.beta2)),h=iq(u,r),p=iq(d,n);o.assign(u),l.assign(d);let c=ij(iX(iq(h,ij(iY(p),this.epsilon)),-this.learningRate),i);i.assign(c)}),this.accBeta1.assign(iX(this.accBeta1,this.beta1)),this.accBeta2.assign(iX(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&am(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&am(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),af(()=>{this.accBeta1.assign(i8(this.beta1,this.iterations_+1)),this.accBeta2.assign(i8(this.beta2,this.iterations_+1))});let t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}},class extends i6{static get className(){return"Adamax"}constructor(e,t,r,n=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=n,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],af(()=>{this.iteration=i0(0).variable(),this.accBeta1=i0(t).variable()}),null==n&&(this.epsilon=n5.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);af(()=>{let r=i7(1,this.accBeta1),n=iq(-this.learningRate,ij(iX(this.iteration,this.decay),1));t.forEach((t,a)=>{let i=n5.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:iZ(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:iZ(i).variable(!1)});let s=Array.isArray(e)?e[a].tensor:e[t];if(null==s)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=ij(iX(o,this.beta1),iX(s,1-this.beta1)),d=sa(iX(l,this.beta2),i9(s));o.assign(u),l.assign(d);let h=ij(iX(iq(n,r),iq(u,ij(d,this.epsilon))),i);i.assign(h)}),this.iteration.assign(ij(this.iteration,1)),this.accBeta1.assign(iX(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&am(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&am(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}},class extends si{static get className(){return"Momentum"}constructor(e,t,r=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=r,this.accumulations=[],this.m=i0(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=n5.registeredVariables[t];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${t}/momentum`,variable:af(()=>iZ(n).variable(!1))});let a=this.accumulations[r].variable,i=Array.isArray(e)?e[r].tensor:e[t];null!=i&&af(()=>{let e,t=ij(iX(this.m,a),i);e=this.useNesterov?ij(iX(this.c,ij(i,iX(t,this.m))),n):ij(iX(this.c,t),n),a.assign(t),n.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&am(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}},class extends i6{static get className(){return"RMSProp"}constructor(e,t=.9,r=0,n=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=r,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==n&&(this.epsilon=n5.backend.epsilon()),null==e)throw Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=n5.registeredVariables[t];null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${t}/rms`,variable:af(()=>iZ(n).variable(!1))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${t}/momentum`,variable:af(()=>iZ(n).variable(!1))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${t}/mg`,variable:af(()=>iZ(n).variable(!1))});let a=Array.isArray(e)?e[r].tensor:e[t];if(null==a)return;let i=this.accumulatedMeanSquares[r].variable,s=this.accumulatedMoments[r].variable;af(()=>{let e=ij(iX(i,this.decay),iX(iQ(a),1-this.decay));if(this.centered){let t=this.accumulatedMeanGrads[r].variable,o=ij(iX(t,this.decay),iX(a,1-this.decay)),l=iq(iX(a,this.learningRate),iY(i7(e,ij(iQ(o),this.epsilon)))),u=ij(iX(s,this.momentum),l);i.assign(e),t.assign(o),s.assign(u);let d=i7(n,u);n.assign(d)}else{let e=ij(iX(i,this.decay),iX(iQ(a),1-this.decay)),t=ij(iX(s,this.momentum),iq(iX(a,this.learningRate),iY(ij(e,this.epsilon))));i.assign(e),s.assign(t);let r=i7(n,t);n.assign(r)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&am(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&am(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&am(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}},si],so=al({argMax_:function(e,t=0){let r=ai(e,"x","argMax");return n5.runKernel(eT,{x:r},{axis:t})}});var sl={};l(sl,"fromUint8ToStringArray",()=>ld),l(sl,"fromStringArrayToUint8",()=>lh),l(sl,"slice_util",()=>s6),l(sl,"upcastType",()=>nY),l(sl,"segment_util",()=>ls);var su={};function sd(e,t){for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0}function sh(e,t,r){let n=e.length+t.length,a=[],i=0,s=0;for(let o=0;o<n;o++)-1===r.indexOf(o)?a.push(e[i++]):a.push(t[s++]);return a}function sp(e,t){let r=[],n=e.length;for(let a=0;a<n;a++)-1===t.indexOf(a)&&r.push(e[a]);return[r,t.map(t=>e[t])]}function sc(e,t){return sh(e,t.map(e=>1),t)}function sf(e,t,r){A(sd(t,r),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${r} input.`)}function sm(e,t){if(sd(e,t))return null;let r=[];for(let n=0;n<t;++n)-1===e.indexOf(n)&&r.push(n);return e.forEach(e=>r.push(e)),r}function sg(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function sy(e,t){let r=[];for(let n=t-e;n<t;++n)r.push(n);return r}l(su,"axesAreInnerMostDims",()=>sd),l(su,"combineLocations",()=>sh),l(su,"computeOutAndReduceShapes",()=>sp),l(su,"expandShapeToKeepDim",()=>sc),l(su,"assertAxesAreInnerMostDims",()=>sf),l(su,"getAxesPermutation",()=>sm),l(su,"getUndoAxesPermutation",()=>sg),l(su,"getInnerMostAxes",()=>sy);var sx={};function sb(e,t){let r=e[0].length;e.forEach((e,t)=>{A(e.length===r,()=>`Error in concat${r}D: rank of tensors[${t}] must be the same as the rank of the rest (${r})`)}),A(t>=0&&t<r,()=>`Error in concat${r}D: axis must be between 0 and ${r-1}.`);let n=e[0];e.forEach((e,a)=>{for(let i=0;i<r;i++)A(i===t||e[i]===n[i],()=>`Error in concat${r}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${n}) along the non-concatenated axis ${a}.`)})}function sv(e,t){let r=e[0].slice();for(let n=1;n<e.length;n++)r[t]+=e[n][t];return r}l(sx,"assertParamsConsistent",()=>sb),l(sx,"computeOutShape",()=>sv);var sw={};function sS(e,t,r,n,a="NHWC",i){let s=[...t,e[3]];return sI(e,s,r,i,n,null,null,sP(a))}function sk(e,t,r,n,a,i,s="channelsLast"){let o,[l,u]=sN(t);if("channelsLast"===s)o=[l,u,e[3],e[3]];else if("channelsFirst"===s)o=[l,u,e[1],e[1]];else throw Error(`Unknown dataFormat ${s}`);return sI(e,o,r,n,a,i,!1,s)}function sC(e,t,r,n,a,i,s="NDHWC"){let o,l,[u,d,h]=sE(t);if("NDHWC"===s)l="channelsLast",o=[u,d,h,e[4],e[4]];else if("NCDHW"===s)l="channelsFirst",o=[u,d,h,e[1],e[1]];else throw Error(`Unknown dataFormat ${s}`);return sT(e,o,r,n,a,!1,l,i)}function sI(e,t,r,n,a,i,s=!1,o="channelsLast"){let l,[u,d,h,p]=[-1,-1,-1,-1];if("channelsLast"===o)[u,d,h,p]=e;else if("channelsFirst"===o)[u,p,d,h]=e;else throw Error(`Unknown dataFormat ${o}`);let[c,f,,m]=t,[g,y]=sN(r),[x,b]=sN(n),v=sR(c,x),w=sR(f,b),{padInfo:S,outHeight:k,outWidth:C}=function(e,t,r,n,a,i,s,o,l){let u,d,h;if("number"==typeof e){let a=0===e?"VALID":"NUMBER";u={top:e,bottom:e,left:e,right:e,type:a};let s=function(e,t,r,n,a){null==n&&(n=s$(e,t,r));let i=e[0],s=e[1];return[sA((i-t+2*n)/r+1,a),sA((s-t+2*n)/r+1,a)]}([t,r],i,n,e,o);d=s[0],h=s[1]}else if("same"===e){let e=Math.max(0,((d=Math.ceil(t/n))-1)*n+i-t),o=Math.max(0,((h=Math.ceil(r/a))-1)*a+s-r),l=Math.floor(e/2),p=Math.floor(o/2);u={top:l,bottom:e-l,left:p,right:o-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},d=Math.ceil((t-i+1)/n),h=Math.ceil((r-s+1)/a);else if("object"==typeof e){let p="channelsLast"===l?e[1][0]:e[2][0],c="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:c,left:f,right:m,type:0===p&&0===c&&0===f&&0===m?"VALID":"EXPLICIT"},d=sA((t-i+p+c)/n+1,o),h=sA((r-s+f+m)/a+1,o)}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:u,outHeight:d,outWidth:h}}(a,d,h,g,y,v,w,i,o),I=s?m*p:m;return"channelsFirst"===o?l=[u,I,k,C]:"channelsLast"===o&&(l=[u,k,C,I]),{batchSize:u,dataFormat:o,inHeight:d,inWidth:h,inChannels:p,outHeight:k,outWidth:C,outChannels:I,padInfo:S,strideHeight:g,strideWidth:y,filterHeight:c,filterWidth:f,effectiveFilterHeight:v,effectiveFilterWidth:w,dilationHeight:x,dilationWidth:b,inShape:e,outShape:l,filterShape:t}}function sT(e,t,r,n,a,i=!1,s="channelsLast",o){let l,[u,d,h,p,c]=[-1,-1,-1,-1,-1];if("channelsLast"===s)[u,d,h,p,c]=e;else if("channelsFirst"===s)[u,c,d,h,p]=e;else throw Error(`Unknown dataFormat ${s}`);let[f,m,g,,y]=t,[x,b,v]=sE(r),[w,S,k]=sE(n),C=sR(f,w),I=sR(m,S),T=sR(g,k),{padInfo:$,outDepth:N,outHeight:E,outWidth:R}=function(e,t,r,n,a,i,s,o,l,u,d){let h,p,c,f;if("valid"===e&&(e=0),"number"==typeof e){let m=0===e?"VALID":"NUMBER";h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:m};let g=function(e,t,r,n,a,i){null==a&&(a=s$(e,t[0],n[0]));let s=[0,0,0,1];for(let r=0;r<3;r++)e[r]+2*a>=t[r]&&(s[r]=sA((e[r]-t[r]+2*a)/n[r]+1,i));return s}([t,r,n,1],[o,l,u],0,[a,i,s],e,d);p=g[0],c=g[1],f=g[2]}else if("same"===e){let e=((p=Math.ceil(t/a))-1)*a+o-t,d=((c=Math.ceil(r/i))-1)*i+l-r,m=((f=Math.ceil(n/s))-1)*s+u-n,g=Math.floor(e/2),y=Math.floor(d/2),x=Math.floor(m/2);h={top:y,bottom:d-y,left:x,right:m-x,front:g,back:e-g,type:"SAME"}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:h,outDepth:p,outHeight:c,outWidth:f}}(a,d,h,p,x,b,v,C,I,T,o),A=i?y*c:y;return"channelsFirst"===s?l=[u,A,N,E,R]:"channelsLast"===s&&(l=[u,N,E,R,A]),{batchSize:u,dataFormat:s,inDepth:d,inHeight:h,inWidth:p,inChannels:c,outDepth:N,outHeight:E,outWidth:R,outChannels:A,padInfo:$,strideDepth:x,strideHeight:b,strideWidth:v,filterDepth:f,filterHeight:m,filterWidth:g,effectiveFilterDepth:C,effectiveFilterHeight:I,effectiveFilterWidth:T,dilationDepth:w,dilationHeight:S,dilationWidth:k,inShape:e,outShape:l,filterShape:t}}function s$(e,t,r,n=1){let a=sR(t,n);return Math.floor((e[0]*(r-1)-r+a)/2)}function sN(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function sE(e){return"number"==typeof e?[e,e,e]:e}function sR(e,t){return t<=1?e:e+(e-1)*(t-1)}function sA(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw Error(`Unknown roundingMode ${t}`)}}function s_(e){let[t,r,n]=sN(e);return 1===t&&1===r&&1===n}function sO(e,t){return s_(e)||s_(t)}function sF(e){return sN(e).every(e=>e>0)}function sP(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw Error(`Unknown dataFormat ${e}`)}function sD(e,t,r){if(null!=r)if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`);else if("number"==typeof t)A(M(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`);else if("object"==typeof t)t.forEach(t=>{t.forEach(t=>{A(M(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`)})});else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`)}l(sw,"computeDilation2DInfo",()=>sS),l(sw,"convertConv2DDataFormat",()=>sP),l(sw,"computeConv2DInfo",()=>sI),l(sw,"computePool2DInfo",()=>sk),l(sw,"computePool3DInfo",()=>sC),l(sw,"computeConv3DInfo",()=>sT),l(sw,"computeDefaultPad",()=>s$),l(sw,"tupleValuesAreOne",()=>s_),l(sw,"eitherStridesOrDilationsAreOne",()=>sO),l(sw,"stridesOrDilationsArePositive",()=>sF),l(sw,"checkPadOnDimRoundingMode",()=>sD);var sL={};l(sL,"getFusedDyActivation",()=>sK),l(sL,"getFusedBiasGradient",()=>sq),l(sL,"applyActivation",()=>sX),l(sL,"shouldFuse",()=>sY);const sM=al({elu_:function(e){let t=ai(e,"x","elu","float32");return n5.runKernel("Elu",{x:t})}}),sB=al({leakyRelu_:function(e,t=.2){let r=ai(e,"x","leakyRelu");return n5.runKernel(tk,{x:r},{alpha:t})}}),sz=al({prelu_:function(e,t){let r=ai(e,"x","prelu"),n=ai(t,"alpha","prelu");return n5.runKernel(tQ,{x:r,alpha:n})}}),sU=al({relu_:function(e){let t=ai(e,"x","relu");return n5.runKernel(t6,{x:t})}}),sW=al({relu6_:function(e){let t=ai(e,"x","relu6");return n5.runKernel(rt,{x:t})}}),sV=al({reshape_:function(e,t){let r=ai(e,"x","reshape","string_or_numeric");return n5.runKernel(t5,{x:r},{shape:t})}}),sG=al({sigmoid_:function(e){let t=ai(e,"x","sigmoid","float32");return n5.runKernel(rc,{x:t})}}),sH=al({step_:function(e,t=0){let r=ai(e,"x","step");return n5.runKernel(rz,{x:r},{alpha:t})}}),sj=al({sum_:function(e,t=null,r=!1){let n=ai(e,"x","sum");"bool"===n.dtype&&(n=iV(n,"int32"));let a={x:n};return n5.runKernel("Sum",a,{axis:t,keepDims:r})}});function sK(e,t,r){if(null==r||"linear"===r)return e;if("relu"===r)return iX(e,sH(t));throw Error(`Cannot compute gradient for fused activation ${r}.`)}function sq(e,t){let r=t,n=sr(e.shape,t.shape);return n.length>0&&(r=sj(r,n)),sV(r,e.shape)}function sX(e,t,r,n){if("linear"===t)return e;if("relu"===t)return sU(e);if("elu"===t)return sM(e);if("relu6"===t)return sW(e);if("prelu"===t)return sz(e,r);else if("leakyrelu"===t)return sB(e,n);else if("sigmoid"===t)return sG(e);throw Error(`Unknown fused activation ${t}.`)}const sY=(e,t)=>!(e>0)||"linear"===t;var sQ={};function sZ(e,t,r){let n=[];if(null==r&&null==t)return n;if(null==t)for(;n.length<e+r.length;)n.push(-1);else n=t.slice();if(null==r)return n;if(e+r.length!==n.length)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+r.length}, but shape.rank = ${n.length}`);for(let a=1;a<r.length;++a){let i=r[a],s=n[n.length-r.length+a],o=n[s];if(i>=0)if(o>=0){if(o!==i)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${i} but shape[${a+e}] = ${o}`)}else n[s]=i}return n}function sJ(e){let t={FIRST_DIM_SIZE:TW.FIRST_DIM_SIZE,VALUE_ROWIDS:TW.VALUE_ROWIDS,ROW_LENGTHS:TW.ROW_LENGTHS,ROW_SPLITS:TW.ROW_SPLITS,ROW_LIMITS:TW.ROW_LIMITS,ROW_STARTS:TW.ROW_STARTS},r=[];for(let n of e)if(n in t)r.push(t[n]);else break;return r}function s0(e){return 0===e.length?0:e[0]===TW.FIRST_DIM_SIZE?e.length-1:e.length}function s1(e,t){if(null==e||null==t)return;let r=e.length,n=t.length;if(r>=n)throw Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${r} must be less than ragged tensor input flatValues.rank = ${n})`);for(let a=0;a<Math.min(r,n-1);++a){let r=e[a],n=t[a+1];if(r>=0&&n>=0&&1!==r&&r!==n)throw Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${r} but ragged tensor input.flatValues.shape[${a-e.length}] = ${n}`)}}l(sQ,"RowPartitionType",()=>TW),l(sQ,"combineRaggedTensorToTensorShapes",()=>sZ),l(sQ,"getRowPartitionTypesHelper",()=>sJ),l(sQ,"getRaggedRank",()=>s0),l(sQ,"validateDefaultValueShape",()=>s1),(Tv=TW||(TW={}))[Tv.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",Tv[Tv.VALUE_ROWIDS=1]="VALUE_ROWIDS",Tv[Tv.ROW_LENGTHS=2]="ROW_LENGTHS",Tv[Tv.ROW_SPLITS=3]="ROW_SPLITS",Tv[Tv.ROW_LIMITS=4]="ROW_LIMITS",Tv[Tv.ROW_STARTS=5]="ROW_STARTS";var s2={};l(s2,"PARALLELIZE_THRESHOLD",()=>s3),l(s2,"computeOptimalWindowSize",()=>s4);const s3=30;function s4(e){return e<=s3?e:ei(e,Math.floor(Math.sqrt(e)))}var s6={};function s5(e,t,r){let n=e.shape.length;A(n===t.length,()=>`Error in slice${n}D: Length of begin ${t} must match the rank of the array (${n}).`),A(n===r.length,()=>`Error in slice${n}D: Length of size ${r} must match the rank of the array (${n}).`);for(let a=0;a<n;++a)A(t[a]+r[a]<=e.shape[a],()=>`Error in slice${n}D: begin[${a}] + size[${a}] (${t[a]+r[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function s8(e){let t=[],r=0;for(;e>0;)1&e&&t.push(r),e/=2,r++;return t}function s7(e,t,r){let n=[];for(let a=0;a<e.length;a++)n[a]=Math.ceil((t[a]-e[a])/r[a]);return n}function s9(e,t,r,n){let a=[...e];for(let e=a.length;e<n.length;e++)a.push(1);for(let e=0;e<r;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function oe(e,t,r){return r<=e?r:r-(t-1)}function ot(e,t){let r=[];for(let n=0;n<e;n++)r.push(t+n);return r}function or(e,t,r,n,a,i,s,o,l){let u=e.length,d=Array(u),h=Array(u),p=Array(u);if(t.length&&r>0){let l=t[0],u=r+1;d=on(s,l,u,n,e),h=oa(o,l,u,a,e),p=s9(i,l,u,e)}else for(let t=0;t<u;t++)d[t]=os(s,n,i,e,t,l),h[t]=oo(o,a,i,e,t,l),p[t]=oi(i,t,l);return{begin:d,end:h,strides:p}}function on(e,t,r,n,a){let i=[...a],s=ot(r,t);for(let a=0;a<i.length;a++)if(s.indexOf(a)>-1)i[a]=0;else{var o,l,u;let s=(o=t,l=r,(u=a)<=o?u:u-(l-1)),d=n[s];e&1<<s&&(d=0),i[a]=d}return i}function oa(e,t,r,n,a){let i=[...a],s=ot(r,t);for(let a=0;a<i.length;a++)if(s.indexOf(a)>-1)i[a]=Number.MAX_SAFE_INTEGER;else{var o,l,u;let s=(o=t,l=r,(u=a)<=o?u:u-(l-1)),d=n[s];e&1<<s&&(d=Number.MAX_SAFE_INTEGER),i[a]=d}for(let e=0;e<i.length;e++){let t=a[e];i[e]<0&&(i[e]+=t),i[e]=I(0,i[e],a[e])}return i}function oi(e,t,r){let n=e[t];return(r&1<<t||null==n)&&(n=1),n}function os(e,t,r,n,a,i){let s=t[a],o=r[a]||1;(e&1<<a||i&1<<a||null==s)&&(s=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);let l=n[a];return s<0&&(s+=l),s=I(0,s,l-1)}function oo(e,t,r,n,a,i){let s=t[a],o=r[a]||1;(e&1<<a||i&1<<a||null==s)&&(s=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);let l=n[a];return s<0&&(s+=l),s=o>0?I(0,s,l):I(-1,s,l-1)}function ol(e,t,r){let n=r.length;for(let e=0;e<r.length;e++)if(r[e]>1){n=e;break}for(let a=n+1;a<r.length;a++)if(t[a]>0||r[a]!==e[a])return!1;return!0}function ou(e,t){let r=e.length>0?e[e.length-1]:1;for(let n=0;n<e.length-1;n++)r+=e[n]*t[n];return r}function od(e,t,r){let n,a,i=e.shape.length;return(n="number"==typeof t?[t,...Array(i-1).fill(0)]:t.length<i?t.concat(Array(i-t.length).fill(0)):t.slice()).forEach(e=>{A(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=(a=null==r?Array(i).fill(-1):"number"==typeof r?[r,...Array(i-1).fill(-1)]:r.length<i?r.concat(Array(i-r.length).fill(-1)):r).map((t,r)=>t>=0?t:(A(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${r}.`),e.shape[r]-n[r])),[n,a]}function oh(e,t,r,n,a,i,s,o,l){let u;if(null==n?(u=Array(t.length)).fill(1):u=n,null!=s&&(s&s-1)!=0)throw Error("Multiple ellipses in slice is not allowed.");let d=!1,h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:r.slice(),strides:u.slice(),beginMask:a,endMask:i,ellipsisMask:s,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)d&&(1<<e&o)!=0&&h.numAddAxisAfterEllipsis++,1<<e&s&&(d=!0);!d&&(h.ellipsisMask|=1<<h.dims,h.dims++);let p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};var c=h,f=p;f.beginMask=0,f.endMask=0,f.shrinkAxisMask=0;let m=0;f.beginValid=null!=c.begin,f.endValid=null!=c.end,f.begin=Array(f.dims),f.end=Array(f.dims),f.strides=Array(f.dims),f.finalShapeGatherIndices=[],f.finalShapeGatherIndicesSparse=[],f.inputShapeGatherIndicesSparse=Array(f.dims);for(let e=0;e<c.dims;e++)if(1<<e&c.ellipsisMask){let t=Math.min(f.dims-(c.dims-e)+1+c.numAddAxisAfterEllipsis,f.dims);for(;m<t;m++)f.begin[m]=0,f.end[m]=0,f.strides[m]=1,f.beginMask|=1<<m,f.endMask|=1<<m,f.finalShapeGatherIndices.push(m),f.finalShapeGatherIndicesSparse.push(-1),f.inputShapeGatherIndicesSparse[m]=e}else if(1<<e&c.newAxisMask)f.finalShapeGatherIndices.push(-2),f.finalShapeGatherIndicesSparse.push(-1);else{if(m===f.begin.length)throw Error(`Index out of range using input dim ${m}; input has only ${f.dims} dims, ${f.begin.length}.`);null!=c.begin&&(f.begin[m]=c.begin[e]),null!=c.end&&(f.end[m]=c.end[e]),f.strides[m]=c.strides[e],c.beginMask&1<<e&&(f.beginMask|=1<<m),c.endMask&1<<e&&(f.endMask|=1<<m),c.shrinkAxisMask&1<<e?(f.finalShapeGatherIndices.push(-1),f.finalShapeGatherIndicesSparse.push(-1),f.shrinkAxisMask|=1<<m):(f.finalShapeGatherIndices.push(m),f.finalShapeGatherIndicesSparse.push(e)),f.inputShapeGatherIndicesSparse[m]=e,m++}let g=!0,y=!0,x=!0,b=[],v=[];for(let t=0;t<e.length;++t){let r;if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);let n=!!(p.shrinkAxisMask&1<<t),a=e[t];if(-1===a){b.push(n?1:-1);continue}let i=[p.beginMask&1<<t,p.endMask&1<<t],s=[p.strides[t]>0?0:-1,p.strides[t]>0?a:a-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");x=x&&1===p.strides[t];let o=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){let e=p.begin[t]<0?a+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=a)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=op(p.begin[t],0,p.strides[t],a,i,s),p.end[t]=op(p.end[t],1,p.strides[t],a,i,s);let e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===a;g=g&&e,y=y&&(0===t&&1===p.strides[t]||e)}else g=g&&1===p.strides[t]&&o,y=y&&(0===t&&1===p.strides[t]||o);let l=!1;if(p.beginValid&&p.endValid?(r=p.end[t]-p.begin[t],l=!0):n?(r=1,l=!0):o&&a>=0&&(r=p.strides[t]<0?-a:a,l=!0),l){let e;e=0===r||r<0!=p.strides[t]<0?0:Math.trunc(r/p.strides[t])+ +(r%p.strides[t]!=0),b.push(e)}else b.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){let t=p.finalShapeGatherIndices[e];t>=0?v.push(b[t]):-2===t&&v.push(1)}return{finalShapeSparse:v.filter((e,t)=>-2!==p.finalShapeGatherIndices[t]),finalShape:v,isIdentity:g,sliceDim0:y,isSimpleSlice:x,begin:p.begin,end:p.end,strides:p.strides}}function op(e,t,r,n,a,i){if(a[t])return r>0?i[t]:i[t+1&1];{let t=e<0?n+e:e;return t<i[0]?i[0]:t>i[1]?i[1]:t}}l(s6,"assertParamsValid",()=>s5),l(s6,"maskToAxes",()=>s8),l(s6,"computeOutShape",()=>s7),l(s6,"stridesWithElidedDims",()=>s9),l(s6,"getNormalizedAxes",()=>or),l(s6,"startIndicesWithElidedDims",()=>on),l(s6,"stopIndicesWithElidedDims",()=>oa),l(s6,"startForAxis",()=>os),l(s6,"stopForAxis",()=>oo),l(s6,"stridesForAxis",()=>oi),l(s6,"isSliceContinous",()=>ol),l(s6,"computeFlatOffset",()=>ou),l(s6,"parseSliceParams",()=>od),l(s6,"sliceInfo",()=>oh);var oc={};function of(e,t,r){return[r*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}l(oc,"getImageCenter",()=>of);var om={};function og(e,t,r,n=!0){let a=[];if(n)(a=a.concat(t.slice(0))).push(e[0]/r),a=a.concat(e.slice(1));else{a=a.concat(e[0]);let r=t.length;for(let n=0;n<r;++n)a=a.concat([e[n+1]/t[n],t[n]]);a=a.concat(e.slice(r+1))}return a}function oy(e,t,r=!0){let n=[];if(r){n.push(t);for(let r=t+1;r<e;++r)r<=2*t?(n.push(r),n.push(r-(t+1))):n.push(r)}else{let r=[],a=[];for(let n=1;n<e;++n)n>=2*t+1||n%2==1?a.push(n):r.push(n);n.push(...r),n.push(0),n.push(...a)}return n}function ox(e,t,r,n=!0){let a=[];n?a.push(e[0]/r):a.push(e[0]*r);for(let r=1;r<e.length;++r)r<=t.length?n?a.push(t[r-1]*e[r]):a.push(e[r]/t[r-1]):a.push(e[r]);return a}function ob(e,t){let r=[0];for(let n=0;n<t;++n)r.push(e[n][0]);return r}function ov(e,t,r){let n=e.slice(0,1);for(let a=0;a<r;++a)n.push(e[a+1]-t[a][0]-t[a][1]);return n}l(om,"getReshaped",()=>og),l(om,"getPermuted",()=>oy),l(om,"getReshapedPermuted",()=>ox),l(om,"getSliceBeginCoords",()=>ob),l(om,"getSliceSize",()=>ov);var ow={};function oS(e,t){let r=e.shape.length,n=t.shape.length;if(r<1)throw Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${r}.`);if(n<1)throw Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${n}.`);if("int32"!==t.dtype)throw Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[n-1]>r)throw Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[n-1]} vs. ${r}`);if(0===F(e.shape))throw Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);let a=t.shape,i=a[a.length-1],s=1;for(let e=0;e<a.length-1;++e)s*=a[e];let o=e.shape,l=a.slice();l.pop();let u=1;for(let e=i;e<r;++e)u*=o[e],l.push(o[e]);let d=[...es(e.shape).map(e=>e/u),1].slice(0,i);return[l,s,u,d]}l(ow,"prepareAndValidate",()=>oS);var ok={};function oC(e,t,r){let n=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${r.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${n}, and batchDim: ${a}.`;if(r.rank<a)throw Error(i+` update.rank < ${a}. `);if(e.length<n+(r.rank-a))throw Error(i+` Output shape length < ${n+(r.rank-a)}`);if(r.rank!==a+e.length-n)throw Error(i+` update.rank != ${a+e.length-n}`);for(let e=0;e<a;++e)if(r.shape[e]!==t.shape[e])throw Error(i+` updates.shape[${e}] (${r.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<r.rank-a;++t)if(r.shape[t+a]!==e[t+n])throw Error(i+` updates.shape[${t+a}] (${r.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function oI(e,t,r){if(t.rank<1)throw Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(r.length<1)throw Error(`Output rank must be greater or equal to 1, but got shape: ${r}`);if(0===r.length){if(0===t.size)throw Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw Error(`Updates specified for empty output. updates shape: ${e.shape}`)}oC(r,t,e)}function oT(e,t,r){let n=t.shape.length,a=n>1?t.shape[n-1]:1,i=r.length,s=1;for(let e=a;e<i;++e)s*=r[e];let o=a<1?1:a,l=F(t.shape)/o,u=[...es(r.slice(0,a)),1];return{sliceRank:a,numUpdates:l,sliceSize:s,strides:u,outputSize:F(r)}}l(ok,"validateUpdateShape",()=>oC),l(ok,"validateInput",()=>oI),l(ok,"calculateShapes",()=>oT);var o$={};l(o$,"SELU_SCALEALPHA",()=>oN),l(o$,"SELU_SCALE",()=>oE);const oN=1.7580993408473768,oE=1.0507009873554805;var oR={};l(oR,"ERF_P",()=>oA),l(oR,"ERF_A1",()=>o_),l(oR,"ERF_A2",()=>oO),l(oR,"ERF_A3",()=>oF),l(oR,"ERF_A4",()=>oP),l(oR,"ERF_A5",()=>oD);const oA=.3275911,o_=.254829592,oO=-.284496736,oF=1.421413741,oP=-1.453152027,oD=1.061405429;var oL={};function oM(e,t){if(e.length!==t.length)throw Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);let r=new Float32Array(2*e.length);for(let n=0;n<r.length;n+=2)r[n]=e[n/2],r[n+1]=t[n/2];return r}function oB(e){let t=new Float32Array(e.length/2),r=new Float32Array(e.length/2);for(let n=0;n<e.length;n+=2)t[n/2]=e[n],r[n/2]=e[n+1];return{real:t,imag:r}}function oz(e){let t=Math.ceil(e.length/4),r=new Float32Array(t),n=new Float32Array(t);for(let t=0;t<e.length;t+=4)r[Math.floor(t/4)]=e[t],n[Math.floor(t/4)]=e[t+1];return{real:r,imag:n}}function oU(e){let t=Math.floor(e.length/4),r=new Float32Array(t),n=new Float32Array(t);for(let t=2;t<e.length;t+=4)r[Math.floor(t/4)]=e[t],n[Math.floor(t/4)]=e[t+1];return{real:r,imag:n}}function oW(e,t){return{real:e[2*t],imag:e[2*t+1]}}function oV(e,t,r,n){e[2*n]=t,e[2*n+1]=r}function oG(e,t){let r=new Float32Array(e/2),n=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){let i=(t?2:-2)*Math.PI*(a/e);r[a]=Math.cos(i),n[a]=Math.sin(i)}return{real:r,imag:n}}function oH(e,t,r){let n=(r?2:-2)*Math.PI*(e/t);return{real:Math.cos(n),imag:Math.sin(n)}}l(oL,"mergeRealAndImagArrays",()=>oM),l(oL,"splitRealAndImagArrays",()=>oB),l(oL,"complexWithEvenIndex",()=>oz),l(oL,"complexWithOddIndex",()=>oU),l(oL,"getComplexWithIndex",()=>oW),l(oL,"assignToTypedArray",()=>oV),l(oL,"exponents",()=>oG),l(oL,"exponent",()=>oH);var oj={};l(oj,"decodeEinsumEquation",()=>oq),l(oj,"getEinsumPermutation",()=>oX),l(oj,"checkEinsumDimSizes",()=>oY),l(oj,"getEinsumComputePath",()=>oQ),l(oj,"isIdentityPermutation",()=>oZ);const oK=/->/g;function oq(e,t){let r=((e=e.replace(/\s/g,"")).length-e.replace(oK,"").length)/2;if(r<1)throw Error("Equations without an arrow are not supported.");if(r>1)throw Error('Equation must contain exactly one arrow ("->").');let[n,a]=e.split("->");A(-1===n.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');let i=n.split(","),s=i.length;if(t!==s)throw Error(`Expected ${s} input tensors, received ${t}`);if(s>2)throw Error("Support for more than 2 input tensors is not implemented yet.");let o=[];for(let e=0;e<a.length;++e){let t=a[e];if(!i.some(e=>-1!==e.indexOf(t)))throw Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<n.length;++e){let t=n[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}let l=Array(i.length);for(let e=0;e<s;++e){if(new Set(i[e].split("")).size!==i[e].length)throw Error(`Found duplicate axes in input component ${i[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<i[e].length;++t)l[e].push(o.indexOf(i[e][t]))}let u=o.length,d=a.length,h=[];for(let e=d;e<u;++e)h.push(e);return{allDims:o,summedDims:h,idDims:l}}function oX(e,t){let r=Array(e);r.fill(-1);for(let e=0;e<t.length;++e)r[t[e]]=e;let n=[];for(let t=0;t<e;++t)-1===r[t]&&n.push(t);return{permutationIndices:r=r.filter(e=>-1!==e),expandDims:n}}function oY(e,t,r){let n=Array(e);for(let e=0;e<r.length;++e){let a=r[e].shape;for(let r=0;r<t[e].length;++r)void 0===n[t[e][r]]?n[t[e][r]]=a[r]:A(n[t[e][r]]===a[r],()=>`Expected dimension ${n[t[e][r]]} at axis ${r} of input shaped ${JSON.stringify(a)}, but got dimension ${a[r]}`)}}function oQ(e,t){let r=[],n=0;0===e.length&&e.push(-1),n=e.length+1;for(let e=0;e<n;++e)r.push([]);let a=[];for(let n=0;n<e.length;++n)for(let i of function(e,t){let r=[];for(let n=0;n<e.length;++n)(0===e[n].length||-1!==e[n].indexOf(t)||-1===t)&&r.push(n);return r}(t,e[n]))-1===a.indexOf(i)&&(r[n].push(i),a.push(i));return{path:e,steps:r}}function oZ(e){return e.every((e,t)=>e===t)}var oJ={};function o0(e,t,r=0){let n=[];if("number"==typeof t)A(e.shape[r]%t==0,()=>"Number of splits must evenly divide the axis."),n=Array(t).fill(e.shape[r]/t);else{A(1>=t.reduce((e,t)=>(-1===t&&(e+=1),e),0),()=>"There should be only one negative value in split array.");let a=t.indexOf(-1);if(-1!==a){let n=t.reduce((e,t)=>t>0?e+t:e);t[a]=e.shape[r]-n}A(e.shape[r]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),n=t}return n}l(oJ,"prepareSplitSize",()=>o0);var o1={};function o2(e){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`}function o3(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function o4(e,t,r){return`indices(${e}, 0) is invalid: ${t} >= ${r}`}l(o1,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",()=>o2),l(o1,"getSparseFillEmptyRowsNegativeIndexErrorMessage",()=>o3),l(o1,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",()=>o4);var o6={};function o5(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function o8(e,t){return`size ${e} must be non-negative, not ${t}`}function o7(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function o9(e,t){let r=F(e),n=F(t);return`Input to reshape is a SparseTensor with ${r}
  dense values, but the requested shape requires a multiple of ${n}. inputShape=${e} outputShape= ${t}`}function le(e,t){let r=F(e),n=F(t);return`Input to reshape is a tensor with ${r} dense values, but the requested shape has ${n}. inputShape=${e} outputShape=${t}`}l(o6,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",()=>o5),l(o6,"getSparseReshapeNegativeOutputDimErrorMessage",()=>o8),l(o6,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",()=>o7),l(o6,"getSparseReshapeInputOutputMultipleErrorMessage",()=>o9),l(o6,"getSparseReshapeInputOutputMismatchErrorMessage",()=>le);var lt={};function lr(){return"segment ids must be >= 0"}function ln(){return"segment ids are not increasing"}function la(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function li(e,t,r){return`Bad: indices[${e}] == ${t} out of range [0, ${r})`}l(lt,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",()=>lr),l(lt,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",()=>ln),l(lt,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",()=>la),l(lt,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",()=>li);var ls={};function lo(e,t){let r,n=!1;for(e<=s3?(r=e,n=!0):r=ei(e,Math.floor(Math.sqrt(e)));!n;)r>t||r===e?n=!0:r=ei(e,r+1);return r}function ll(e,t,r){let n=[],a=e.length;for(let i=0;i<a;i++)i!==t?n.push(e[i]):n.push(r);return n}function lu(e,t,r,n){let a=t.shape.length,i=e.shape.length;if(0!==n&&(n<-a||n>a))throw Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${n}`);if(n<0&&(n+=a),n>i)throw Error(`batchDims (${n}) must be less than rank(x) (
    ${i}).`);if(r<n)throw Error(`batchDims (${n}) must be less than or equal to axis (${r}).`);for(let r=0;r<n;++r)if(e.shape[r]!==t.shape[r])throw Error(`x.shape[${r}]: ${e.shape[r]} should be equal to indices.shape[${r}]: ${t.shape[r]}.`);let s=e.shape[r],o=[],l=1,u=1,d=1;for(let t=0;t<n;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=n;t<r;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=n;e<a;e++)o.push(t.shape[e]);for(let t=r+1;t<i;t++)o.push(e.shape[t]),d*=e.shape[t];return{batchSize:l,sliceSize:d,outerSize:u,dimSize:s,outputShape:o}}function ld(e){try{return e.map(e=>nP(e))}catch(e){throw Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function lh(e){return e.map(e=>nF(e))}l(ls,"segOpComputeOptimalWindowSize",()=>lo),l(ls,"computeOutShape",()=>ll),l(ls,"collectGatherOpShapeInfo",()=>lu),f(sl,su),f(sl,se),f(sl,sx),f(sl,sw),f(sl,sL),f(sl,{}),f(sl,sQ),f(sl,s2),f(sl,oc),f(sl,om),f(sl,ow),f(sl,ok),f(sl,o$),f(sl,oR),f(sl,rj),f(sl,oL),f(sl,oj),f(sl,oJ),f(sl,o1),f(sl,o6),f(sl,lt);const lp=al({broadcastTo_:function(e,t){let r=ai(e,"broadcastTo","x"),n=r.shape;if(ep(t),t.length<r.rank)throw Error(`broadcastTo(): shape.length=${t.length} < input.rank=${r.rank}.`);if(t.length>r.rank){let e=r.shape.slice();for(;e.length<t.length;)e.unshift(1);r=sV(r,e)}let a=r.shape,i=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])i[e]=1;else if(1!==r.shape[e])throw Error(`broadcastTo(): [${n}] cannot be broadcast to [${t}].`);if(0===i.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return iG(r);let s={x:r};return n5.runKernel(r_,s,{reps:i})}});var lc={};function lf(e,t,r){if(O(e),null!=t&&3!==t.length)throw Error("tensor3d() requires shape to have three numbers");let n=an(e,r);if(3!==n.length&&1!==n.length)throw Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor3d() requires shape to be provided when `values` are a flat array");return ad(e,t,n,r)}l(lc,"fromPixelsAsync",()=>ly),l(lc,"toPixels",()=>lb),l(lc,"draw",()=>lv),l(lc,"fromPixels",()=>lw);let lm=!1;function lg(e,t=3){let r,a;if(t>4)throw Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let i=!1,s=!1,o=!1,l=!1,u=!1,d=!1;if(e.data instanceof Uint8Array)i=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)l=!0;else if(null!=e.getContext)u=!0;else if("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap)d=!0;else throw Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);if(null!=rQ(rU,n5.backendName))return n5.runKernel(rU,{pixels:e},{numChannels:t});let[h,p]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];if(u)r=e.getContext("2d").getImageData(0,0,h,p).data;else if(s||i)r=e.data;else if(l||o||d){if(null==n)if("undefined"==typeof document)if("undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof OffscreenCanvasRenderingContext2D)n=new OffscreenCanvas(1,1).getContext("2d");else throw Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else n=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});n.canvas.width=h,n.canvas.height=p,n.drawImage(e,0,0,h,p),r=n.getImageData(0,0,h,p).data}if(4===t)a=new Int32Array(r);else{let e=h*p;a=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)a[n*t+e]=r[4*n+e]}return lf(a,[p,h,t],"int32")}async function ly(e,t=3){var r;let n=null;if(eb.getBool("WRAP_TO_IMAGEBITMAP")&&"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&null!=(r=e)&&0!==r.width&&0!==r.height&&!(null!=e&&e.data instanceof Uint8Array)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return lg(n,t)}function lx(e){if(2!==e.rank&&3!==e.rank)throw Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function lb(e,t){let r=ai(e,"img","toPixels");if(!(e instanceof nj)){let e=r;r=iV(e,"int32"),e.dispose()}lx(r);let[n,a]=r.shape.slice(0,2),i=2===r.rank?1:r.shape[2],s=await r.data(),o="float32"===r.dtype?255:1,l=new Uint8ClampedArray(a*n*4);for(let e=0;e<n*a;++e){let t=[0,0,0,255];for(let n=0;n<i;n++){let a=s[e*i+n];if("float32"===r.dtype){if(a<0||a>1)throw Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===r.dtype&&(a<0||a>255))throw Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===i?(t[0]=a*o,t[1]=a*o,t[2]=a*o):t[n]=a*o}let n=4*e;l[n+0]=Math.round(t[0]),l[n+1]=Math.round(t[1]),l[n+2]=Math.round(t[2]),l[n+3]=Math.round(t[3])}if(null!=t){lm||null!=rQ(tt,n5.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),lm=!0),t.width=a,t.height=n;let e=t.getContext("2d"),r=new ImageData(l,a,n);e.putImageData(r,0,0)}return r!==e&&r.dispose(),l}function lv(e,t,r){let n=ai(e,"img","draw");if(!(e instanceof nj)){let e=n;n=iV(e,"int32"),e.dispose()}lx(n);var a=null==r?void 0:r.imageOptions;let i=(null==a?void 0:a.alpha)||1;if(i>1||i<0)throw Error(`Alpha value ${i} is suppoed to be in range [0 - 1].`);let s={image:n};n5.runKernel(tt,s,{canvas:t,options:r})}const lw=al({fromPixels_:lg}),lS=al({clipByValue_:function(e,t,r){let n=ai(e,"x","clipByValue");return(A(t<=r,()=>`Error in clip: min (${t}) must be less than or equal to max (${r}).`),t===r)?i5(n.shape,t,n.dtype):n5.runKernel(eG,{x:n},{clipValueMin:t,clipValueMax:r})}}),lk=al({concat_:function(e,t=0){A(e.length>=1,()=>"Pass at least one tensor to concat");let r=as(e,"tensors","concat","string_or_numeric");return("complex64"===r[0].dtype&&r.forEach(e=>{if("complex64"!==e.dtype)throw Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${e.dtype}. `)}),1===r.length)?iG(r[0]):n5.runKernel(eK,r,{axis:t})}}),lC=al({exp_:function(e){let t=ai(e,"x","exp");return n5.runKernel("Exp",{x:t})}}),lI=al({expandDims_:function(e,t=0){let r=ai(e,"x","expandDims","string_or_numeric");return A(t<=r.rank,()=>"Axis must be <= rank of the tensor"),n5.runKernel(ts,{input:r},{dim:t})}});var lT={};l(lT,"spectral",()=>pk),l(lT,"signal",()=>pC),l(lT,"image",()=>pI),l(lT,"linalg",()=>pT),l(lT,"losses",()=>p$),l(lT,"sparse",()=>pN),l(lT,"string",()=>pE),l(lT,"abs",()=>i9),l(lT,"acos",()=>l$),l(lT,"acosh",()=>lN),l(lT,"add",()=>ij),l(lT,"addN",()=>lE),l(lT,"all",()=>lR),l(lT,"any",()=>lA),l(lT,"argMax",()=>so),l(lT,"argMin",()=>l_),l(lT,"asin",()=>lO),l(lT,"asinh",()=>lF),l(lT,"atan",()=>lP),l(lT,"atan2",()=>lD),l(lT,"atanh",()=>lL),l(lT,"avgPool",()=>lM),l(lT,"avgPool3d",()=>lB),l(lT,"basicLSTMCell",()=>lV),l(lT,"batchToSpaceND",()=>lG),l(lT,"batchNorm",()=>lH),l(lT,"batchNorm2d",()=>lj),l(lT,"batchNorm3d",()=>lK),l(lT,"batchNorm4d",()=>lq),l(lT,"bincount",()=>lX),l(lT,"bitwiseAnd",()=>lY),l(lT,"broadcastArgs",()=>lQ),l(lT,"broadcastTo",()=>lp),l(lT,"buffer",()=>iW),l(lT,"cast",()=>iV),l(lT,"ceil",()=>lZ),l(lT,"clipByValue",()=>lS),l(lT,"clone",()=>iG),l(lT,"complex",()=>au),l(lT,"concat",()=>lk),l(lT,"concat1d",()=>lJ),l(lT,"concat2d",()=>l0),l(lT,"concat3d",()=>l1),l(lT,"concat4d",()=>l2),l(lT,"conv1d",()=>l4),l(lT,"conv2d",()=>l3),l(lT,"conv2dTranspose",()=>l5),l(lT,"conv3d",()=>l8),l(lT,"conv3dTranspose",()=>l9),l(lT,"cos",()=>ue),l(lT,"cosh",()=>ut),l(lT,"cumprod",()=>ur),l(lT,"cumsum",()=>un),l(lT,"denseBincount",()=>ua),l(lT,"depthToSpace",()=>ui),l(lT,"depthwiseConv2d",()=>us),l(lT,"diag",()=>uo),l(lT,"dilation2d",()=>ul),l(lT,"div",()=>iq),l(lT,"divNoNan",()=>uh),l(lT,"dot",()=>up),l(lT,"einsum",()=>uc),l(lT,"elu",()=>sM),l(lT,"ensureShape",()=>uf),l(lT,"equal",()=>uu),l(lT,"erf",()=>um),l(lT,"euclideanNorm",()=>uv),l(lT,"exp",()=>lC),l(lT,"expandDims",()=>lI),l(lT,"expm1",()=>uw),l(lT,"eye",()=>uk),l(lT,"fill",()=>i5),l(lT,"floor",()=>uC),l(lT,"floorDiv",()=>iK),l(lT,"gather",()=>uI),l(lT,"greater",()=>uT),l(lT,"greaterEqual",()=>u$),l(lT,"imag",()=>uN),l(lT,"isFinite",()=>uE),l(lT,"isInf",()=>uR),l(lT,"isNaN",()=>uA),l(lT,"leakyRelu",()=>sB),l(lT,"less",()=>u_),l(lT,"lessEqual",()=>uO),l(lT,"linspace",()=>uF),l(lT,"localResponseNormalization",()=>uP),l(lT,"log",()=>uD),l(lT,"log1p",()=>uL),l(lT,"logSigmoid",()=>uz),l(lT,"logSoftmax",()=>uU),l(lT,"logSumExp",()=>uW),l(lT,"logicalAnd",()=>uV),l(lT,"logicalNot",()=>uG),l(lT,"logicalOr",()=>uH),l(lT,"logicalXor",()=>uj),l(lT,"lowerBound",()=>uX),l(lT,"matMul",()=>lz),l(lT,"max",()=>uy),l(lT,"maxPool",()=>uY),l(lT,"maxPool3d",()=>uQ),l(lT,"maxPoolWithArgmax",()=>uZ),l(lT,"maximum",()=>sa),l(lT,"mean",()=>uJ),l(lT,"meshgrid",()=>u2),l(lT,"min",()=>ux),l(lT,"minimum",()=>u3),l(lT,"mirrorPad",()=>u4),l(lT,"mod",()=>u6),l(lT,"moments",()=>u5),l(lT,"mul",()=>iX),l(lT,"multiRNNCell",()=>u8),l(lT,"multinomial",()=>u7),l(lT,"neg",()=>uM),l(lT,"notEqual",()=>u9),l(lT,"oneHot",()=>de),l(lT,"ones",()=>u1),l(lT,"onesLike",()=>dt),l(lT,"outerProduct",()=>dr),l(lT,"pad",()=>dn),l(lT,"pad1d",()=>da),l(lT,"pad2d",()=>di),l(lT,"pad3d",()=>ds),l(lT,"pad4d",()=>dl),l(lT,"pool",()=>dd),l(lT,"pow",()=>i8),l(lT,"prelu",()=>sz),l(lT,"print",()=>iH),l(lT,"prod",()=>dh),l(lT,"raggedGather",()=>dp),l(lT,"raggedRange",()=>dc),l(lT,"raggedTensorToTensor",()=>df),l(lT,"rand",()=>dm),l(lT,"randomGamma",()=>d$),l(lT,"randomNormal",()=>dN),l(lT,"randomStandardNormal",()=>dE),l(lT,"randomUniform",()=>dR),l(lT,"randomUniformInt",()=>dA),l(lT,"range",()=>d_),l(lT,"real",()=>dO),l(lT,"reciprocal",()=>dF),l(lT,"relu",()=>sU),l(lT,"relu6",()=>sW),l(lT,"reshape",()=>sV),l(lT,"reverse",()=>dP),l(lT,"reverse1d",()=>dD),l(lT,"reverse2d",()=>dL),l(lT,"reverse3d",()=>dM),l(lT,"reverse4d",()=>dB),l(lT,"round",()=>dz),l(lT,"rsqrt",()=>dU),l(lT,"scalar",()=>i0),l(lT,"selu",()=>dW),l(lT,"separableConv2d",()=>dV),l(lT,"setdiff1dAsync",()=>dG),l(lT,"sigmoid",()=>sG),l(lT,"sign",()=>dH),l(lT,"sin",()=>dj),l(lT,"sinh",()=>dK),l(lT,"slice",()=>lU),l(lT,"slice1d",()=>dq),l(lT,"slice2d",()=>dX),l(lT,"slice3d",()=>dY),l(lT,"slice4d",()=>dQ),l(lT,"softmax",()=>dZ),l(lT,"softplus",()=>uB),l(lT,"spaceToBatchND",()=>du),l(lT,"fft",()=>dJ),l(lT,"ifft",()=>d0),l(lT,"irfft",()=>d1),l(lT,"rfft",()=>d3),l(lT,"split",()=>d2),l(lT,"sqrt",()=>iY),l(lT,"square",()=>iQ),l(lT,"squaredDifference",()=>d4),l(lT,"squeeze",()=>d6),l(lT,"stack",()=>d5),l(lT,"step",()=>sH),l(lT,"stridedSlice",()=>d8),l(lT,"sub",()=>i7),l(lT,"sum",()=>sj),l(lT,"tan",()=>d7),l(lT,"tanh",()=>lW),l(lT,"tensor",()=>ah),l(lT,"tensor1d",()=>d9),l(lT,"tensor2d",()=>he),l(lT,"tensor3d",()=>lf),l(lT,"tensor4d",()=>ht),l(lT,"tensor5d",()=>hr),l(lT,"tensor6d",()=>hn),l(lT,"tensorScatterUpdate",()=>ha),l(lT,"tile",()=>uS),l(lT,"topk",()=>hi),l(lT,"truncatedNormal",()=>hs),l(lT,"unique",()=>ho),l(lT,"unsortedSegmentSum",()=>hl),l(lT,"unstack",()=>hu),l(lT,"upperBound",()=>hd),l(lT,"variable",()=>hh),l(lT,"where",()=>ud),l(lT,"whereAsync",()=>hc),l(lT,"zeros",()=>u0),l(lT,"zerosLike",()=>iZ),l(lT,"op",()=>al),l(lT,"OP_SCOPE_SUFFIX",()=>ao),l(lT,"fused",()=>hO);const l$=al({acos_:function(e){let t=ai(e,"x","acos");return n5.runKernel(ek,{x:t})}}),lN=al({acosh_:function(e){let t=ai(e,"x","acosh");return n5.runKernel(eC,{x:t})}}),lE=al({addN_:function(e){A(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),A(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);let t=e.map((e,t)=>ai(e,`tensors${t}`,"addN")),r=t[0];return t.forEach(e=>{if(e.dtype!==r.dtype)throw Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!L(e.shape,r.shape))throw Error("All tensors passed to tf.addN() must have the same shape")}),n5.runKernel(eI,t)}}),lR=al({all_:function(e,t=null,r=!1){let n=ai(e,"x","all","bool");return n5.runKernel("All",{x:n},{axis:t,keepDims:r})}}),lA=al({any_:function(e,t=null,r=!1){let n=ai(e,"x","any","bool");return n5.runKernel("Any",{x:n},{axis:t,keepDims:r})}}),l_=al({argMin_:function(e,t=0){let r=ai(e,"x","argMin");return n5.runKernel(e$,{x:r},{axis:t})}}),lO=al({asin_:function(e){let t=ai(e,"x","asin");return n5.runKernel(eN,{x:t})}}),lF=al({asinh_:function(e){let t=ai(e,"x","asinh");return n5.runKernel(eE,{x:t})}}),lP=al({atan_:function(e){let t=ai(e,"x","atan");return n5.runKernel(eR,{x:t})}}),lD=al({atan2_:function(e,t){let r=ai(e,"a","atan2"),n=ai(t,"b","atan2");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel(e_,a)}}),lL=al({atanh_:function(e){let t=ai(e,"x","atanh");return n5.runKernel(eA,{x:t})}}),lM=al({avgPool_:function(e,t,r,n,a){let i=ai(e,"x","avgPool","float32");A(sO(r,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${r} and dilations '1'`);let s=i,o=!1;3===i.rank&&(o=!0,s=sV(i,[1,i.shape[0],i.shape[1],i.shape[2]])),A(4===s.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${s.rank}.`),sD("avgPool",n,a);let l={x:s},u=n5.runKernel(eO,l,{filterSize:t,strides:r,pad:n,dimRoundingMode:a});return(u=iV(u,i.dtype),o)?sV(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),lB=al({avgPool3d_:function(e,t,r,n,a,i="NDHWC"){let s=ai(e,"x","avgPool3d","float32"),o=s,l=!1;4===s.rank&&(l=!0,o=sV(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),A(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),A("NDHWC"===i,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`),A("number"==typeof r&&r>0||Array.isArray(r)&&r[0]>0&&r[1]>0&&r[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${r}'`),sD("avgPool3d",n,a);let u={x:o},d=n5.runKernel(eP,u,{filterSize:t,strides:r,pad:n,dimRoundingMode:a,dataFormat:i});return(d=iV(d,o.dtype),l)?sV(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),lz=al({matMul_:function(e,t,r=!1,n=!1){let a=ai(e,"a","matMul"),i=ai(t,"b","matMul");[a,i]=n0(a,i);let s={a:a,b:i};return n5.runKernel(eL,s,{transposeA:r,transposeB:n})}}),lU=al({slice_:function(e,t,r){let n=ai(e,"x","slice","string_or_numeric");if(0===n.rank)throw Error("Slicing scalar is not possible");return n5.runKernel(rd,{x:n},{begin:t,size:r})}}),lW=al({tanh_:function(e){let t=ai(e,"x","tanh","float32");return n5.runKernel(rA,{x:t})}}),lV=al({basicLSTMCell_:function(e,t,r,n,a,i){let s=ai(e,"forgetBias","basicLSTMCell"),o=ai(t,"lstmKernel","basicLSTMCell"),l=ai(r,"lstmBias","basicLSTMCell"),u=ai(n,"data","basicLSTMCell"),d=ai(a,"c","basicLSTMCell"),h=ij(lz(lk([u,ai(i,"h","basicLSTMCell")],1),o),l),p=h.shape[0],c=h.shape[1]/4,f=[p,c],m=lU(h,[0,0],f),g=lU(h,[0,c],f),y=lU(h,[0,2*c],f),x=lU(h,[0,3*c],f),b=ij(iX(sG(m),lW(g)),iX(d,sG(ij(s,y)))),v=iX(lW(b),sG(x));return[b,v]}}),lG=al({batchToSpaceND_:function(e,t,r){let n=ai(e,"x","batchToSpaceND"),a=t.reduce((e,t)=>e*t);return A(n.rank>=1+t.length,()=>`input rank is ${n.rank} but should be > than blockShape.length ${t.length}`),A(r.length===t.length,()=>`crops.length is ${r.length} but should be equal to blockShape.length  ${t.length}`),A(n.shape[0]%a==0,()=>`input tensor batch is ${n.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`),n5.runKernel(eM,{x:n},{blockShape:t,crops:r})}}),lH=al({batchNorm_:function(e,t,r,n,a,i){let s,o,l;null==i&&(i=.001);let u=ai(e,"x","batchNorm"),d=ai(t,"mean","batchNorm"),h=ai(r,"variance","batchNorm");null!=a&&(s=ai(a,"scale","batchNorm")),null!=n&&(o=ai(n,"offset","batchNorm")),A(d.rank===h.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),A(null==o||d.rank===o.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),A(null==s||d.rank===s.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let p={x:0===u.rank||1===u.rank?sV(u,[1,1,1,u.size]):2===u.rank?sV(u,[1,1,u.shape[0],u.shape[1]]):3===u.rank?sV(u,[1,u.shape[0],u.shape[1],u.shape[2]]):u,scale:s,offset:o,mean:d,variance:h},c={varianceEpsilon:i};return sV(n5.runKernel(tp,p,c),u.shape)}}),lj=al({batchNorm2d_:function(e,t,r,n,a,i){let s,o,l=ai(e,"x","batchNorm"),u=ai(t,"mean","batchNorm"),d=ai(r,"variance","batchNorm");return null!=a&&(s=ai(a,"scale","batchNorm")),null!=n&&(o=ai(n,"offset","batchNorm")),A(2===l.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${l.rank}.`),A(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`),A(2===d.rank||1===d.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${d.rank}.`),null!=s&&A(2===s.rank||1===s.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${s.rank}.`),null!=o&&A(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${o.rank}.`),lH(l,u,d,o,s,i)}}),lK=al({batchNorm3d_:function(e,t,r,n,a,i){let s,o,l=ai(e,"x","batchNorm"),u=ai(t,"mean","batchNorm"),d=ai(r,"variance","batchNorm");return null!=a&&(s=ai(a,"scale","batchNorm")),null!=n&&(o=ai(n,"offset","batchNorm")),A(3===l.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${l.rank}.`),A(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`),A(3===d.rank||1===d.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${d.rank}.`),null!=s&&A(3===s.rank||1===s.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${s.rank}.`),null!=o&&A(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${o.rank}.`),lH(l,u,d,o,s,i)}}),lq=al({batchNorm4d_:function(e,t,r,n,a,i){let s,o,l=ai(e,"x","batchNorm"),u=ai(t,"mean","batchNorm"),d=ai(r,"variance","batchNorm");return null!=a&&(s=ai(a,"scale","batchNorm")),null!=n&&(o=ai(n,"offset","batchNorm")),A(4===l.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${l.rank}.`),A(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`),A(4===d.rank||1===d.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${d.rank}.`),null!=s&&A(4===s.rank||1===s.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${s.rank}.`),null!=o&&A(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${o.rank}.`),lH(l,u,d,o,s,i)}}),lX=al({bincount_:function(e,t,r){let n=ai(e,"x","bincount"),a=ai(t,"weights","bincount");return A("int32"===n.dtype,()=>`Error in bincount: input dtype must be int32, but got ${n.dtype}`),A(r>=0,()=>`size must be non-negative, but got ${r}.`),A(a.size===n.size||0===a.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${n.shape}, weights shape: ${a.shape}.`),n5.runKernel(eB,{x:n,weights:a},{size:r})}}),lY=al({bitwiseAnd_:function(e,t){let r=ai(e,"x","bitwiseAnd"),n=ai(t,"y","bitwiseAnd");if(!L(r.shape,n.shape))throw Error(`BitwiseAnd: Tensors must have the same shape. x: ${r.shape}, y: ${n.shape}`);if("int32"!==r.dtype||"int32"!==n.dtype)throw Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${r.dtype} and type of y: ${n.dtype}`);return n5.runKernel(ez,{a:r,b:n})}}),lQ=al({broadcastArgs_:function(e,t){let r=ai(e,"s0","broadcastArgs","int32"),n=ai(t,"s1","broadcastArgs","int32");if(1!==r.rank)throw Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${r.rank}`);if(1!==n.rank)throw Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${n.rank}`);return n5.runKernel(eU,{s0:r,s1:n})}}),lZ=al({ceil_:function(e){let t=ai(e,"x","ceil","float32");return n5.runKernel(eV,{x:t})}}),lJ=al({concat1d_:function(e){return lk(e,0)}}),l0=al({concat2d_:function(e,t){return lk(e,t)}}),l1=al({concat3d_:function(e,t){return lk(e,t)}}),l2=al({concat4d_:function(e,t){return lk(e,t)}}),l3=al({conv2d_:function(e,t,r,n,a="NHWC",i=[1,1],s){let o=ai(e,"x","conv2d","float32"),l=ai(t,"filter","conv2d","float32"),u=o,d=!1;3===o.rank&&(d=!0,u=sV(o,[1,o.shape[0],o.shape[1],o.shape[2]])),A(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),A(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),sD("conv2d",n,s);let h="NHWC"===a?u.shape[3]:u.shape[1];A(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),A(sO(r,i),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`),A(sF(i),()=>"Error in conv2D: Dilated rates should be larger than 0."),A(sF(r),()=>"Error in conv2D: Strides should be larger than 0.");let p={x:u,filter:l},c=n5.runKernel(eq,p,{strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s});return d?sV(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),l4=al({conv1d_:function(e,t,r,n,a="NWC",i=1,s){let o=ai(e,"x","conv1d"),l=ai(t,"filter","conv1d"),u=o,d=!1;2===o.rank&&(d=!0,u=sV(o,[1,o.shape[0],o.shape[1]])),A(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),A(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),sD("conv1d",n,s),A(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),A(sO(r,i),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${r} and dilation '${i}'`),A(sF(i),()=>"Error in conv1D: Dilated rates should be larger than 0."),A(sF(r),()=>"Error in conv1D: Stride should be larger than 0."),A("NWC"===a,()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`);let h=sV(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=l3(sV(u,[u.shape[0],1,u.shape[1],u.shape[2]]),h,[1,r],n,"NHWC",[1,i],s);return d?sV(p,[p.shape[2],p.shape[3]]):sV(p,[p.shape[0],p.shape[2],p.shape[3]])}}),l6=al({conv2DBackpropInput_:function(e,t,r,n,a,i="NHWC",s){A(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=sV(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),A(4===o.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`),A(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),A(4===r.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${r.rank}`);let d="NHWC"===i?o[3]:o[1],h="NHWC"===i?l.shape[3]:l.shape[1];A(d===r.shape[2],()=>`Error in conv2dDerInput: depth of input (${d}) must match input depth for filter ${r.shape[2]}.`),A(h===r.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${r.shape[3]}.`),sD("conv2dDerInput",a,s);let p={dy:l,filter:r},c={strides:n,pad:a,dataFormat:i,dimRoundingMode:s,inputShape:o},f=n5.runKernel(eY,p,c);return u?sV(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),l5=al({conv2dTranspose_:function(e,t,r,n,a,i){return l6(r,ai(e,"x","conv2dTranspose"),ai(t,"filter","conv2dTranspose"),n,a,"NHWC",i)}}),l8=al({conv3d_:function(e,t,r,n,a="NDHWC",i=[1,1,1]){let s=ai(e,"x","conv3d"),o=ai(t,"filter","conv3d"),l=s,u=!1;4===s.rank&&(u=!0,l=sV(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),A(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),A(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),A(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),A(sO(r,i),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`),A("NDHWC"===a,()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`),A(sF(i),()=>"Error in conv3D: Dilated rates should be larger than 0."),A(sF(r),()=>"Error in conv3D: Strides should be larger than 0.");let d={x:l,filter:o},h=n5.runKernel(eQ,d,{strides:r,pad:n,dataFormat:a,dilations:i});return u?sV(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),l7=al({conv3DBackpropInput_:function(e,t,r,n,a){A(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let i=e,s=t,o=!1;4===t.rank&&(o=!0,s=sV(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);let l=i[4],u=s.shape[4];A(5===i.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`),A(5===s.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${s.rank}`),A(5===r.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${r.rank}`),A(l===r.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${r.shape[3]}.`),A(u===r.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${r.shape[4]}.`);let d={dy:s,filter:r},h={pad:a,strides:n,inputShape:i},p=n5.runKernel(eJ,d,h);return o?sV(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),l9=al({conv3dTranspose_:function(e,t,r,n,a){return l7(r,ai(e,"x","conv3dTranspose"),ai(t,"filter","conv3dTranspose"),n,a)}}),ue=al({cos_:function(e){let t=ai(e,"x","cos","float32");return n5.runKernel("Cos",{x:t})}}),ut=al({cosh_:function(e){let t=ai(e,"x","cosh","float32");return n5.runKernel(e0,{x:t})}}),ur=al({cumprod_:function(e,t=0,r=!1,n=!1){let a=ai(e,"x","cumprod");return n5.runKernel(e1,{x:a},{axis:t,exclusive:r,reverse:n})}}),un=al({cumsum_:function(e,t=0,r=!1,n=!1){let a=ai(e,"x","cumsum");return n5.runKernel(e2,{x:a},{axis:t,exclusive:r,reverse:n})}}),ua=al({denseBincount_:function(e,t,r,n=!1){let a=ai(e,"x","denseBincount"),i=ai(t,"weights","denseBincount");return A("int32"===a.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`),A(a.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`),A(r>=0,()=>`size must be non-negative, but got ${r}.`),A(i.size===a.size||0===i.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${i.shape}.`),n5.runKernel(e4,{x:a,weights:i},{size:r,binaryOutput:n})}}),ui=al({depthToSpace_:function(e,t,r="NHWC"){let n=ai(e,"x","depthToSpace","float32"),a="NHWC"===r?n.shape[1]:n.shape[2],i="NHWC"===r?n.shape[2]:n.shape[3],s="NHWC"===r?n.shape[3]:n.shape[1];return A(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),A(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${a} and ${t}  for depthToSpace with input shape
    ${n.shape}`),A(i*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${i} and ${t} for depthToSpace with input shape
        ${n.shape}`),A(s%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${s} for depthToSpace with input shape ${n.shape}`),n5.runKernel(e6,{x:n},{blockSize:t,dataFormat:r})}}),us=al({depthwiseConv2d_:function(e,t,r,n,a="NHWC",i=[1,1],s){let o=ai(e,"x","depthwiseConv2d","float32"),l=ai(t,"filter","depthwiseConv2d","float32"),u=o,d=!1;3===o.rank&&(d=!0,u=sV(o,[1,o.shape[0],o.shape[1],o.shape[2]])),A(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),A(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let h="NHWC"===a?u.shape[3]:u.shape[1];A(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),sD("depthwiseConv2d",n,s);let p={x:u,filter:l},c=n5.runKernel(e5,p,{strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s});return d?sV(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),uo=al({diag_:function(e){let t=ai(e,"x","diag");return n5.runKernel(e9,{x:t})}}),ul=al({dilation2d_:function(e,t,r,n,a=[1,1],i="NHWC"){let s=ai(e,"x","dilation2d"),o=ai(t,"filter","dilation2d");A(3===s.rank||4===s.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${s.rank}.`),A(3===o.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`),A("NHWC"===i,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${i}`);let l=s,u=!1;3===s.rank&&(l=sV(s,[1,s.shape[0],s.shape[1],s.shape[2]]),u=!0),A(l.shape[3]===o.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`);let d={x:l,filter:o},h=n5.runKernel(te,d,{strides:r,pad:n,dilations:a});return u?sV(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),uu=al({equal_:function(e,t){let r=ai(e,"a","equal","string_or_numeric"),n=ai(t,"b","equal","string_or_numeric");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(ti,a)}}),ud=al({where_:function(e,t,r){let n=ai(t,"a","where"),a=ai(r,"b","where"),i=ai(e,"condition","where","bool"),s=sn(sn(i.shape,n.shape),a.shape),o=lp(i,s),l=lp(n,s),u=lp(a,s);return n5.runKernel(rl,{condition:o,t:l,e:u})}}),uh=al({divNoNan_:function(e,t){let r=ai(e,"a","div"),n=ai(t,"b","div");[r,n]=n0(r,n);let a=iq(r,n),i=iZ(a);return ud(uu(n,i),i,a)}}),up=al({dot_:function(e,t){let r=ai(e,"t1","dot"),n=ai(t,"t2","dot");A((1===r.rank||2===r.rank)&&(1===n.rank||2===n.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${r.rank} and ${n.rank}.`);let a=1===r.rank?r.size:r.shape[1],i=1===n.rank?n.size:n.shape[0];if(A(a===i,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${i}.`),1===r.rank&&1===n.rank){let e=lz(sV(r,[1,-1]),sV(n,[-1,1]));return sV(e,[])}if(1===r.rank&&2===n.rank){let e=lz(sV(r,[1,-1]),sV(n,[n.shape[0],n.shape[1]]));return sV(e,[e.size])}if(2!==r.rank||1!==n.rank)return lz(r,sV(n,[n.shape[0],n.shape[1]]));{let e=lz(r,sV(n,[-1,1]));return sV(e,[e.size])}}}),uc=al({einsum_:function(e,...t){let r=t.map((e,t)=>ai(e,`tensors${t}`,"einsum"));return n5.runKernel(tn,r,{equation:e})}}),uf=al({ensureShape_:function(e,t){let r=ai(e,"x","ensureShape","string_or_numeric");if(!D(r.shape,t))throw Error(`EnsureShape: Shape of tensor ${r.shape} is not compatible with expected shape ${t}`);return e}}),um=al({erf_:function(e){let t=ai(e,"x","erf");A("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=iV(t,"float32"));let r={x:t};return n5.runKernel("Erf",r)}});var ug={};l(ug,"norm",()=>ub);const uy=al({max_:function(e,t=null,r=!1){let n=ai(e,"x","max");return n5.runKernel("Max",{x:n},{reductionIndices:t,keepDims:r})}}),ux=al({min_:function(e,t=null,r=!1){let n=ai(e,"x","min");return n5.runKernel("Min",{x:n},{axis:t,keepDims:r})}}),ub=al({norm_:function(e,t="euclidean",r=null,n=!1){let a=function e(t,r,n=null){if(0===t.rank)return i9(t);if(1!==t.rank&&null===n)return e(sV(t,[-1]),r,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===r)return sj(i9(t),n);if(r===1/0)return uy(i9(t),n);if(r===-1/0)return ux(i9(t),n);if("euclidean"===r||2===r)return iY(sj(i8(i9(t),i0(2,"int32")),n));throw Error(`Error in norm: invalid ord value: ${r}`)}if(Array.isArray(n)&&2===n.length){if(1===r)return uy(sj(i9(t),n[0]),n[1]-1);if(r===1/0)return uy(sj(i9(t),n[1]),n[0]);if(r===-1/0)return ux(sj(i9(t),n[1]),n[0]);if("fro"===r||"euclidean"===r)return iY(sj(iQ(t),n));throw Error(`Error in norm: invalid ord value: ${r}`)}throw Error(`Error in norm: invalid axis: ${n}`)}(e=ai(e,"x","norm"),t,r),i=a.shape;if(n){let t=H(r,e.shape);i=sc(a.shape,t)}return sV(a,i)}}),uv=al({euclideanNorm_:function(e,t=null,r=!1){return ub(e,"euclidean",t,r)}}),uw=al({expm1_:function(e){let t=ai(e,"x","expm1");return n5.runKernel(to,{x:t})}}),uS=al({tile_:function(e,t){let r=ai(e,"x","tile","string_or_numeric");return A(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of reps ${t}.`),n5.runKernel(r_,{x:r},{reps:t})}}),uk=al({eye_:function(e,t,r,n="float32"){null==t&&(t=e);let a=iW([e,t],n),i=e<=t?e:t;for(let e=0;e<i;++e)a.set(1,e,e);let s=sV(a.toTensor(),[e,t]);if(null==r)return s;if(1===r.length)return uS(lI(s,0),[r[0],1,1]);if(2===r.length)return uS(lI(lI(s,0),0),[r[0],r[1],1,1]);if(3===r.length)return uS(lI(lI(lI(s,0),0),0),[r[0],r[1],r[2],1,1]);throw Error(`eye() currently supports only 1D and 2D batchShapes, but received ${r.length}D.`)}}),uC=al({floor_:function(e){let t=ai(e,"x","floor","float32");return n5.runKernel(td,{x:t})}}),uI=al({gather_:function(e,t,r=0,n=0){let a=ai(e,"x","gather"),i=ai(t,"indices","gather","int32");return n5.runKernel(tc,{x:a,indices:i},{axis:r,batchDims:n})}}),uT=al({greater_:function(e,t){let r=ai(e,"a","greater","string_or_numeric"),n=ai(t,"b","greater","string_or_numeric");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(tm,a)}}),u$=al({greaterEqual_:function(e,t){let r=ai(e,"a","greaterEqual","string_or_numeric"),n=ai(t,"b","greaterEqual","string_or_numeric");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(tg,a)}}),uN=al({imag_:function(e){let t=ai(e,"input","imag");return n5.runKernel(tb,{input:t})}}),uE=al({isFinite_:function(e){let t=ai(e,"x","isFinite");return n5.runKernel(tv,{x:t})}}),uR=al({isInf_:function(e){let t=ai(e,"x","isInf");return n5.runKernel(tw,{x:t})}}),uA=al({isNaN_:function(e){let t=ai(e,"x","isNaN");return n5.runKernel(tS,{x:t})}}),u_=al({less_:function(e,t){let r=ai(e,"a","less","string_or_numeric"),n=ai(t,"b","less","string_or_numeric");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(tC,a)}}),uO=al({lessEqual_:function(e,t){let r=ai(e,"a","lessEqual","string_or_numeric"),n=ai(t,"b","lessEqual","string_or_numeric");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(tI,a)}});function uF(e,t,r){if(r<=0)throw Error("The number of values should be positive.");return n5.runKernel(tT,{},{start:e,stop:t,num:r})}const uP=al({localResponseNormalization_:function(e,t=5,r=1,n=1,a=.5){let i=ai(e,"x","localResponseNormalization");A(4===i.rank||3===i.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${i.rank}.`),A(M(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let s=i,o=!1;3===i.rank&&(o=!0,s=sV(i,[1,i.shape[0],i.shape[1],i.shape[2]]));let l={x:s},u=n5.runKernel("LRN",l,{depthRadius:t,bias:r,alpha:n,beta:a});return o?sV(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),uD=al({log_:function(e){let t=ai(e,"x","log","float32");return n5.runKernel("Log",{x:t})}}),uL=al({log1p_:function(e){let t=ai(e,"x","log1p");return n5.runKernel(t$,{x:t})}}),uM=al({neg_:function(e){let t=ai(e,"x","neg");return n5.runKernel("Neg",{x:t})}}),uB=al({softplus_:function(e){let t=ai(e,"x","softplus");return n5.runKernel(rf,{x:t})}}),uz=al({logSigmoid_:function(e){let t=ai(e,"x","logSigmoid");return iJ(e=>({value:uM(uB(uM(e))),gradFunc:t=>iX(t,sG(uM(e)))}))(t)}}),uU=al({logSoftmax_:function(e,t=-1){let r=ai(e,"logits","logSoftmax");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${r.rank} and axis was ${t}`);return iJ((e,r)=>{let n=uy(e,t,!0),a=i7(e,n),i=i7(iV(a,"float32"),uD(sj(lC(a),t,!0)));return r([i]),{value:i,gradFunc:(e,r)=>{let[n]=r,a=lC(n);return i7(e,iX(sj(e,t,!0),a))}}})(r)}}),uW=al({logSumExp_:function(e,t=null,r=!1){let n=ai(e,"x","logSumExp"),a=H(t,n.shape),i=uy(n,a,!0),s=uD(sj(lC(i7(n,i)),a)),o=ij(sV(i,s.shape),s);if(r){let e=sc(o.shape,a);return sV(o,e)}return o}}),uV=al({logicalAnd_:function(e,t){let r=ai(e,"a","logicalAnd","bool"),n=ai(t,"b","logicalAnd","bool");return sn(r.shape,n.shape),n5.runKernel(tN,{a:r,b:n})}}),uG=al({logicalNot_:function(e){let t=ai(e,"x","logicalNot","bool");return n5.runKernel(tE,{x:t})}}),uH=al({logicalOr_:function(e,t){let r=ai(e,"a","logicalOr","bool"),n=ai(t,"b","logicalOr","bool");return sn(r.shape,n.shape),n5.runKernel(tR,{a:r,b:n})}}),uj=al({logicalXor_:function(e,t){let r=ai(e,"a","logicalXor","bool"),n=ai(t,"b","logicalXor","bool");return sn(r.shape,n.shape),uV(uH(e,t),uG(uV(e,t)))}});var uK={};l(uK,"searchSorted",()=>uq);const uq=al({searchSorted_:function(e,t,r="left"){let n=ai(e,"sortedSequence","searchSorted"),a=ai(t,"values","searchSorted"),i=n.shape[n.shape.length-1],s=a.shape[a.shape.length-1],o=sV(n,[-1,i]),l=sV(a,[-1,s]);if(o.rank<2)throw Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(F(l.shape)>=0x80000000)throw Error("values tensor size must less than 2147483648");if(o.shape[1]>=0x80000000)throw Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);return n5.runKernel(ro,{sortedSequence:o,values:l},{side:r})}});function uX(e,t){return uq(e,t,"left")}const uY=al({maxPool_:function(e,t,r,n,a){let i=ai(e,"x","maxPool"),s=i,o=!1;3===i.rank&&(o=!0,s=sV(i,[1,i.shape[0],i.shape[1],i.shape[2]])),A(4===s.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${s.rank}.`),A(sO(r,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '1'`),sD("maxPool",n,a);let l={x:s},u=n5.runKernel(tO,l,{filterSize:t,strides:r,pad:n,dimRoundingMode:a});return o?sV(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),uQ=al({maxPool3d_:function(e,t=[1,1,1],r,n,a,i="NDHWC"){let s=ai(e,"x","maxPool3d"),o=s,l=!1;4===s.rank&&(l=!0,o=sV(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),A(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),A("NDHWC"===i,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`),sD("maxPool3d",n,a);let u={x:o},d=n5.runKernel(tP,u,{filterSize:t,strides:r,pad:n,dimRoundingMode:a,dataFormat:i});return l?sV(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),uZ=al({maxPoolWithArgmax_:function(e,t,r,n,a=!1){let i=ai(e,"x","maxPoolWithArgmax"),s=n5.runKernel(tL,{x:i},{filterSize:t,strides:r,pad:n,includeBatchInIndex:a});return{result:s[0],indexes:s[1]}}}),uJ=al({mean_:function(e,t=null,r=!1){let n=ai(e,"x","mean");return n5.runKernel(tM,{x:n},{axis:t,keepDims:r})}});function u0(e,t="float32"){if(ep(e),"complex64"===t)return au(u0(e,"float32"),u0(e,"float32"));let r=ed(F(e),t);return n5.makeTensor(r,e,t)}function u1(e,t="float32"){if(ep(e),"complex64"===t)return au(u1(e,"float32"),u0(e,"float32"));let r=eu(F(e),t);return n5.makeTensor(r,e,t)}function u2(e,t,{indexing:r="xy"}={}){if("xy"!==r&&"ij"!==r)throw TypeError(`${r} is not a valid third argument to meshgrid`);if(void 0===e)return[];let n=ai(e,"x","meshgrid",e instanceof nj?e.dtype:"float32");if(void 0===t)return[n];let a=ai(t,"y","meshgrid",t instanceof nj?t.dtype:"float32"),i=F(n.shape),s=F(a.shape);return"xy"===r?(n=sV(n,[1,-1]),a=sV(a,[-1,1]),[lz(u1([s,1],n.dtype),n),lz(a,u1([1,i],a.dtype))]):(n=sV(n,[-1,1]),a=sV(a,[1,-1]),[lz(n,u1([1,s],n.dtype)),lz(u1([i,1],a.dtype),a)])}const u3=al({minimum_:function(e,t){let r=ai(e,"a","minimum"),n=ai(t,"b","minimum");[r,n]=n0(r,n),"bool"===r.dtype&&(r=iV(r,"int32"),n=iV(n,"int32")),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(tB,a)}}),u4=al({mirrorPad_:function(e,t,r){A("reflect"===r||"symmetric"===r,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${r}.`);let n=ai(e,"x","mirrorPad");if(0===n.rank)throw Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");A(t.length===n.rank,()=>`Padding doesn't match input. Must be ${n.rank}. Got ${t.length}.`);let a=+("reflect"===r);for(let e=0;e<n.rank;e++)A(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),A(t[e][0]>=0&&t[e][0]<=n.shape[e]-a&&t[e][1]>=0&&t[e][1]<=n.shape[e]-a,()=>`Padding in dimension ${e} cannot be greater than or equal to ${n.shape[e]-a} or less than 0 for input of shape ${n.shape}`);return n5.runKernel(tz,{x:n},{paddings:t,mode:r})}}),u6=al({mod_:function(e,t){let r=ai(e,"a","mod"),n=ai(t,"b","mod");[r,n]=n0(r,n);let a={a:r,b:n};return n5.runKernel("Mod",a)}}),u5=al({moments_:function(e,t=null,r=!1){let n=H(t,(e=ai(e,"x","moments")).shape),a=uJ(e,n,r),i=a.shape;r||(i=sc(a.shape,n));let s=uJ(iQ(i7(iV(e,"float32"),sV(a,i))),n,r);return{mean:a,variance:s}}}),u8=al({multiRNNCell_:function(e,t,r,n){let a=ai(t,"data","multiRNNCell"),i=as(r,"c","multiRNNCell"),s=as(n,"h","multiRNNCell"),o=a,l=[];for(let t=0;t<e.length;t++){let r=e[t](o,i[t],s[t]);l.push(r[0]),l.push(r[1]),o=r[1]}let u=[],d=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),d.push(l[e+1]);return[u,d]}}),u7=al({multinomial_:function(e,t,r,n=!1){let a=ai(e,"logits","multinomial"),i=a.size,s=a.rank;if(i<2)throw Error(`Error in multinomial: you need at least 2 outcomes, but got ${i}.`);if(s>2)throw Error(`Rank of probabilities must be 1 or 2, but is ${s}`);r=r||Math.random();let o=1===s?sV(a,[1,-1]):a,l={numSamples:t,seed:r,normalized:n},u=n5.runKernel(tU,{logits:o},l);return 1===s?sV(u,[u.size]):u}}),u9=al({notEqual_:function(e,t){let r=ai(e,"a","notEqual","string_or_numeric"),n=ai(t,"b","notEqual","string_or_numeric");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(tV,a)}}),de=al({oneHot_:function(e,t,r=1,n=0,a="int32"){if(t<2)throw Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i=ai(e,"indices","oneHot","int32");return n5.runKernel(tq,{indices:i},{dtype:a,depth:t,onValue:r,offValue:n})}}),dt=al({onesLike_:function(e){let t=ai(e,"x","onesLike");return n5.runKernel(tK,{x:t})}}),dr=al({outerProduct_:function(e,t){let r=ai(e,"v1","outerProduct"),n=ai(t,"v2","outerProduct");return A(1===r.rank&&1===n.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${r.rank} and ${n.rank}.`),lz(sV(r,[-1,1]),sV(n,[1,-1]))}}),dn=al({pad_:function(e,t,r=0){let n=ai(e,"x","pad");if(0===n.rank)throw Error("pad(scalar) is not defined. Pass non-scalar to pad");return n5.runKernel(tY,{x:n},{paddings:t,constantValue:r})}}),da=al({pad1d_:function(e,t,r=0){return A(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),dn(e,[t],r)}}),di=al({pad2d_:function(e,t,r=0){return A(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),dn(e,t,r)}}),ds=al({pad3d_:function(e,t,r=0){return A(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),dn(e,t,r)}}),dl=al({pad4d_:function(e,t,r=0){return A(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),dn(e,t,r)}}),du=al({spaceToBatchND_:function(e,t,r){let n=ai(e,"x","spaceToBatchND");return A(n.rank>=1+t.length,()=>`input rank ${n.rank} should be > than [blockShape] ${t.length}`),A(r.length===t.length,()=>`paddings.shape[0] ${r.length} must be equal to [blockShape] ${t.length}`),A(n.shape.reduce((e,n,a)=>a>0&&a<=t.length?e&&(n+r[a-1][0]+r[a-1][1])%t[a-1]==0:e,!0),()=>`input spatial dimensions ${n.shape.slice(1)} with paddings ${r.toString()} must be divisible by blockShapes ${t.toString()}`),n5.runKernel(rg,{x:n},{blockShape:t,paddings:r})}}),dd=al({pool_:function(e,t,r,n,a,i,s){let o;null==a&&(a=[1,1]),null==i&&(i=1),0===n&&(n="valid");let l=ai(e,"x","maxPool"),u=l,d=!1;3===l.rank&&(d=!0,u=sV(l,[1,l.shape[0],l.shape[1],l.shape[2]])),A(sO(i,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${a}'`);let h=sk(u.shape,t,i,a,n),p=[h.dilationHeight,h.dilationWidth];o="same"===n?function(e,t){let r=e.map((e,r)=>e+(e-1)*(t[r]-1)).map(e=>e-1),n=r.map(e=>Math.floor(e/2)),a=r.map((e,t)=>e-n[t]);return r.map((e,t)=>[n[t],a[t]])}([h.filterHeight,h.filterWidth],p):[[0,0],[0,0]];let c=1===p[0]&&1===p[1],[f,m]=function(e,t,r){let n=r.map(e=>e[0]),a=r.map(e=>e[1]),i=e.concat(n,a),s=t.map((e,t)=>(e-i[t]%e)%e),o=a.map((e,t)=>e+s[t]);return[t.map((e,t)=>[n[t],o[t]]),t.map((e,t)=>[0,s[t]])]}([h.inHeight,h.inWidth],p,o),g=c?n:"valid",y=c?u:du(u,p,f),x=("avg"===r?()=>lM(y,t,i,g,s):()=>uY(y,t,i,g,s))(),b=c?x:lG(x,p,m);return d?sV(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),dh=al({prod_:function(e,t=null,r=!1){let n=ai(e,"x","prod");"bool"===n.dtype&&(n=iV(n,"int32"));let a={x:n};return n5.runKernel(tZ,a,{axis:t,keepDims:r})}}),dp=al({raggedGather_:function(e,t,r,n){let a=e.map((e,t)=>ai(e,`tensors${t}`,"raggedGather","int32")),i=ai(t,"paramsDenseValues","raggedGather"),s=ai(r,"indices","raggedGather","int32"),o=n5.runKernel(tJ,{paramsNestedSplits:a,paramsDenseValues:i,indices:s},{outputRaggedRank:n});return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),dc=al({raggedRange_:function(e,t,r){let n=ai(e,"starts","raggedRange"),a=ai(t,"limits","raggedRange",n.dtype),i=ai(r,"deltas","raggedRange",n.dtype),s=n5.runKernel(t0,{starts:n,limits:a,deltas:i});return{rtNestedSplits:s[0],rtDenseValues:s[1]}}}),df=al({raggedTensorToTensor_:function(e,t,r,n,a){let i=ai(e,"shape","raggedTensorToTensor","int32"),s=ai(t,"values","raggedTensorToTensor"),o=ai(r,"defaultValue","raggedTensorToTensor",s.dtype),l=n.map((e,t)=>ai(e,`tensors${t}`,"raggedTensorToTensor","int32"));return n5.runKernel(t1,{shape:i,values:s,defaultValue:o,rowPartitionTensors:l},{rowPartitionTypes:a})}}),dm=al({rand_:function(e,t,r){ep(e);let n=F(e),a=null;if(null==r||"float32"===r)a=new Float32Array(n);else if("int32"===r)a=new Int32Array(n);else if("bool"===r)a=new Uint8Array(n);else throw Error(`Unknown data type ${r}`);for(let e=0;e<n;e++)a[e]=t();return n5.makeTensor(a,e,r)}});var dg={},dy=y("k66zl"),dx=y("5wC0j"),db=y("5MbFK"),dv=y("dhcg8"),dw=y("ddz0R"),dS=y("8erNG"),dk={};!function(e,t,r){var n,a="random",i=r.pow(256,6),s=r.pow(2,52),o=2*s;function l(l,c,f){var m=[],g=h(function e(t,r){var n,a=[],i=typeof t;if(r&&"object"==i)for(n in t)try{a.push(e(t[n],r-1))}catch(e){}return a.length?a:"string"==i?t:t+"\0"}((c=!0==c?{entropy:!0}:c||{}).entropy?[l,p(t)]:null==l?function(){try{var r;return n&&(r=n.randomBytes)?r=r(256):(r=new Uint8Array(256),(e.crypto||e.msCrypto).getRandomValues(r)),p(r)}catch(r){var a=e.navigator,i=a&&a.plugins;return[+new Date,e,i,e.screen,p(t)]}}():l,3),m),y=new u(m),x=function(){for(var e=y.g(6),t=i,r=0;e<s;)e=(e+r)*256,t*=256,r=y.g(1);for(;e>=o;)e/=2,t/=2,r>>>=1;return(e+r)/t};return x.int32=function(){return 0|y.g(4)},x.quick=function(){return y.g(4)/0x100000000},x.double=x,h(p(y.S),t),(c.pass||f||function(e,t,n,i){return(i&&(i.S&&d(i,y),e.state=function(){return d(y,{})}),n)?(r[a]=e,t):e})(x,g,"global"in c?c.global:this==r,c.state)}function u(e){var t,r=e.length,n=this,a=0,i=n.i=n.j=0,s=n.S=[];for(r||(e=[r++]);a<256;)s[a]=a++;for(a=0;a<256;a++)s[a]=s[i=255&i+e[a%r]+(t=s[a])],s[i]=t;(n.g=function(e){for(var t,r=0,a=n.i,i=n.j,s=n.S;e--;)t=s[a=255&a+1],r=256*r+s[255&(s[a]=s[i=255&i+t])+(s[i]=t)];return n.i=a,n.j=i,r})(256)}function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function h(e,t){for(var r,n=e+"",a=0;a<n.length;)t[255&a]=255&(r^=19*t[255&a])+n.charCodeAt(a++);return p(t)}function p(e){return String.fromCharCode.apply(0,e)}if(h(r.random(),t),dk){dk=l;try{n=y("dee6J")}catch(e){}}else"function"==typeof define&&define.amd?define(function(){return l}):r["seed"+a]=l}("undefined"!=typeof self?self:dk,[],Math),dk.alea=dy,dk.xor128=dx,dk.xorwow=db,dk.xorshift7=dv,dk.xor4096=dw,dk.tychei=dS,dg=dk;class dC{constructor(e,t,r,n,a){this.mean=e,this.stdDev=t,this.dtype=r,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);let i=a||Math.random();this.random=dg.alea(i.toString())}nextValue(){let e,t;if(!isNaN(this.nextVal)){let e=this.nextVal;return this.nextVal=NaN,e}let r=!1;for(;!r;){let n,a,i;do i=(n=2*this.random()-1)*n+(a=2*this.random()-1)*a;while(i>=1||0===i)let s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*n*s,t=this.mean+this.stdDev*a*s,(!this.truncated||this.isValidTruncated(e))&&(r=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class dI{constructor(e,t,r,n){this.alpha=e,this.beta=1/t,this.dtype=r;let a=n||Math.random();this.randu=dg.alea(a.toString()),this.randn=new dC(0,1,r,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,r,n,a,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0)if(i*=i*i,t=1-.331*(e=n*n)*e,r=.5*e+this.d*(1-i+Math.log(i)),(a=this.randu())<t||Math.log(a)<r)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class dT{constructor(e=0,t=1,r,n){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=r,null==n&&(n=Math.random()),"number"==typeof n&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=dg.alea(n)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const d$=al({randomGamma_:function(e,t,r=1,n="float32",a){if(ep(e),null==r&&(r=1),null==n&&(n="float32"),"float32"!==n&&"int32"!==n)throw Error(`Unsupported data type ${n}`);let i=new dI(t,r,n,a),s=iW(e,n);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),dN=al({randomNormal_:function(e,t=0,r=1,n,a){if(ep(e),null!=n&&"bool"===n)throw Error(`Unsupported data type ${n}`);let i=new dC(t,r,n,!1,a),s=iW(e,n);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),dE=al({randomStandardNormal_:function(e,t,r){if(null!=t&&"bool"===t)throw Error(`Unsupported data type ${t}`);return dN(e,0,1,t,r)}}),dR=al({randomUniform_:function(e,t=0,r=1,n="float32",a){ep(e);let i=iW(e,n),s=new dT(t,r,null,a);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),dA=al({randomUniformInt_:function(e,t,r,n){return dR(e,t,r,"int32",n)}});function d_(e,t,r=1,n="float32"){if(0===r)throw Error("Cannot have a step of zero");return n5.runKernel(t2,{},{start:e,stop:t,step:r,dtype:n})}const dO=al({real_:function(e){let t=ai(e,"input","real");return n5.runKernel(t3,{input:t})}}),dF=al({reciprocal_:function(e){let t=ai(e,"x","reciprocal");return n5.runKernel(t4,{x:t})}}),dP=al({reverse_:function(e,t){let r=ai(e,"x","reverse");return n5.runKernel(rr,{x:r},{dims:t})}}),dD=al({reverse1d_:function(e){let t=ai(e,"x","reverse");return A(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),dP(t,0)}}),dL=al({reverse2d_:function(e,t){let r=ai(e,"x","reverse");return A(2===r.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${r.rank}.`),dP(r,t)}}),dM=al({reverse3d_:function(e,t){let r=ai(e,"x","reverse");return A(3===r.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${r.rank}.`),dP(r,t)}}),dB=al({reverse4d_:function(e,t){let r=ai(e,"x","reverse");return A(4===r.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${r.rank}.`),dP(r,t)}}),dz=al({round_:function(e){let t=ai(e,"x","round");return n5.runKernel(rn,{x:t})}}),dU=al({rsqrt_:function(e){let t=ai(e,"x","rsqrt","float32");return n5.runKernel(ra,{x:t})}}),dW=al({selu_:function(e){let t=ai(e,"x","selu");return n5.runKernel(ru,{x:t})}}),dV=al({separableConv2d_:function(e,t,r,n,a,i=[1,1],s="NHWC"){let o=ai(e,"x","separableConv2d"),l=ai(t,"depthwiseFilter","separableConv2d"),u=ai(r,"pointwiseFilter","separableConv2d"),d=o,h=!1;if(3===o.rank&&(h=!0,d=sV(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===s)throw Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");A(4===d.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${d.rank}.`),A(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),A(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),A(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),A(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let p=l.shape[2],c=l.shape[3];A(u.shape[2]===p*c,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*c}, but got ${u.shape[2]}.`);let f=l3(us(d,l,n,a,s,i),u,1,"valid",s);return h?sV(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),dG=async function(e,t){let r=ai(e,"x","setdiff1d"),n=ai(t,"y","setdiff1d");A(r.dtype===n.dtype,()=>`x and y should have the same dtype, but got x (${r.dtype}) and y (${n.dtype}).`),A(1===r.rank,()=>`x should be 1D tensor, but got x (${r.shape}).`),A(1===n.rank,()=>`y should be 1D tensor, but got y (${n.shape}).`);let a=await r.data(),i=new Set(await n.data()),s=0;for(let e=0;e<a.length;e++)!i.has(a[e])&&s++;let o=new nV([s],r.dtype),l=new nV([s],"int32");for(let e=0,t=0;e<a.length;e++)!i.has(a[e])&&(o.values[t]=a[e],l.values[t]=e,t++);return[o.toTensor(),l.toTensor()]},dH=al({sign_:function(e){let t=ai(e,"x","sign");return n5.runKernel(rp,{x:t})}}),dj=al({sin_:function(e){let t=ai(e,"x","sin","float32");return n5.runKernel("Sin",{x:t})}}),dK=al({sinh_:function(e){let t=ai(e,"x","sinh");return n5.runKernel(rh,{x:t})}}),dq=al({slice1d_:function(e,t,r){let n=ai(e,"x","slice1d");return A(1===n.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${n.rank} tensor`),lU(n,[t],[r])}}),dX=al({slice2d_:function(e,t,r){let n=ai(e,"x","slice2d");return A(2===n.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${n.rank} tensor`),lU(n,t,r)}}),dY=al({slice3d_:function(e,t,r){let n=ai(e,"x","slice3d");return A(3===n.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${n.rank} tensor`),lU(n,t,r)}}),dQ=al({slice4d_:function(e,t,r){let n=ai(e,"x","slice4d");return A(4===n.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${n.rank} tensor`),lU(n,t,r)}}),dZ=al({softmax_:function(e,t=-1){let r=ai(e,"logits","softmax","float32");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${r.rank} and dim was ${t}`);let n={dim:t};return n5.runKernel(rx,{logits:r},n)}}),dJ=al({fft_:function(e){return A("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),n5.runKernel("FFT",{input:e})}}),d0=al({ifft_:function(e){return A("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),n5.runKernel(tx,{input:e})}}),d1=al({irfft_:function(e){let t,r=e.shape[e.shape.length-1],n=e.size/r;if(r<=2)t=d0(sV(e,[n,r]));else{let a=[n,2*(r-1)],i=sV(dO(e),[n,r]),s=sV(uN(e),[n,r]),o=dP(lU(i,[0,1],[n,r-2]),1),l=iX(dP(lU(s,[0,1],[n,r-2]),1),i0(-1));t=d0(sV(au(lk([i,o],1),lk([s,l],1)),[a[0],a[1]]))}if(t=dO(t),3===e.rank&&0!==e.shape[0]){let r=t,n=e.shape[0];t=sV(t,[n,t.shape[0]/n,t.shape[1]]),r.dispose()}return t}}),d2=al({split_:function(e,t,r=0){let n=ai(e,"x","split");return n5.runKernel(ry,{x:n},{numOrSizeSplits:t,axis:r})}}),d3=al({rfft_:function(e,t){let r;A("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1],a=e.size/n;if(null!=t&&t<n){let a=e.shape.map(e=>0),i=e.shape.map(e=>e);i[e.shape.length-1]=t,r=lU(e,a,i),n=t}else if(null!=t&&t>n){let a=e.shape.map(e=>e);a[e.shape.length-1]=t-n,r=lk([e,u0(a)],e.shape.length-1),n=t}else r=e;let i=iZ(r),s=dJ(sV(au(r,i),[a,n])),o=Math.floor(n/2)+1,l=dO(s),u=uN(s),d=d2(l,[o,n-o],l.shape.length-1),h=d2(u,[o,n-o],u.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=o,sV(au(d[0],h[0]),p)}}),d4=al({squaredDifference_:function(e,t){let r=ai(e,"a","squaredDifference"),n=ai(t,"b","squaredDifference");[r,n]=n0(r,n),sn(r.shape,n.shape);let a={a:r,b:n};return n5.runKernel(rC,a,{})}}),d6=al({squeeze_:function(e,t){let r=ai(e,"x","squeeze","string_or_numeric");return sV(r,j(r.shape,t).newShape)}}),d5=al({stack_:function(e,t=0){let r=as(e,"tensors","stack","string_or_numeric");return A(r.length>=1,()=>"Pass at least one tensor to tf.stack"),r.length>0&&A(t<=r[0].rank,()=>"Axis must be <= rank of the tensor"),n5.runKernel(tX,r,{axis:t})}}),d8=al({stridedSlice_:function(e,t,r,n,a=0,i=0,s=0,o=0,l=0){let u=ai(e,"x","stridedSlice","string_or_numeric");return n5.runKernel(r$,{x:u},{begin:t,end:r,strides:n,beginMask:a,endMask:i,ellipsisMask:s,newAxisMask:o,shrinkAxisMask:l})}}),d7=al({tan_:function(e){let t=ai(e,"x","tan","float32");return n5.runKernel("Tan",{x:t})}});function d9(e,t){O(e);let r=an(e,t);if(1!==r.length)throw Error("tensor1d() requires values to be a flat/TypedArray");return ad(e,null,r,t)}function he(e,t,r){if(O(e),null!=t&&2!==t.length)throw Error("tensor2d() requires shape to have two numbers");let n=an(e,r);if(2!==n.length&&1!==n.length)throw Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ad(e,t,n,r)}function ht(e,t,r){if(O(e),null!=t&&4!==t.length)throw Error("tensor4d() requires shape to have four numbers");let n=an(e,r);if(4!==n.length&&1!==n.length)throw Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor4d() requires shape to be provided when `values` are a flat array");return ad(e,t,n,r)}function hr(e,t,r){if(O(e),null!=t&&5!==t.length)throw Error("tensor5d() requires shape to have five numbers");let n=an(e,r);if(5!==n.length&&1!==n.length)throw Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor5d() requires shape to be provided when `values` are a flat array");return ad(e,t,n,r)}function hn(e,t,r){if(O(e),null!=t&&6!==t.length)throw Error("tensor6d() requires shape to have six numbers");let n=an(e,r);if(6!==n.length&&1!==n.length)throw Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor6d() requires shape to be provided when `values` are a flat array");return ad(e,t=t||n,n,r)}const ha=al({tensorScatterUpdate_:function(e,t,r){let n=ai(e,"tensor","tensorScatterupdate"),a=ai(t,"indices","tensorScatterupdate","int32"),i=ai(r,"updates","tensorScatterupdate");if(oI(i,a,n.shape),n.dtype!==i.dtype)throw Error(`tensor and updates must have the same dtype, instead they are ${n.dtype} and ${i.dtype}.`);return n5.runKernel(rs,{tensor:n,indices:a,updates:i},{})}}),hi=al({topk_:function(e,t=1,r=!0){let n=ai(e,"x","topk");if(0===n.rank)throw Error("topk() expects the input to be of rank 1 or higher");let a=n.shape[n.shape.length-1];if(t<0)throw Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);let[i,s]=n5.runKernel(rO,{x:n},{k:t,sorted:r});return{values:i,indices:s}}}),hs=al({truncatedNormal_:function(e,t=0,r=1,n,a){if(ep(e),null!=n&&"bool"===n)throw Error("Unsupported data type $ { dtype }");let i=new dC(t,r,n,!0,a),s=iW(e,n);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),ho=al({unique_:function(e,t=0){let r=ai(e,"x","unique","string_or_numeric");A(r.rank>0,()=>"The input tensor must be at least 1D");let[n,a]=n5.runKernel(rD,{x:r},{axis:t});return{values:n,indices:a}}}),hl=al({unsortedSegmentSum_:function(e,t,r){let n=ai(e,"x","unsortedSegmentSum"),a=ai(t,"segmentIds","unsortedSegmentSum","int32");return A(M(r),()=>"numSegments must be of dtype int"),n5.runKernel(rM,{x:n,segmentIds:a},{numSegments:r})}}),hu=al({unstack_:function(e,t=0){let r=ai(e,"x","unstack","string_or_numeric");return A(t>=-r.shape.length&&t<r.shape.length,()=>`Axis = ${t} is not in [-${r.shape.length}, ${r.shape.length})`),n5.runKernel(rL,{value:r},{axis:t})}});function hd(e,t){return uq(e,t,"right")}function hh(e,t=!0,r,n){return n5.makeVariable(e,t,r,n)}function hp(e,t){let r=[];for(let e=0;e<t.length;e++)t[e]&&r.push(e);let n=iW(e,"int32"),a=iW([r.length,e.length],"int32");for(let t=0;t<r.length;t++){let i=n.indexToLoc(r[t]),s=t*e.length;a.values.set(i,s)}return a.toTensor()}const hc=async function(e){let t=ai(e,"condition","whereAsync","bool"),r=await t.data(),n=hp(t.shape,r);return e!==t&&t.dispose(),n};var hf={};l(hf,"booleanMaskAsync",()=>hm);const hm=async function(e,t,r){let n=ai(e,"tensor","boolMask"),a=ai(t,"mask","boolMask","bool"),i=null==r?0:r,s=a.rank,o=n.shape;A(s>0,()=>"mask cannot be scalar"),_(o.slice(i,i+s),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=i;e<i+s;e++)l*=o[e];let u=sV(n,o.slice(0,i).concat([l],o.slice(i+s))),d=sV(a,[-1]),h=await hc(d),p=d6(h,[1]),c=uI(u,p,i);return e!==n&&n.dispose(),t!==a&&a.dispose(),p.dispose(),u.dispose(),d.dispose(),h.dispose(),c};var hg={};l(hg,"transpose",()=>hy);const hy=al({transpose_:function(e,t,r){let n=ai(e,"x","transpose");if(null==t&&(t=n.shape.map((e,t)=>t).reverse()),A(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{A(e>=0&&e<n.rank,()=>`All entries in 'perm' must be between 0 and ${n.rank-1} but got ${t}`)}),n.rank<=1)return n.clone();let a={perm:t};return"complex64"===n.dtype?af(()=>{let e=dO(n),t=uN(n);return e=n5.runKernel(rP,{x:e},a),t=n5.runKernel(rP,{x:t},a),r&&(t=uM(t)),au(e,t)}):n5.runKernel(rP,{x:n},a)}});var hx={};l(hx,"movingAverage",()=>hb);const hb=al({movingAverage_:function(e,t,r,n,a=!0){let i=ai(e,"v","movingAverage"),s=ai(t,"x","movingAverage"),o=ai(r,"decay","movingAverage");A(i.dtype===s.dtype,()=>`The dtypes of the first(${i.dtype}) and second(${s.dtype}) input must match`),A(L(i.shape,s.shape),()=>"Shape mismatch in v and x");let l=i0(1),u=i7(l,o),d=iX(i7(s,i),u);return a&&(A(null!=n,()=>"When using zeroDebias: true, step is required."),d=iq(d,i7(l,i8(o,ai(n,"step","movingAverage"))))),ij(i,d)}});var hv={};l(hv,"scatterND",()=>hw);const hw=al({scatterND_:function(e,t,r){ep(r);let n=ai(e,"indices","scatterND","int32"),a=ai(t,"updates","scatterND");return oI(a,n,r),n5.runKernel(ri,{indices:n,updates:a},{shape:r})}});var hS={};l(hS,"sparseToDense",()=>hk);const hk=al({sparseToDense_:function(e,t,r,n=0){ep(r);let a=ai(e,"sparseIndices","sparseToDense","int32"),i=ai(t,"sparseValues","sparseToDense","string_or_numeric"),s=ai(n,"defaultValue","sparseToDense",i.dtype);if("int32"!==a.dtype)throw Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${a.dtype}.`);if(a.rank>2)throw Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${a.shape}.`);let o=a.rank>0?a.shape[0]:1,l=a.rank>1?a.shape[1]:1;if(r.length!==l)throw Error(`outputShape has incorrect number of elements:, ${r.length}, should be: ${l}.`);let u=i.size;if(0!==i.rank&&(1!==i.rank||u!==o))throw Error(`sparseValues has incorrect shape ${i.shape}, should be [] or [${o}]`);if(i.dtype!==s.dtype)throw Error("sparseValues.dtype must match defaultValues.dtype");return n5.runKernel(rk,{sparseIndices:a,sparseValues:i,defaultValue:s},{outputShape:r})}});var hC={};l(hC,"gatherND",()=>hI);const hI=al({gatherND_:function(e,t){let r=ai(t,"indices","gatherND","int32"),n=ai(e,"x","gatherND","string_or_numeric");return n5.runKernel(tf,{params:n,indices:r})}});var hT={};l(hT,"dropout",()=>h$);const h$=al({dropout_:function(e,t,r,n){let a=ai(e,"x","dropout");if(A("float32"===a.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),A(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof nj?a.clone():a;let i=function(e,t){if(null==t)return e.shape.slice();if(L(e.shape,t))return t;if(e.shape.length===t.length){let r=[];for(let n=0;n<e.shape.length;n++)null==t[n]&&null!=e.shape[n]?r.push(e.shape[n]):r.push(t[n]);return r}return t}(a,r),s=1-t;return iX(a,iq(uC(ij(dR(i,0,1,"float32",n),s)),s))}});var hN={};function hE(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function hR(e,t,r){let n=1-e%2,a=new Float32Array(e);for(let i=0;i<e;++i){let s=2*Math.PI*i/(e+n-1);a[i]=t-r*Math.cos(s)}return d9(a,"float32")}l(hN,"enclosingPowerOfTwo",()=>hE),l(hN,"cosineWindow",()=>hR);var hA={};l(hA,"inTopKAsync",()=>h_);const h_=async function(e,t,r=1){let n=ai(e,"predictions","inTopK"),a=ai(t,"targets","inTopK");A(n.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${n.rank}`),A(n.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${n.rank} and targets rank ${a.rank}`),_(n.shape.slice(0,n.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let i=n.shape[n.shape.length-1];A(r>0&&r<=i,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${r}`);let s=await n.data(),o=await a.data(),[l,u]=[s.length/i,i],d=q("bool",l);for(let e=0;e<l;e++){let t=e*u,n=s.subarray(t,t+u),a=[];for(let e=0;e<n.length;e++)a.push({value:n[e],index:e});a.sort((e,t)=>t.value-e.value),d[e]=0;for(let t=0;t<r;t++)if(a[t].index===o[e]){d[e]=1;break}}return e!==n&&n.dispose(),t!==a&&a.dispose(),ah(d,a.shape,"bool")};var hO={};l(hO,"conv2d",()=>hP),l(hO,"depthwiseConv2d",()=>hM),l(hO,"matMul",()=>hB);const hF=al({conv2DBackpropFilter_:function(e,t,r,n,a,i="NHWC",s){let o=e;3===e.rank&&(o=sV(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=sV(t,[1,t.shape[0],t.shape[1],t.shape[2]])),A(4===o.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`),A(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),A(4===r.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${r}.`);let u="NHWC"===i?o.shape[3]:o.shape[1],d="NHWC"===i?l.shape[3]:l.shape[1];A(u===r[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${r[2]}.`),A(d===r[3],()=>`Error in conv2dDerFilter: depth of dy (${d}) must match output depth for filter (${r[3]}).`),sD("conv2dDerFilter",a,s);let h={x:o,dy:l};return n5.runKernel(eX,h,{strides:n,pad:a,dataFormat:i,dimRoundingMode:s,filterShape:r})}}),hP=al({fusedConv2d_:function({x:e,filter:t,strides:r,pad:n,dataFormat:a="NHWC",dilations:i=[1,1],dimRoundingMode:s,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:d}){let h,p;if(l=l||"linear",!1===sY(n5.state.gradientDepth,l)){A("NHWC"===a,()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let h=l3(e,t,r,n,a,i,s);return null!=o&&(h=ij(h,o)),sX(h,l,u,d)}let c=ai(e,"x","conv2d","float32"),f=ai(t,"filter","conv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=sV(c,[1,c.shape[0],c.shape[1],c.shape[2]])),A(4===m.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`),A(4===f.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`),sD("fused conv2d",n,s);let y="NHWC"===a?m.shape[3]:m.shape[1];A(f.shape[2]===y,()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`),A(sO(r,i),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`);let x=sI(m.shape,f.shape,r,i,n,s);if(null!=o&&(h=ai(o,"bias","fused conv2d"),[h]=n0(h,c),"NHWC"===a?sn(x.outShape,h.shape):(A(h.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${h.shape.length}.`),A(0===h.shape.length||h.shape[0]===x.outChannels||1===h.shape[0],()=>`Error in fused conv2d: bias shape (${h.shape}) is not compatible with the number of output channels (${x.outChannels})`))),null!=u){let e=u.shape;if(A(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)A(1===e[0]||e[0]===x.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${x.outChannels}).`);else if(3===e.length)try{sn(e,x.outShape)}catch(t){throw Error(`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${x.outShape}).`)}p=ai(u,"prelu weights","fused conv2d")}let b=(e,t)=>{A("NHWC"===a,()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`);let[s,o,u,d]=t,h=sK(e,u,l);A(s_(i),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`);let p=[l6(o.shape,h,s,r,n),hF(o,h,s.shape,r,n)];if(null!=d){let e=sq(d,h);p.push(e)}return p},v={x:m,filter:f,bias:h,preluActivationWeights:p},w={strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s,activation:l,leakyreluAlpha:d};return null==o?iJ((e,t,r)=>{let n=n5.runKernel(rG,v,w);return r([t,e,n]),g&&(n=sV(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:b}})(m,f):iJ((e,t,r,n)=>{let a=n5.runKernel(rG,v,w);return n([t,e,a,r]),g&&(a=sV(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}})(m,f,h)}}),hD=al({depthwiseConv2dNativeBackpropFilter_:function(e,t,r,n,a,i=[1,1],s){let o=e;3===e.rank&&(o=sV(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=sV(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:o,dy:l};return n5.runKernel(e8,u,{strides:n,pad:a,dimRoundingMode:s,dilations:i,filterShape:r})}}),hL=al({depthwiseConv2dNativeBackpropInput_:function(e,t,r,n,a,i=[1,1],s){let o=t,l=!1;3===t.rank&&(l=!0,o=sV(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:o,filter:r},d=n5.runKernel(e7,u,{strides:n,pad:a,dimRoundingMode:s,dilations:i,inputShape:e});return l?sV(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),hM=al({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:r,pad:n,dataFormat:a="NHWC",dilations:i=[1,1],dimRoundingMode:s,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:d}){let h,p;if(!1===sY(n5.state.gradientDepth,l)){let h=us(e,t,r,n,a,i,s);return null!=o&&(h=ij(h,o)),sX(h,l,u,d)}let c=ai(e,"x","depthwiseConv2d","float32"),f=ai(t,"filter","depthwiseConv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=sV(c,[1,c.shape[0],c.shape[1],c.shape[2]])),A(4===m.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),A(4===f.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`),A(m.shape[3]===f.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`),null==i&&(i=[1,1]),A(sO(r,i),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`),sD("fused depthwiseConv2d",n,s);let y=sI(m.shape,f.shape,r,i,n,s,!0);null!=o&&(h=ai(o,"bias","fused conv2d"),[h]=n0(h,c),sn(y.outShape,h.shape)),null!=u&&(p=ai(u,"prelu weights","fused depthwiseConv2d"));let x=(e,t)=>{A(s_(i),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);let[a,o,u,d]=t,p=sK(e,u,l),c=hL(o.shape,p,a,r,n,i,s),f=hD(o,p,a.shape,r,n,i,s);return null!=d?[c,f,sq(h,p)]:[c,f]},b={x:m,filter:f,bias:h,preluActivationWeights:p},v={strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s,activation:l,leakyreluAlpha:d};return null==o?iJ((e,t,r)=>{let n=n5.runKernel(rH,b,v);return r([t,e,n]),g&&(n=sV(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:x}})(m,f):iJ((e,t,r,n)=>{let a=n5.runKernel(rH,b,v);return n([t,e,a,r]),g&&(a=sV(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}})(m,f,h)}}),hB=al({fusedMatMul_:function({a:e,b:t,transposeA:r=!1,transposeB:n=!1,bias:a,activation:i="linear",preluActivationWeights:s,leakyreluAlpha:o=.2}){let l,u;if(!1===sY(n5.state.gradientDepth,i)){let l=lz(e,t,r,n);return null!=a&&(l=ij(l,a)),sX(l,i,s,o)}let d=ai(e,"a","fused matMul"),h=ai(t,"b","fused matMul");[d,h]=n0(d,h);let p=r?d.shape[d.rank-2]:d.shape[d.rank-1],c=n?h.shape[h.rank-1]:h.shape[h.rank-2],f=r?d.shape[d.rank-1]:d.shape[d.rank-2],m=n?h.shape[h.rank-2]:h.shape[h.rank-1],g=d.shape.slice(0,-2),y=h.shape.slice(0,-2),x=F(g),b=F(y);A(p===c,()=>`Error in fused matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${d.shape} and ${h.shape} and transposeA=${r} and transposeB=${n} must match.`);let v=sn(d.shape.slice(0,-2),h.shape.slice(0,-2)).concat([f,m]),w=r?sV(d,[x,p,f]):sV(d,[x,f,p]),S=n?sV(h,[b,m,c]):sV(h,[b,c,m]);null!=a&&(l=ai(a,"bias","fused matMul"),[l]=n0(l,d),sn(v,l.shape)),null!=s&&(u=ai(s,"prelu weights","fused matMul"));let k=(e,t)=>{let s,o,[l,u,d,h]=t,p=sK(sV(e,d.shape),d,i);return(r||n?!r&&n?(s=lz(p,u,!1,!1),o=lz(p,l,!0,!1)):r&&!n?(s=lz(u,p,!1,!0),o=lz(l,p,!1,!1)):(s=lz(u,p,!0,!0),o=lz(p,l,!0,!0)):(s=lz(p,u,!1,!0),o=lz(l,p,!0,!1)),null!=a)?[s,o,sq(h,p)]:[s,o]},C={a:w,b:S,bias:l,preluActivationWeights:u},I={transposeA:r,transposeB:n,activation:i,leakyreluAlpha:o};return null==a?iJ((e,t,r)=>{let n=n5.runKernel(rV,C,I);return r([e,t,n]),{value:sV(n,v),gradFunc:k}})(w,S):iJ((e,t,r,n)=>{let a=n5.runKernel(rV,C,I);return n([e,t,a,r]),{value:sV(a,v),gradFunc:k}})(w,S,l)}}),hz=al({hammingWindow_:function(e){return hR(e,.54,.46)}}),hU=al({hannWindow_:function(e){return hR(e,.5,.5)}}),hW=al({frame_:function(e,t,r,n=!1,a=0){let i=0,s=[];for(;i+t<=e.size;)s.push(lU(e,i,t)),i+=r;if(n)for(;i<e.size;){let n=i+t-e.size,o=lk([lU(e,i,t-n),i5([n],a)]);s.push(o),i+=r}return 0===s.length?he([],[0,t]):sV(lk(s),[s.length,t])}}),hV=al({stft_:function(e,t,r,n,a=hU){return null==n&&(n=hE(t)),d3(iX(hW(e,t,r),a(t)),n)}}),hG=al({cropAndResize_:function(e,t,r,n,a="bilinear",i=0){let s=ai(e,"image","cropAndResize"),o=ai(t,"boxes","cropAndResize","float32"),l=ai(r,"boxInd","cropAndResize","int32"),u=o.shape[0];return A(4===s.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${s.rank}.`),A(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),A(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),A(2===n.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`),A(n[0]>=1&&n[1]>=1,()=>`cropSize must be atleast [1,1], but was ${n}`),A("bilinear"===a||"nearest"===a,()=>`method must be bilinear or nearest, but was ${a}`),n5.runKernel(e3,{image:s,boxes:o,boxInd:l},{method:a,extrapolationValue:i,cropSize:n})}}),hH=al({flipLeftRight_:function(e){let t=ai(e,"image","flipLeftRight","float32");return A(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),n5.runKernel(tu,{image:t},{})}}),hj=al({grayscaleToRGB_:function(e){let t=ai(e,"image","grayscaleToRGB"),r=t.rank-1,n=t.shape[r];A(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),A(1===n,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`);let a=Array(t.rank);return a.fill(1,0,r),a[r]=3,uS(t,a)}}),hK=al({rgbToGrayscale_:function(e){let t,r=ai(e,"image","RGBToGrayscale"),n=r.rank-1,a=r.shape[n];A(r.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${r.rank}.`),A(3===a,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${a}.`);let i=r.dtype,s=iV(r,"float32"),o=d9([.2989,.587,.114]);switch(r.rank){case 2:t=uc("ij,j->i",s,o);break;case 3:t=uc("ijk,k->ij",s,o);break;case 4:t=uc("ijkl,l->ijk",s,o);break;case 5:t=uc("ijklm,m->ijkl",s,o);break;case 6:t=uc("ijklmn,n->ijklm",s,o);break;default:throw Error("Not a valid tensor rank.")}return iV(t=lI(t,-1),i)}}),hq=al({rotateWithOffset_:function(e,t,r=0,n=.5){let a=ai(e,"image","rotateWithOffset","float32");return A(4===a.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`),n5.runKernel(rW,{image:a},{radians:t,fillValue:r,center:n})}});function hX(e,t,r,n,a,i){null==n&&(n=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==i&&(i=0);let s=e.shape[0];return r=Math.min(r,s),A(0<=n&&n<=1,()=>`iouThreshold must be in [0, 1], but was '${n}'`),A(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),A(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),A(1===t.rank,()=>"scores must be a 1D tensor"),A(t.shape[0]===s,()=>`scores has incompatible shape with boxes. Expected ${s}, but was ${t.shape[0]}`),A(0<=i&&i<=1,()=>`softNmsSigma must be in [0, 1], but was '${i}'`),{maxOutputSize:r,iouThreshold:n,scoreThreshold:a,softNmsSigma:i}}const hY=al({nonMaxSuppression_:function(e,t,r,n=.5,a=Number.NEGATIVE_INFINITY){let i=ai(e,"boxes","nonMaxSuppression","float32"),s=ai(t,"scores","nonMaxSuppression","float32"),o=hX(i,s,r,n,a);r=o.maxOutputSize;let l={maxOutputSize:r,iouThreshold:n=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return n5.runKernel(tG,{boxes:i,scores:s},l)}});function hQ(e,t){return e>t?1:e<t?-1:0}function hZ(e,t,r,n,a){return h1(e,t,r,n,a,0)}function hJ(e,t,r,n,a,i){return h1(e,t,r,n,a,0,!1,i,!0)}function h0(e,t,r,n,a,i){return h1(e,t,r,n,a,i,!0)}function h1(e,t,r,n,a,i,s=!1,o=!1,l=!1){let u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(h2);let d=i>0?-.5/i:0,h=[],p=[];for(;h.length<r&&u.length>0;){let t=u.pop(),{score:r,boxIndex:i,suppressBeginIndex:s}=t;if(r<a)break;let o=!1;for(let r=h.length-1;r>=s;--r){let s=function(e,t,r){let n=e.subarray(4*t,4*t+4),a=e.subarray(4*r,4*r+4),i=Math.min(n[0],n[2]),s=Math.min(n[1],n[3]),o=Math.max(n[0],n[2]),l=Math.max(n[1],n[3]),u=Math.min(a[0],a[2]),d=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),c=(o-i)*(l-s),f=(h-u)*(p-d);if(c<=0||f<=0)return 0;let m=Math.max(Math.min(o,h)-Math.max(i,u),0)*Math.max(Math.min(l,p)-Math.max(s,d),0);return m/(c+f-m)}(e,i,h[r]);if(s>=n){o=!0;break}if(t.score=t.score*function(e,t,r){let n=Math.exp(t*r*r);return r<=e?n:0}(n,d,s),t.score<=a)break}t.suppressBeginIndex=h.length,!o&&(t.score===r?(h.push(i),p.push(t.score)):t.score>a&&function(e,t,r){let n=function(e,t,r){let n=0,a=e.length,i=0,s=!1;for(;n<a;){let o=r(t,e[i=n+(a-n>>>1)]);o>0?n=i+1:(a=i,s=!o)}return s?n:-n-1}(e,t,r||hQ);e.splice(n<0?-(n+1):n,0,t)}(u,t,h2))}let c=h.length,f=r-c;o&&f>0&&(h.push(...Array(f).fill(0)),p.push(...Array(f).fill(0)));let m={selectedIndices:h};return s&&(m.selectedScores=p),l&&(m.validOutputs=c),m}function h2(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}async function h3(e,t,r,n=.5,a=Number.NEGATIVE_INFINITY){let i=ai(e,"boxes","nonMaxSuppressionAsync"),s=ai(t,"scores","nonMaxSuppressionAsync"),o=hX(i,s,r,n,a);r=o.maxOutputSize,n=o.iouThreshold,a=o.scoreThreshold;let l=await Promise.all([i.data(),s.data()]),{selectedIndices:u}=hZ(l[0],l[1],r,n,a);return i!==e&&i.dispose(),s!==t&&s.dispose(),d9(u,"int32")}const h4=al({nonMaxSuppressionWithScore_:function(e,t,r,n=.5,a=Number.NEGATIVE_INFINITY,i=0){let s=ai(e,"boxes","nonMaxSuppression"),o=ai(t,"scores","nonMaxSuppression"),l=hX(s,o,r,n,a,i);r=l.maxOutputSize,n=l.iouThreshold,a=l.scoreThreshold;let u={maxOutputSize:r,iouThreshold:n,scoreThreshold:a,softNmsSigma:i=l.softNmsSigma},d=n5.runKernel(tj,{boxes:s,scores:o},u);return{selectedIndices:d[0],selectedScores:d[1]}}});async function h6(e,t,r,n=.5,a=Number.NEGATIVE_INFINITY,i=0){let s=ai(e,"boxes","nonMaxSuppressionAsync"),o=ai(t,"scores","nonMaxSuppressionAsync"),l=hX(s,o,r,n,a,i);r=l.maxOutputSize,n=l.iouThreshold,a=l.scoreThreshold,i=l.softNmsSigma;let u=await Promise.all([s.data(),o.data()]),{selectedIndices:d,selectedScores:h}=h0(u[0],u[1],r,n,a,i);return s!==e&&s.dispose(),o!==t&&o.dispose(),{selectedIndices:d9(d,"int32"),selectedScores:d9(h)}}const h5=al({nonMaxSuppressionPadded_:function(e,t,r,n=.5,a=Number.NEGATIVE_INFINITY,i=!1){let s=ai(e,"boxes","nonMaxSuppression"),o=ai(t,"scores","nonMaxSuppression"),l=hX(s,o,r,n,a,null),u=l.maxOutputSize,d=l.iouThreshold,h=l.scoreThreshold,p=n5.runKernel(tH,{boxes:s,scores:o},{maxOutputSize:u,iouThreshold:d,scoreThreshold:h,padToMaxOutputSize:i});return{selectedIndices:p[0],validOutputs:p[1]}}});async function h8(e,t,r,n=.5,a=Number.NEGATIVE_INFINITY,i=!1){let s=ai(e,"boxes","nonMaxSuppressionAsync"),o=ai(t,"scores","nonMaxSuppressionAsync"),l=hX(s,o,r,n,a,null),u=l.maxOutputSize,d=l.iouThreshold,h=l.scoreThreshold,[p,c]=await Promise.all([s.data(),o.data()]),{selectedIndices:f,validOutputs:m}=hJ(p,c,u,d,h,i);return s!==e&&s.dispose(),o!==t&&o.dispose(),{selectedIndices:d9(f,"int32"),validOutputs:i0(m,"int32")}}const h7=al({resizeBilinear_:function(e,t,r=!1,n=!1){let a=ai(e,"images","resizeBilinear");A(3===a.rank||4===a.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),A(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),A(!1===n||!1===r,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let i=a,s=!1;3===a.rank&&(s=!0,i=sV(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:i},l=n5.runKernel(t9,o,{alignCorners:r,halfPixelCenters:n,size:t});return s?sV(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),h9=al({resizeNearestNeighbor_:function(e,t,r=!1,n=!1){let a=ai(e,"images","resizeNearestNeighbor");A(3===a.rank||4===a.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),A(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),A("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),A(!1===n||!1===r,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let i=a,s=!1;3===a.rank&&(s=!0,i=sV(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:i},l=n5.runKernel(t8,o,{alignCorners:r,halfPixelCenters:n,size:t});return s?sV(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),pe=al({threshold_:function(e,t="binary",r=!1,n=.5){let a,i,s,o,l=ai(e,"image","threshold"),u=l.shape[0]*l.shape[1],d=iX(d9([n]),255);if(A(3===l.rank,()=>`Error in threshold: image must be rank 3,but got rank ${l.rank}.`),A(3===l.shape[2]||1===l.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${l.shape[2]}.`),A("int32"===l.dtype||"float32"===l.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${l.dtype}.`),A("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===l.shape[2]){[a,i,s]=d2(l,[1,1,1],-1);let e=iX(a,.2989),t=iX(i,.587),r=iX(s,.114);o=ij(ij(e,t),r)}else o=e;return"otsu"===t&&(d=function(e,t){let r,n,a,i,s,o,l=d9([-1]),u=d9([0]),d=d9([0]);for(let h=0;h<e.size-1;h++){r=lU(e,0,h+1),n=lU(e,h+1),s=iq(sj(r),t),o=iq(sj(n),t),a=iq(sj(iX(r,d_(0,r.size))),sj(r));let p=i5(n.shape,r.size),c=ij(d_(0,n.size),p),f=i7(a,i=iq(sj(iX(n,c)),sj(n))),m=i7(a,i),g=iX(s,o),y=uT(d=iX(iX(g,f),m),u);u=ud(y,d,u),l=ud(y,d9([h]),l)}return l}(lX(iV(dz(o),"int32"),ah([]),256),u)),iV(iX(r?uO(o,d):uT(o,d),255),"int32")}}),pt=al({transform_:function(e,t,r="nearest",n="constant",a=0,i){let s=ai(e,"image","transform","float32"),o=ai(t,"transforms","transform","float32");return A(4===s.rank,()=>`Error in transform: image must be rank 4,but got rank ${s.rank}.`),A(2===o.rank&&(o.shape[0]===s.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),A(null==i||2===i.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${i}.`),n5.runKernel(rF,{image:s,transforms:o},{interpolation:r,fillMode:n,fillValue:a,outputShape:i})}}),pr=al({bandPart_:function(e,t,r){let n,a,i=ai(e,"a","bandPart");A(i.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${i.rank}.`);let s=i.shape,[o,l]=i.shape.slice(-2);"number"==typeof t?(A(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),A(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),n=ai(t<0?o:t,"numLower","bandPart")):(A("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),n=ud(u_(t,0),o,u3(t,o))),"number"==typeof r?(A(r%1==0,()=>`bandPart(): numUpper must be an integer, got ${r}.`),A(r<=l,()=>`bandPart(): numUpper (${r}) must not be greater than the number of columns (${l}).`),a=ai(r<0?l:r,"numUpper","bandPart")):(A("int32"===r.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),a=ud(u_(r,0),l,u3(r,l)));let u=i7(sV(d_(0,o,1,"int32"),[-1,1]),d_(0,l,1,"int32")),d=uV(uO(u,n),u$(u,uM(a))),h=u0([o,l],i.dtype);return sV(d5(hu(sV(i,[-1,o,l])).map(e=>ud(d,e,h))),s)}}),pn=al({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,A(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let r=e[0].shape[0];for(let t=1;t<e.length;++t)A(e[t].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${r})`)}else t=!0,e=d2(e,e.shape[0],0).map(e=>d6(e,[0]));A(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);let r=[],n=e;for(let t=0;t<e.length;++t)r.push(n5.tidy(()=>{let e=n[t];if(t>0)for(let n=0;n<t;++n){let t=iX(sj(iX(r[n],e)),r[n]);e=i7(e,t)}return iq(e,ub(e,"euclidean"))}));return t?d5(r,0):r}});function pa(e,t=!1){return n5.tidy(()=>{A(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);let r=e.shape[0],n=e.shape[1],a=uk(r),i=iG(e),s=he([[1]],[1,1]),o=iG(s),l=r>=n?n:r;for(let e=0;e<l;++e){let t=i,l=o,u=a;[o,i,a]=n5.tidy(()=>{let t=lU(i,[e,e],[r-e,1]),l=ub(t),u=lU(i,[e,e],[1,1]),d=ud(uT(u,0),he([[-1]]),he([[1]])),h=i7(u,iX(d,l)),p=iq(t,h);o=1===p.shape[0]?iG(s):lk([s,lU(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);let c=uM(iq(lz(d,h),l)),f=lU(i,[e,0],[r-e,n]),m=iX(c,o),g=hy(o);if(0===e)i=i7(f,lz(m,lz(g,f)));else{let t=i7(f,lz(m,lz(g,f)));i=lk([lU(i,[0,0],[e,n]),t],0)}let y=hy(m),x=lU(a,[0,e],[r,a.shape[1]-e]);if(0===e)a=i7(x,lz(lz(x,o),y));else{let t=i7(x,lz(lz(x,o),y));a=lk([lU(a,[0,0],[r,e]),t],1)}return[o,i,a]}),am([t,l,u])}return!t&&r>n&&(a=lU(a,[0,0],[r,n]),i=lU(i,[0,0],[n,n])),[a,i]})}const pi=al({qr_:function(e,t=!1){if(A(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return pa(e,t);{let r=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),n=hu(sV(e,[r,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],i=[];return n.forEach(e=>{let[r,n]=pa(e,t);a.push(r),i.push(n)}),[sV(d5(a,0),e.shape),sV(d5(i,0),e.shape)]}}});(Tw=TV||(TV={}))[Tw.NONE=0]="NONE",Tw[Tw.MEAN=1]="MEAN",Tw[Tw.SUM=2]="SUM",Tw[Tw.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const ps=al({computeWeightedLoss_:function(e,t,r=TV.SUM_BY_NONZERO_WEIGHTS){let n=ai(e,"losses","computeWeightedLoss"),a=null;null!=t&&(a=ai(t,"weights","computeWeightedLoss"));let i=null==a?n:iX(n,a);if(r===TV.NONE)return i;if(r===TV.SUM)return sj(i);if(r===TV.MEAN)if(null==a)return uJ(i);else{let e=n.size/a.size,t=iq(sj(i),sj(a));return e>1?iq(t,i0(e)):t}if(r===TV.SUM_BY_NONZERO_WEIGHTS)if(null==a)return iq(sj(i),i0(n.size));else{let e=iV(sj(u9(iX(a,u1(n.shape)),i0(0))),"float32");return iq(sj(i),e)}throw Error(`Unknown reduction: ${r}`)}}),po=al({absoluteDifference_:function(e,t,r,n=TV.SUM_BY_NONZERO_WEIGHTS){let a=ai(e,"labels","absoluteDifference"),i=ai(t,"predictions","absoluteDifference"),s=null;return null!=r&&(s=ai(r,"weights","absoluteDifference")),_(a.shape,i.shape,"Error in absoluteDifference: "),ps(i9(i7(a,i)),s,n)}}),pl=al({cosineDistance_:function(e,t,r,n,a=TV.SUM_BY_NONZERO_WEIGHTS){let i=ai(e,"labels","cosineDistance"),s=ai(t,"predictions","cosineDistance"),o=null;return null!=n&&(o=ai(n,"weights","cosineDistance")),_(i.shape,s.shape,"Error in cosineDistance: "),ps(i7(i0(1),sj(iX(i,s),r,!0)),o,a)}}),pu=al({hingeLoss_:function(e,t,r,n=TV.SUM_BY_NONZERO_WEIGHTS){let a=ai(e,"labels","hingeLoss"),i=ai(t,"predictions","hingeLoss"),s=null;null!=r&&(s=ai(r,"weights","hingeLoss")),_(a.shape,i.shape,"Error in hingeLoss: ");let o=i0(1);return a=i7(iX(i0(2),a),o),ps(sU(i7(o,iX(a,i))),s,n)}}),pd=al({huberLoss_:function(e,t,r,n=1,a=TV.SUM_BY_NONZERO_WEIGHTS){let i=ai(e,"labels","huberLoss"),s=ai(t,"predictions","huberLoss"),o=null;null!=r&&(o=ai(r,"weights","huberLoss")),_(i.shape,s.shape,"Error in huberLoss: ");let l=i0(n),u=i9(i7(s,i)),d=u3(u,l),h=i7(u,d);return ps(ij(iX(i0(.5),iQ(d)),iX(l,h)),o,a)}}),ph=al({logLoss_:function(e,t,r,n=1e-7,a=TV.SUM_BY_NONZERO_WEIGHTS){let i=ai(e,"labels","logLoss"),s=ai(t,"predictions","logLoss"),o=null;null!=r&&(o=ai(r,"weights","logLoss")),_(i.shape,s.shape,"Error in logLoss: ");let l=i0(1),u=i0(n),d=uM(iX(i,uD(ij(s,u)))),h=iX(i7(l,i),uD(ij(i7(l,s),u)));return ps(i7(d,h),o,a)}}),pp=al({meanSquaredError_:function(e,t,r,n=TV.SUM_BY_NONZERO_WEIGHTS){let a=ai(e,"labels","meanSquaredError"),i=ai(t,"predictions","meanSquaredError"),s=null;return null!=r&&(s=ai(r,"weights","meanSquaredError")),_(a.shape,i.shape,"Error in meanSquaredError: "),ps(d4(a,i),s,n)}}),pc=al({sigmoidCrossEntropy_:function(e,t,r,n=0,a=TV.SUM_BY_NONZERO_WEIGHTS){let i=ai(e,"multiClassLabels","sigmoidCrossEntropy"),s=ai(t,"logits","sigmoidCrossEntropy"),o=null;if(null!=r&&(o=ai(r,"weights","sigmoidCrossEntropy")),_(i.shape,s.shape,"Error in sigmoidCrossEntropy: "),n>0){let e=i0(n),t=i0(1),r=i0(.5);i=ij(iX(i,i7(t,e)),iX(r,e))}return ps(function(e,t){let r=ai(e,"labels","sigmoidCrossEntropyWithLogits"),n=ai(t,"logits","sigmoidCrossEntropyWithLogits");_(r.shape,n.shape,"Error in sigmoidCrossEntropyWithLogits: ");let a=sU(n),i=iX(n,r),s=uL(lC(uM(i9(n))));return ij(i7(a,i),s)}(i,s),o,a)}}),pf=al({softmaxCrossEntropy_:function(e,t,r,n=0,a=TV.SUM_BY_NONZERO_WEIGHTS){let i=ai(e,"onehotLabels","softmaxCrossEntropy"),s=ai(t,"logits","softmaxCrossEntropy"),o=null;if(null!=r&&(o=ai(r,"weights","softmaxCrossEntropy")),_(i.shape,s.shape,"Error in softmaxCrossEntropy: "),n>0){let e=i0(n),t=i0(1),r=i0(i.shape[1]);i=ij(iX(i,i7(t,e)),iq(e,r))}return ps(function(e,t,r=-1){if(-1===r&&(r=t.rank-1),r!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${r}`);return iJ((e,t,n)=>{let a=uW(t,[r],!0),i=i7(iV(t,"float32"),a);return n([e,i]),{value:sj(uM(iX(i,e)),[r]),gradFunc:(e,t)=>{let[n,a]=t,i=sc(e.shape,[r]);return[iX(sV(e,i),i7(iV(n,"float32"),lC(a))),iX(sV(e,i),i7(lC(a),iV(n,"float32")))]}}})(e,t)}(i,s),o,a)}}),pm=al({sparseFillEmptyRows_:function(e,t,r,n){let a=ai(e,"indices","sparseFillEmptyRows","int32"),i=ai(t,"values","sparseFillEmptyRows"),s=ai(r,"denseShape","sparseFillEmptyRows","int32"),o=ai(n,"defaultValue","sparseFillEmptyRows",i.dtype);if(2!==a.rank)throw Error(`Indices should be Tensor2D but received shape
        ${a.shape}`);if(1!==i.rank)throw Error(`Values should be Tensor1D but received shape ${i.shape}`);if(1!==s.rank)throw Error(`Dense shape should be Tensor1D but received shape ${s.shape}`);if(0!==o.rank)throw Error(`Default value should be a scalar but received shape ${o.shape}`);let l=n5.runKernel(rb,{indices:a,values:i,denseShape:s,defaultValue:o});return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),pg=al({sparseReshape_:function(e,t,r){let n=ai(e,"inputIndices","sparseReshape","int32"),a=ai(t,"inputShape","sparseReshape","int32"),i=ai(r,"newShape","sparseReshape","int32");if(2!==n.rank)throw Error(`Input indices should be Tensor2D but received shape
        ${n.shape}`);if(1!==a.rank)throw Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw Error(`New shape should be Tensor1D but received shape ${i.shape}`);let s=n5.runKernel(rv,{inputIndices:n,inputShape:a,newShape:i});return{outputIndices:s[0],outputShape:s[1]}}}),py=al({sparseSegmentMean_:function(e,t,r){let n=ai(e,"data","sparseSegmentMean"),a=ai(t,"indices","sparseSegmentMean","int32"),i=ai(r,"segmentIds","sparseSegmentMean","int32");if(n.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
          ${a.shape}`);if(1!==i.rank)throw Error(`Segment ids should be Tensor1D but received shape
          ${i.shape}`);return n5.runKernel(rw,{data:n,indices:a,segmentIds:i})}}),px=al({sparseSegmentSum_:function(e,t,r){let n=ai(e,"data","sparseSegmentSum"),a=ai(t,"indices","sparseSegmentSum","int32"),i=ai(r,"segmentIds","sparseSegmentSum","int32");if(n.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
         ${a.shape}`);if(1!==i.rank)throw Error(`Segment ids should be Tensor1D but received shape
         ${i.shape}`);return n5.runKernel(rS,{data:n,indices:a,segmentIds:i})}}),pb=al({stringNGrams_:function(e,t,r,n,a,i,s,o){let l=ai(e,"data","stringNGrams","string");if("string"!==l.dtype)throw Error("Data must be of datatype string");if(1!==l.shape.length)throw Error(`Data must be a vector, saw: ${l.shape}`);let u=ai(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw Error("Data splits must be of datatype int32");let d=n5.runKernel(rN,{data:l,dataSplits:u},{separator:r,nGramWidths:n,leftPad:a,rightPad:i,padWidth:s,preserveShortSequences:o});return{nGrams:d[0],nGramsSplits:d[1]}}}),pv=al({stringSplit_:function(e,t,r=!0){let n=ai(e,"input","stringSplit","string"),a=ai(t,"delimiter","stringSplit","string");if(1!==n.rank)throw Error(`Input should be Tensor1D but received shape ${n.shape}`);if(0!==a.rank)throw Error(`Delimiter should be a scalar but received shape ${a.shape}`);let i=n5.runKernel(rE,{input:n,delimiter:a},{skipEmpty:r});return{indices:i[0],values:i[1],shape:i[2]}}}),pw=al({stringToHashBucketFast_:function(e,t){let r=ai(e,"input","stringToHashBucketFast","string");if(t<=0)throw Error("Number of buckets must be at least 1");return n5.runKernel(rR,{input:r},{numBuckets:t})}}),pS=al({staticRegexReplace_:function(e,t,r,n=!0){let a=ai(e,"input","staticRegexReplace","string");return n5.runKernel(rT,{x:a},{pattern:t,rewrite:r,replaceGlobal:n})}}),pk={fft:dJ,ifft:d0,rfft:d3,irfft:d1},pC={hammingWindow:hz,hannWindow:hU,frame:hW,stft:hV},pI={flipLeftRight:hH,grayscaleToRGB:hj,resizeNearestNeighbor:h9,resizeBilinear:h7,rgbToGrayscale:hK,rotateWithOffset:hq,cropAndResize:hG,nonMaxSuppression:hY,nonMaxSuppressionAsync:h3,nonMaxSuppressionWithScore:h4,nonMaxSuppressionWithScoreAsync:h6,nonMaxSuppressionPadded:h5,nonMaxSuppressionPaddedAsync:h8,threshold:pe,transform:pt},pT={bandPart:pr,gramSchmidt:pn,qr:pi},p$={absoluteDifference:po,computeWeightedLoss:ps,cosineDistance:pl,hingeLoss:pu,huberLoss:pd,logLoss:ph,meanSquaredError:pp,sigmoidCrossEntropy:pc,softmaxCrossEntropy:pf},pN={sparseFillEmptyRows:pm,sparseReshape:pg,sparseSegmentMean:py,sparseSegmentSum:px},pE={stringNGrams:pb,stringSplit:pv,stringToHashBucketFast:pw,staticRegexReplace:pS};f(lT,hf),f(lT,hg),f(lT,ug),f(lT,hx),f(lT,hv),f(lT,uK),f(lT,hS),f(lT,hC),f(lT,hT),f(lT,hN),f(lT,hA);var pR={};function pA(e){return new Promise(e=>setTimeout(e)).then(e)}l(pR,"copyModel",()=>iB),l(pR,"listModels",()=>iL),l(pR,"moveModel",()=>iz),l(pR,"removeModel",()=>iM),l(pR,"browserFiles",()=>pF),l(pR,"browserHTTPRequest",()=>pV),l(pR,"CompositeArrayBuffer",()=>ac),l(pR,"concatenateArrayBuffers",()=>il),l(pR,"decodeWeights",()=>ie),l(pR,"decodeWeightsStream",()=>ii),l(pR,"encodeWeights",()=>a9),l(pR,"fromMemory",()=>pK),l(pR,"fromMemorySync",()=>pq),l(pR,"getLoadHandlers",()=>iv),l(pR,"getModelArtifactsForJSON",()=>ip),l(pR,"getModelArtifactsForJSONSync",()=>ih),l(pR,"getModelArtifactsInfoForJSON",()=>ic),l(pR,"getSaveHandlers",()=>ib),l(pR,"getWeightSpecs",()=>im),l(pR,"http",()=>pW),l(pR,"isHTTPScheme",()=>pz),l(pR,"loadWeights",()=>pL),l(pR,"registerLoadRouter",()=>ix),l(pR,"registerSaveRouter",()=>iy),l(pR,"weightsLoaderFactory",()=>pM),l(pR,"withSaveHandler",()=>pX),l(pR,"withSaveHandlerSync",()=>pY);class p_{constructor(e){if(!eb.getBool("IS_BROWSER"))throw Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(p_.URL_SCHEME)&&(e=e.slice(p_.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw Error("Browser downloads are not supported in this environment since `document` is not present");let t=ac.join(e.weightData),r=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let t=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],n=id(e,t),a=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=a,await pA(()=>i.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){let e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=r,await pA(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:ic(e)}}}}p_.URL_SCHEME="downloads://";class pO{constructor(e){if(null==e||e.length<1)throw Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let r=new FileReader;r.onload=r=>{let n=JSON.parse(r.target.result),a=n.modelTopology;return null==a?void t(Error(`modelTopology field is missing from file ${this.jsonFile.name}`)):null==n.weightsManifest?void t(Error(`weightManifest field is missing from file ${this.jsonFile.name}`)):0===this.weightsFiles.length?void e({modelTopology:a}):void e(ip(n,e=>this.loadWeights(e)))},r.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(this.jsonFile)})}loadWeights(e){let t=[],r=[];for(let n of e)t.push(...n.weights),r.push(...n.paths);let n=this.checkManifestAndWeightFiles(e);return Promise.all(r.map(e=>this.loadWeightsFile(e,n[e]))).then(e=>[t,e])}loadWeightsFile(e,t){return new Promise((r,n)=>{let a=new FileReader;a.onload=e=>{r(e.target.result)},a.onerror=t=>n(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){let t=[],r=this.weightsFiles.map(e=>iu(e.name)),n={};for(let a of e)a.paths.forEach(e=>{let a=iu(e);if(-1!==t.indexOf(a))throw Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===r.indexOf(a))throw Error(`Weight file with basename '${a}' is not provided.`);n[e]=this.weightsFiles[r.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}}function pF(e){return new pO(e)}function pP(e,t,r,n){var a,i,s;A(null!=(a=e)&&Array.isArray(a)&&a.length>0,()=>"promises must be a none empty array"),i=r=null==r?0:r,s=n=null==n?1:n,A(i>=0&&i<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${i}`),A(s>=0&&s<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${s}`),A(s>=i,()=>`startFraction must be no more than endFraction, but got startFraction ${i} and endFraction ${s}`);let o=0;return Promise.all(e.map(a=>(a.then(a=>(t(r+ ++o/e.length*(n-r)),a)),a)))}async function pD(e,t){null==t&&(t={});let r=null==t.fetchFunc?eb.platform.fetch:t.fetchFunc,n=e.map(e=>r(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(n):await pP(n,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await pP(a,t.onProgress,.5,1)}async function pL(e,t="",r,n){return pM(e=>pD(e,{requestInit:n}))(e,t,r)}function pM(e){return async(t,r="",n)=>{let a=t.map(()=>!1),i={},s=null!=n?n.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let r=0;e.weights.forEach(e=>{let l=ap["quantization"in e?e.quantization.dtype:e.dtype]*F(e.shape),u=()=>{a[t]=!0,null==i[t]&&(i[t]=[]),i[t].push({manifestEntry:e,groupOffset:r,sizeBytes:l})};null!=n?n.forEach((t,r)=>{t===e.name&&(u(),s[r]=!0)}):u(),o.push(e.name),r+=l})}),!s.every(e=>e)){let e=n.filter((e,t)=>!s[t]);throw Error(`Could not find weights in manifest with names: ${e.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`)}let l=a.reduce((e,t,r)=>(t&&e.push(r),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{let t=r+(r.endsWith("/")?"":"/")+e;u.push(t)})});let d=await e(u),h={},p=0;return l.forEach(e=>{let r=t[e].paths.length,n=new ac(d.slice(p,p+r));i[e].forEach(e=>{let t=ie(n.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(let e in t)h[e]=t[e]}),p+=r}),h}}ig.registerSaveRouter(e=>eb.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(p_.URL_SCHEME)?function(e="model"){return new p_(e)}(e.slice(p_.URL_SCHEME.length)):null);class pB{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(A("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=eb.platform.fetch,A(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&A(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let r=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],n=id(e,r);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){let r=ac.join(e.weightData);t.body.append("model.weights.bin",new Blob([r],{type:"application/octet-stream"}),"model.weights.bin")}let a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:ic(e),responses:[a]};throw Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async loadModelJSON(){let e,t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",Error(e)}let r=e.modelTopology,n=e.weightsManifest;if(null==r&&null==n)throw Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return e}async load(){return this.loadOptions.streamWeights?this.loadStream():ip(await this.loadModelJSON(),e=>this.loadWeights(e))}async loadStream(){let e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),r=im(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:r,getWeightStream:()=>(function(e,t){var r;let n,a=null==t.fetchFunc?eb.platform.fetch:t.fetchFunc,i=0;return null==(r=t.onProgress)||r.call(t,0),new ReadableStream({pull:async r=>{for(var s;i<e.length;){n||(n=(await a(e[i],t.requestInit,{isBinary:!0})).body.getReader());let{done:o,value:l}=await n.read();if(o){i++,n=void 0,null==(s=t.onProgress)||s.call(t,i/e.length);continue}r.enqueue(l);return}r.close()}})})(t,this.loadOptions)})}async getWeightUrls(e){let[t,r]=function(e){let t=e.lastIndexOf("/"),r=e.lastIndexOf("?");return[e.substring(0,t)+"/",r>t?e.substring(r):""]}(Array.isArray(this.path)?this.path[1]:this.path),n=this.weightPathPrefix||t,a=[],i=[];for(let t of e)for(let e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(n+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){let t=await this.getWeightUrls(e);return[im(e),await pD(t,this.loadOptions)]}}function pz(e){return null!=e.match(pB.URL_SCHEME_REGEX)}pB.URL_SCHEME_REGEX=/^https?:\/\//;const pU=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc));else{let r=!0;if(Array.isArray(e)?e.every(e=>pz(e)):pz(e))return pW(e,t)}return null};function pW(e,t){return new pB(e,t)}function pV(e,t){return pW(e,t)}ig.registerSaveRouter(pU),ig.registerLoadRouter(pU);class pG{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class pH{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class pj{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function pK(e,t,r,n){let a=arguments;return new pj(pq(...a))}function pq(e,t,r,n){return 1!=arguments.length?(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new pG({modelTopology:e,weightSpecs:t,weightData:r,trainingConfig:n})):null!=e.modelTopology||null!=e.weightSpecs?new pG(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new pG({modelTopology:e}))}function pX(e){return new pH(e)}function pY(e){return new pH(e)}var pQ={};l(pQ,"nonMaxSuppressionV3Impl",()=>hZ),l(pQ,"nonMaxSuppressionV4Impl",()=>hJ),l(pQ,"nonMaxSuppressionV5Impl",()=>h0),l(pQ,"whereImpl",()=>hp);const pZ="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();for(const e of ss)!function(e,t,r){A(null!=e.className,()=>"Class being registered does not have the static className property defined."),A("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),A(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),void 0===t&&(t="Custom"),void 0===r&&(r=e.className);let n=t+">"+r;i4.register(e),i1.set(n,e),i2.set(e,n)}(e);const pJ={},p0={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function p1(e,t){if(!(e in pJ)||null!=t){let r=function(e,t){if(1!==e&&2!==e)throw Error("Cannot get WebGL rendering context, WebGL is disabled.");let r=null==t?function(e){if(!eb.getBool("IS_SAFARI")&&"undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw Error("Cannot create a canvas in this context")}(e):t;return(r.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete pJ[e]},!1),eb.getBool("SOFTWARE_WEBGL_ENABLED")&&(p0.failIfMajorPerformanceCaveat=!1),1===e)?r.getContext("webgl",p0)||r.getContext("experimental-webgl",p0):r.getContext("webgl2",p0)}(e,t);if(null===r)return console.log("Could not get context for WebGL version",e),null;pJ[e]=r}let r=pJ[e];return null==r||r.isContextLost()?(delete pJ[e],p1(e)):(r.disable(r.DEPTH_TEST),r.disable(r.STENCIL_TEST),r.disable(r.BLEND),r.disable(r.DITHER),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SAMPLE_COVERAGE),r.enable(r.SCISSOR_TEST),r.enable(r.CULL_FACE),r.cullFace(r.BACK),pJ[e])}function p2(e){let t=Math.ceil(r0.sizeFromShape(e)/4);return r0.sizeToSquarishShape(t)}function p3(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function p4(e,t){let r,n,a,i,s,o,l,u,d,h;return 2===eb.getNumber("WEBGL_VERSION")?(r=e.R32F,n=e.R16F,a=e.RGBA16F,i=e.RGBA32F,s=e.RED,l=4,u=1,d=e.HALF_FLOAT,h=e.FLOAT,o=e.RGBA8):(r=e.RGBA,n=e.RGBA,a=e.RGBA,i=e.RGBA,s=e.RGBA,l=4,u=4,d=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,o=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:s,downloadTextureFormat:o,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:d,textureTypeFloat:h}}function p6(e,t){let r=t();return eb.getBool("DEBUG")&&function(e){let t=e.getError();if(t!==e.NO_ERROR)throw Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),r}function p5(e,t){return ca(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}(TS=TG||(TG={}))[TS.DENSE=0]="DENSE",TS[TS.SHARED_BATCH=1]="SHARED_BATCH",(Tk=TH||(TH={}))[Tk.RENDER=0]="RENDER",Tk[Tk.UPLOAD=1]="UPLOAD",Tk[Tk.PIXELS=2]="PIXELS",Tk[Tk.DOWNLOAD=3]="DOWNLOAD",(TC=Tj||(Tj={}))[TC.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",TC[TC.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",TC[TC.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",TC[TC.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",TC[TC.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";const p8=/ERROR: [0-9]+:([0-9]+):/g;function p7(e,t){let r=p8.exec(t);if(null==r){console.log(`Couldn't parse line number in error: ${t}`),console.log(e);return}let n=+r[1],a=e.split("\n"),i=a.length.toString().length+2,s=a.map((e,t)=>r0.rightPad((t+1).toString(),i)+e),o=0;for(let e=0;e<s.length;e++)o=Math.max(s[e].length,o);let l=s.slice(0,n-1),u=s.slice(n-1,n),d=s.slice(n);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${r0.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}function p9(e,t){if(p6(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Shader program validation failed.")}function ce(e,t,r,n,a,i,s){let o=e.getAttribLocation(t,r);return -1!==o&&(p6(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),p6(e,()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,i,s)),p6(e,()=>e.enableVertexAttribArray(o)),!0)}function ct(e,t,r){p6(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,r)),p6(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function cr(e,t){p6(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),p6(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function cn(e){let t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function ca(e,t,r){let n=p6(e,()=>t());if(null==n)throw Error(r);return n}function ci(e,t=2){return r0.sizeFromShape(e.slice(0,e.length-t))}function cs(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function co(e){let t=[1,1,1];return 0!==e.length&&(1!==e.length||1!==e[0])&&(t=[ci(e),...cs(e)]),t}function cl(e,t){if(e=e.slice(-2),t=t.slice(-2),r0.arraysEqual(e,t)||!e.length||!t.length||0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){let r=e[e.length-1],n=t[t.length-1];if(r===n||r%2==0&&n%2==0&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&e[0]%2==0&&t[0]%2==0}function cu(e,t){return null!=e.getExtension(t)}function cd(e){try{let t=p1(e);if(null!=t)return!0}catch(e){console.log("Error when getting WebGL context: ",e)}return!1}function ch(e){let t=p4(e),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);let n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);let a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(n),a}function cp(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r0.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const cc=eb;function cf(){let e,t,r,n,a,i,s,o,l,u;return 2===eb.getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",r="out",n="in",a="texture",i="outputColor",s="out vec4 outputColor;",o=eb.getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(e="",t="attribute",r="varying",n="varying",a="texture2D",i="gl_FragColor",s="",o=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:e,attribute:t,varyingVs:r,varyingFs:n,texture2D:a,output:i,defineOutput:s,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function cm(e,t,r="index"){let n=r0.computeStrides(t);return n.map((t,a)=>{let i=`int ${e[a]} = ${r} / ${t}`,s=a===n.length-1?`int ${e[a+1]} = ${r} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`;return`${i}; ${s};`}).join("")}function cg(e,t,r="index"){let n=r0.computeStrides(t);return n.map((t,a)=>{let i=`int ${e[a]} = ${r} / outShapeStrides[${a}]`,s=a===n.length-1?`int ${e[a+1]} = ${r} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`;return`${i}; ${s};`}).join("")}function cy(e){let t=r0.computeStrides(e).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function cx(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}cc.registerFlag("HAS_WEBGL",()=>cc.getNumber("WEBGL_VERSION")>0),cc.registerFlag("WEBGL_VERSION",()=>cd(2)?2:+!!cd(1)),cc.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),cc.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===cc.get("WEBGL_VERSION")),cc.registerFlag("WEBGL_CPU_FORWARD",()=>!0),cc.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),cc.registerFlag("WEBGL_PACK",()=>cc.getBool("HAS_WEBGL")),cc.registerFlag("WEBGL_PACK_NORMALIZATION",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_CLIP",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_REDUCE",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_LAZILY_UNPACK",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_CONV_IM2COL",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>cc.getBool("WEBGL_PACK")),cc.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>(function(e){if(null==a){let t=p1(e);a=t.getParameter(t.MAX_TEXTURE_SIZE)}return a})(cc.getNumber("WEBGL_VERSION"))),cc.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>(function(e){if(null==i){let t=p1(e);i=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,i)})(cc.getNumber("WEBGL_VERSION"))),cc.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let e,t=cc.getNumber("WEBGL_VERSION");if(0===t)return 0;if(0===t)return 0;let r=p1(t);return cu(r,"EXT_disjoint_timer_query_webgl2")&&2===t?2:+!!cu(r,"EXT_disjoint_timer_query")}),cc.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>cc.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!n7.isMobile()),cc.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>(function(e){if(0===e)return!1;let t=p1(e);if(1===e){if(!cu(t,"OES_texture_float"))return!1}else if(!cu(t,"EXT_color_buffer_float"))return!1;return ch(t)})(cc.getNumber("WEBGL_VERSION"))),cc.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!cc.getBool("WEBGL_FORCE_F16_TEXTURES")&&cc.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),cc.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>(function(e){if(0===e)return!1;let t=p1(e);if(1===e){if(!cu(t,"OES_texture_float")||!cu(t,"WEBGL_color_buffer_float"))return!1}else{if(cu(t,"EXT_color_buffer_float"))return ch(t);let e="EXT_color_buffer_half_float";if(cu(t,e)){let a=t.getExtension(e);var r=t,n=a;let i=p4(r,n),s=r.createTexture();r.bindTexture(r.TEXTURE_2D,s),r.texImage2D(r.TEXTURE_2D,0,i.internalFormatHalfFloat,1,1,0,i.textureFormatFloat,i.textureTypeHalfFloat,null);let o=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,o),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,s,0);let l=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(s),r.deleteFramebuffer(o),l}return!1}return ch(t)})(cc.getNumber("WEBGL_VERSION"))),cc.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{var e;return 2===(e=cc.getNumber("WEBGL_VERSION"))&&null!=p1(e).fenceSync}),cc.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>4*!!cc.getBool("WEBGL_RENDER_FLOAT32_ENABLED")),cc.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if("number"!=typeof e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),cc.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>n7.isMobile()?1:-1,e=>{if("number"!=typeof e)throw Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),cc.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),cc.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),cc.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),cc.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),cc.registerFlag("WEBGL_EXP_CONV",()=>!1),cc.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>cc.getBool("IS_TEST")),cc.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),cc.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),cc.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),cc.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const cb=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`,{getBroadcastDims:cv}=sl,cw=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,cS=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,ck=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,cC=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function cI(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function cT(e){return`offset${e}`}function c$(e){let t=e.name,r=r0.sizeFromShape(e.shapeInfo.logicalShape);return r<2?`return ${t};`:`
    for (int i = 0; i < ${r}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function cN(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";else if(6===e)return"ivec6";else throw Error(`GPU for rank ${e} is not yet supported`)}function cE(e,t,r){let{newShape:n,keptDims:a}=r0.squeezeShape(t),i=t.length,s=e&&3===i&&1===t[0],o=s?t.slice(1):n,l=!e&&i>1&&!r0.arraysEqual(t,r)&&n.length<i||s,u=l?o:t;return{useSqueezeShape:l,uniformShape:u,keptDims:a}}function cR(e,t){let r=JSON.parse(JSON.stringify(e));return r.shapeInfo.logicalShape=t,r}function cA(e,t){return t.map(t=>e[t]).join(", ")}function c_(e,t,r){let n,a,i,s=[],o=[],l=null,u=null;for(let n of(u=e.getUniformLocation(r,"NAN",!1),1===eb.getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(r,"INFINITY",!1)),t.variableNames)){let a={name:n,uniform:e.getUniformLocation(r,n,!1),offset:e.getUniformLocation(r,`offset${n}`,!1)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(r,`${n}Shape`,!1),a.texShape=e.getUniformLocation(r,`${n}TexShape`,!1)),s.push(a)}if(t.enableShapeUniforms&&(n=e.getUniformLocation(r,"outShape",!1),i=e.getUniformLocation(r,"outShapeStrides",!1),a=e.getUniformLocation(r,"outTexShape",!1)),t.customUniforms)for(let n of t.customUniforms)o.push(e.getUniformLocation(r,n.name,!1));return{variablesLocations:s,customUniformLocations:o,infLoc:l,nanLoc:u,outShapeLocation:n,outShapeStridesLocation:i,outTexShapeLocation:a}}function cO(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,r)=>{let n=e.logicalShape,a=t[r],i=a.shape;if(!r0.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&a.isUniform)return;let s=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!r0.arraysEqual(s,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${s} and ${o} must match`)})}function cF(e){return eb.getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class cP{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=TG.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=cf();this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?cg(["r","c","d"],e):cm(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}class cD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=TG.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=cf();this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?cg(["r","c","d"],e):cm(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}class cL{constructor(e){this.variableNames=["A"],this.outTexUsage=TH.DOWNLOAD;let t=cf();this.outputShape=e,this.userCode=`
      ${cb}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}class cM{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=TH.DOWNLOAD;let t=cf();this.outputShape=e,this.userCode=`
      ${cb}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}const cB={R:0,G:1,B:2,A:3};class cz{constructor(e,t=!1,r="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=cf();this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length);let a="result";t&&(a="floor(result * 255. + 0.5)");let i="";for(let e=0;e<r.length;e++){let t=r[e];i+=`
          if(offset == ${e}) {
            result = values[${cB[t]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?cx():cy(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${r.length});

        flatIndex = idiv(flatIndex, ${r.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${i}
        }
        ${n.output} = vec4(${a}, 0., 0., 0.);
      }
    `}}class cU{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let r=cf();this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length);let n="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){let i=2*t+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${t};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${r.texture2D}(A, uv);

            if (offset == 0) {
              result[${i}] = values[0];
            } else if (offset == 1) {
              result[${i}] = values[1];
            } else if (offset == 2) {
              result[${i}] = values[2];
            } else {
              result[${i}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?cx():cy(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${r.output} = ${a};
        }
    `}}function cW(e,t,r,n,a,i){let s=eb.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||r<=0)throw Error(`Requested texture size [${t}x${r}] is invalid.`);if(t>s||r>s)throw Error(`Requested texture size [${t}x${r}] greater than WebGL maximum on this browser / GPU [${s}x${s}].`);let o=ca(e,()=>e.createTexture(),"Unable to create WebGLTexture."),l=e.TEXTURE_2D;return p6(e,()=>e.bindTexture(l,o)),p6(e,()=>e.texParameteri(l,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),p6(e,()=>e.texParameteri(l,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),p6(e,()=>e.texParameteri(l,e.TEXTURE_MIN_FILTER,e.NEAREST)),p6(e,()=>e.texParameteri(l,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===eb.getNumber("WEBGL_VERSION")?p6(e,()=>e.texImage2D(l,0,n,t,r,0,a,i,null)):p6(e,()=>e.texStorage2D(l,1,n,t,r)),p6(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:o,texShape:[r,t]}}function cV(e){return e.internalFormatFloat}function cG(e){return e.internalFormatHalfFloat}function cH(e){return e.downloadTextureFormat}function cj(e){return e.internalFormatPackedFloat}function cK(e){return e.internalFormatPackedHalfFloat}class cq{constructor(e){var t,r;this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];let n=eb.getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,t=e,pJ[n]=t):this.gl=p1(n),e=this.gl,2===eb.getNumber("WEBGL_VERSION")){let t=e;this.createVertexArray=()=>p6(t,()=>t.createVertexArray()),this.bindVertexArray=e=>p6(t,()=>t.bindVertexArray(e)),this.deleteVertexArray=e=>p6(t,()=>t.deleteVertexArray(e)),this.getVertexArray=()=>p6(t,()=>t.getParameter(t.VERTEX_ARRAY_BINDING))}else if(null!=e){let t=e.getExtension("OES_vertex_array_object");if(null==t)throw Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>p6(e,()=>t.createVertexArrayOES()),this.bindVertexArray=r=>p6(e,()=>t.bindVertexArrayOES(r)),this.deleteVertexArray=r=>p6(e,()=>t.deleteVertexArrayOES(r)),this.getVertexArray=()=>p6(e,()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES))}let a="WEBGL_color_buffer_float",i="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===eb.getNumber("WEBGL_VERSION")){let e="OES_texture_half_float";if(this.textureFloatExtension=p5(this.gl,"OES_texture_float"),cu(this.gl,e))this.textureHalfFloatExtension=p5(this.gl,e);else if(eb.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(a),cu(this.gl,i))this.colorBufferHalfFloatExtension=p5(this.gl,i);else if(eb.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(a="EXT_color_buffer_float",cu(this.gl,a))this.colorBufferFloatExtension=this.gl.getExtension(a);else if(cu(this.gl,i))this.colorBufferHalfFloatExtension=this.gl.getExtension(i);else throw Error("GL context does not support color renderable floats");this.vertexBuffer=function(e){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]),r=ca(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return p6(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),p6(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),r}(this.gl),this.indexBuffer=function(e){let t=new Uint16Array([0,1,2,2,1,3]),r=ca(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return p6(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r)),p6(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),r}(this.gl),this.framebuffer=ca(r=this.gl,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer."),this.textureConfig=p4(this.gl,this.textureHalfFloatExtension)}get debug(){return eb.getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;p6(e,()=>e.finish()),p6(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),p6(e,()=>e.deleteFramebuffer(this.framebuffer)),p6(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),p6(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),p6(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=[r,t];return cW(e,a,i,cV(n),n.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=[r,t];return cW(e,a,i,cG(n),n.textureFormatFloat,n.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=[r,t];return cW(e,a,i,cH(n),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){var r;this.throwIfDisposed(),r=this.gl,p6(r,()=>r.bindTexture(r.TEXTURE_2D,e)),t.data instanceof Uint8Array?2===eb.getNumber("WEBGL_VERSION")?p6(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.width,t.height,r.RGBA,r.UNSIGNED_BYTE,t.data)):p6(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,t.width,t.height,0,r.RGBA,r.UNSIGNED_BYTE,t.data)):2===eb.getNumber("WEBGL_VERSION")?p6(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,t)):p6(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t)),p6(r,()=>r.bindTexture(r.TEXTURE_2D,null))}uploadDenseMatrixToTexture(e,t,r,n){var a,i;let s,o,l;this.throwIfDisposed(),a=this.gl,i=this.textureConfig,p6(a,()=>a.bindTexture(a.TEXTURE_2D,e)),n instanceof Uint8Array?(s=new Uint8Array(t*r*4),o=a.UNSIGNED_BYTE,l=a.RGBA):(s=new Float32Array(t*r*4),o=a.FLOAT,l=i.internalFormatPackedFloat),s.set(n),2===eb.getNumber("WEBGL_VERSION")?p6(a,()=>a.texSubImage2D(a.TEXTURE_2D,0,0,0,t,r,a.RGBA,o,s)):p6(a,()=>a.texImage2D(a.TEXTURE_2D,0,l,t,r,0,a.RGBA,o,s)),p6(a,()=>a.bindTexture(a.TEXTURE_2D,null))}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=p3(t,r);return cW(e,a,i,cK(n),e.RGBA,n.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=p3(t,r);return cW(e,a,i,cj(n),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(cr(this.gl,this.framebuffer),this.outputTexture=null),p6(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,r){return this.downloadMatrixDriver(e,()=>(function(e,t,r,n){let[a,i]=[r,t],s=new Uint8Array(t*r*4);return p6(e,()=>e.readPixels(0,0,a,i,n.downloadTextureFormat,e.UNSIGNED_BYTE,s)),new Float32Array(s.buffer)})(this.gl,t,r,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,r,n,a,i){return function(e,t,r,n,a,i,s,o){let l=new Float32Array(function(e,t){let[r,n]=p3(e,t);return r*n*4}(i,s));return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,l),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,a,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){var r=this.gl;let n=new Float32Array(t);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,n),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),n}createBufferFromTexture(e,t,r){this.bindTextureToFrameBuffer(e);let n=function(e,t,r,n){let a=e.createBuffer();p6(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a));let i=16*t*r;return p6(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,i,e.STREAM_READ)),p6(e,()=>e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,0)),p6(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),a}(this.gl,t,r,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,r;if(eb.getBool("WEBGL_FENCE_API_ENABLED")){let n=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=()=>{let t=e.clientWaitSync(n,0,0);return t===e.ALREADY_SIGNALED||t===e.CONDITION_SATISFIED},t=n}else eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(t,eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:t,isFencePassed:r}}downloadMatrixFromPackedTexture(e,t,r){return this.downloadMatrixDriver(e,()=>(function(e,t,r){let n=new Float32Array(t*r*4);return p6(e,()=>e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,n)),n})(this.gl,t,r))}createProgram(e){this.throwIfDisposed();let t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){let t=cf(),r=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`,n=ca(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(p6(e,()=>e.shaderSource(n,r)),p6(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),Error("Failed to compile vertex shader.");return n}(t));let r=ca(t,()=>t.createProgram(),"Unable to create WebGLProgram.");if(p6(t,()=>t.attachShader(r,this.vertexShader)),p6(t,()=>t.attachShader(r,e)),p6(t,()=>t.linkProgram(r)),!eb.get("ENGINE_COMPILE_ONLY")&&!1===t.getProgramParameter(r,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(r)),Error("Failed to link vertex and fragment shaders.");let n=Object.assign(r,{vao:this.createVertexArray()});return this.debug&&p9(t,n),n}buildVao(e){var t;this.setProgram(e),this.bindVertexArray(e.vao);let r=this.gl;p6(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),t=this.vertexBuffer,p6(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),ce(r,e,"clipSpacePos",t,3,20,0)&&ce(r,e,"uv",t,2,20,12)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(p6(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&p9(this.gl,this.program),p6(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,r=!0){var n,a,i;return(this.throwIfDisposed(),r)?(n=this.gl,ca(n,()=>n.getUniformLocation(e,a),'uniform "'+(a=t)+'" not present in program.')):(i=this.gl,i.getUniformLocation(e,t))}getAttributeLocation(e,t){return this.throwIfDisposed(),p6(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,r){var n;this.throwIfDisposed(),this.throwIfNoProgram(),n=this.gl,p6(n,()=>{(function(e,t){let r=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,n=t+e.TEXTURE0;if(n<e.TEXTURE0||n>r){let e=`[gl.TEXTURE0, gl.TEXTURE${r}]`;throw Error(`textureUnit must be in ${e}.`)}})(n,r),p6(n,()=>n.activeTexture(n.TEXTURE0+r)),p6(n,()=>n.bindTexture(n.TEXTURE_2D,e))}),p6(n,()=>n.uniform1i(t,r))}setOutputMatrixTexture(e,t,r){this.setOutputMatrixTextureDriver(e,r,t)}setOutputPackedMatrixTexture(e,t,r){this.throwIfDisposed();let[n,a]=p3(t,r);this.setOutputMatrixTextureDriver(e,n,a)}setOutputMatrixWriteRegion(e,t,r,n){this.setOutputMatrixWriteRegionDriver(r,e,n,t)}setOutputPackedMatrixWriteRegion(e,t,r,n){throw Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&p9(this.gl,this.program),cn(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&(console.assert(this.getVertexArray()===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()),p6(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),p6(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=p5(this.gl,2===eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2(),r=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,r),r}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2();e.endQuery(t.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r0.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){let t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{let t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){let t=this.gl,r=this.getQueryTimerExtensionWebGL2(),n=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),n&&!this.disjoint}{let t=this.getQueryTimerExtensionWebGL1(),r=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){let r;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||("setTimeoutCustom"in eb.platform&&(r=eb.platform.setTimeoutCustom.bind(eb.platform)),r0.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,r))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),ct(this.gl,e,this.framebuffer),this.debug&&cn(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(ct(this.gl,this.outputTexture,this.framebuffer),this.debug&&cn(this.gl)):cr(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let r=t();return this.unbindTextureToFrameBuffer(),r}setOutputMatrixTextureDriver(e,t,r){this.throwIfDisposed();let n=this.gl;ct(n,e,this.framebuffer),this.debug&&cn(n),this.outputTexture=e,p6(n,()=>n.viewport(0,0,t,r)),p6(n,()=>n.scissor(0,0,t,r))}setOutputMatrixWriteRegionDriver(e,t,r,n){this.throwIfDisposed(),p6(this.gl,()=>this.gl.scissor(e,t,r,n))}throwIfDisposed(){if(this.disposed)throw Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw Error("No GPU program is currently set.")}}var cX={};function cY(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r0.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}function cQ(e){let t=new Float32Array(e.length);for(let r=0;r<e.length;++r)t[r]=Math.abs(e[r]);return t}function cZ(e){return(t,r,n,a,i)=>{let s=sl.assertAndGetBroadcastShape(t,r),o=s.length,l=r0.computeStrides(s),u=r0.sizeFromShape(s),d=r0.getTypedArrayFromDType(i,u),h=t.length,p=r.length,c=r0.computeStrides(t),f=r0.computeStrides(r),m=sl.getBroadcastDims(t,s),g=sl.getBroadcastDims(r,s);if(m.length+g.length===0)for(let t=0;t<d.length;++t)d[t]=e(n[t%n.length],a[t%a.length]);else for(let t=0;t<d.length;++t){let r=r0.indexToLoc(t,o,l),i=r.slice(-h);m.forEach(e=>i[e]=0);let s=r0.locToIndex(i,h,c),u=r.slice(-p);g.forEach(e=>u[e]=0);let y=r0.locToIndex(u,p,f);d[t]=e(n[s],a[y])}return[d,s]}}function cJ(e){let{inputs:t,backend:r}=e,{real:n,imag:a}=t,i=r.data.get(n.dataId).values,s=r.data.get(a.dataId).values,o=r.makeTensorInfo(n.shape,"complex64");return r.data.get(o.dataId).complexTensorInfos={real:r.makeTensorInfo(n.shape,"float32",i),imag:r.makeTensorInfo(a.shape,"float32",s)},o}function c0(e){let{inputs:t,backend:r}=e,{x:n}=t;return r.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}function c1(e,t,r,n){if("int32"===n)return[t,"int32",Int32Array.from(e)];if("bool"===n){let n=r0.toTypedArray([0],r),[a,i]=cZ((e,t)=>+(e!==t))(t,[],e,n,"bool");return[i,"bool",a]}throw Error(`Error in Cast: failed to cast ${r} to ${n}`)}function c2(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dtype:i}=n;if("complex64"===i){if("complex64"===a.dtype)return c0({inputs:{x:a},backend:r});let e=function e(t,r,n="float32"){if("complex64"===n)return cJ({inputs:{real:e(t,r,"float32"),imag:e(t,r,"float32")},backend:t});let a=r0.makeZerosTypedArray(r0.sizeFromShape(r),n);return t.makeTensorInfo(r,n,a)}(r,a.shape,a.dtype),t=c2({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),n=cJ({inputs:{real:t,imag:e},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),n}if("complex64"===a.dtype){let e=function(e){let{inputs:t,backend:r}=e,{input:n}=t,a=r.data.get(n.dataId).complexTensorInfos.real,i=r.data.get(a.dataId).values;return r.makeTensorInfo(a.shape,a.dtype,i)}({inputs:{input:a},backend:r}),t=c2({inputs:{x:e},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(e),t}if(!r0.hasEncodingLoss(a.dtype,i)){let e=c0({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}let[s,o,l]=c1(r.data.get(a.dataId).values,a.shape,a.dtype,i);return r.makeTensorInfo(s,o,l)}function c3(e,t,r,n){return null==r?({inputs:r,backend:a})=>{let{a:i,b:s}=r;cY([i,s],e);let o=a.data.get(i.dataId).values,l=a.data.get(s.dataId).values,u="string"===i.dtype?sl.fromUint8ToStringArray(o):o,d="string"===i.dtype?sl.fromUint8ToStringArray(l):l,h=n||i.dtype,[p,c]=t(i.shape,s.shape,u,d,h);return a.makeTensorInfo(c,h,p)}:({inputs:e,backend:a})=>{let{a:i,b:s}=e;if("complex64"===i.dtype||"complex64"===s.dtype){let e=c2({inputs:{x:i},backend:a,attrs:{dtype:"complex64"}}),t=a.data.get(e.dataId),n=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=a.data.get(n.dataId).values,u=a.data.get(o.dataId).values,d=c2({inputs:{x:s},backend:a,attrs:{dtype:"complex64"}}),h=a.data.get(d.dataId),p=h.complexTensorInfos.real,c=h.complexTensorInfos.imag,f=a.data.get(p.dataId).values,m=a.data.get(c.dataId).values,[g,y,x]=r(i.shape,s.shape,l,u,f,m),b=a.makeTensorInfo(x,"float32",g),v=a.makeTensorInfo(x,"float32",y),w=cJ({inputs:{real:b,imag:v},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(v),w}{let e=a.data.get(i.dataId).values,r=a.data.get(s.dataId).values,o=n||i.dtype,[l,u]=t(i.shape,s.shape,e,r,o);return a.makeTensorInfo(u,o,l)}}}function c4(e){return(t,r,n,a,i,s)=>{let o=sl.assertAndGetBroadcastShape(t,r),l=r0.sizeFromShape(o),u=o.length,d=r0.computeStrides(o),h=r0.getTypedArrayFromDType("float32",l),p=r0.getTypedArrayFromDType("float32",l),c=sl.getBroadcastDims(t,o),f=sl.getBroadcastDims(r,o),m=sl.mergeRealAndImagArrays(n,a),g=sl.mergeRealAndImagArrays(i,s),y=t.length,x=r0.computeStrides(t),b=r.length,v=r0.computeStrides(r);if(c.length+f.length===0)for(let t=0;t<h.length;t++){let r=t%m.length,n=t%g.length,a=e(m[2*r],m[2*r+1],g[2*n],g[2*n+1]);h[t]=a.real,p[t]=a.imag}else for(let t=0;t<h.length;t++){let r=r0.indexToLoc(t,u,d),n=r.slice(-y);c.forEach(e=>n[e]=0);let a=r0.locToIndex(n,y,x),i=r.slice(-b);f.forEach(e=>i[e]=0);let s=r0.locToIndex(i,b,v),o=e(m[2*a],m[2*a+1],g[2*s],g[2*s+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}l(cX,"simpleAbsImpl",()=>cQ),l(cX,"addImpl",()=>c6),l(cX,"bincountImpl",()=>c5),l(cX,"bincountReduceImpl",()=>c8),l(cX,"bitwiseAndImpl",()=>c7),l(cX,"castImpl",()=>c1),l(cX,"ceilImpl",()=>ft),l(cX,"concatImpl",()=>fr),l(cX,"equalImpl",()=>fn),l(cX,"expImpl",()=>fa),l(cX,"expm1Impl",()=>fi),l(cX,"floorImpl",()=>fs),l(cX,"floorDivImpl",()=>fo),l(cX,"gatherNdImpl",()=>fl),l(cX,"gatherV2Impl",()=>fu),l(cX,"greaterImpl",()=>fd),l(cX,"greaterEqualImpl",()=>fh),l(cX,"lessImpl",()=>fp),l(cX,"lessEqualImpl",()=>fc),l(cX,"linSpaceImpl",()=>ff),l(cX,"logImpl",()=>fm),l(cX,"maxImpl",()=>fg),l(cX,"maximumImpl",()=>fy),l(cX,"minimumImpl",()=>fx),l(cX,"multiplyImpl",()=>fb),l(cX,"negImpl",()=>fv),l(cX,"notEqualImpl",()=>fw),l(cX,"prodImpl",()=>fk),l(cX,"raggedGatherImpl",()=>fI),l(cX,"raggedRangeImpl",()=>fT),l(cX,"raggedTensorToTensorImpl",()=>fA),l(cX,"rangeImpl",()=>f_),l(cX,"rsqrtImpl",()=>fO),l(cX,"scatterImpl",()=>fF),l(cX,"sigmoidImpl",()=>fP),l(cX,"sliceImpl",()=>fD),l(cX,"sparseFillEmptyRowsImpl",()=>fL),l(cX,"sparseReshapeImpl",()=>fM),l(cX,"sparseSegmentReductionImpl",()=>fB),l(cX,"sqrtImpl",()=>fz),l(cX,"squaredDifferenceImpl",()=>fU),l(cX,"staticRegexReplaceImpl",()=>fW),l(cX,"stridedSliceImpl",()=>fV),l(cX,"stringNGramsImpl",()=>fH),l(cX,"stringSplitImpl",()=>fj),l(cX,"stringToHashBucketFastImpl",()=>fK),l(cX,"subImpl",()=>fq),l(cX,"tileImpl",()=>fX),l(cX,"topKImpl",()=>fQ),l(cX,"transposeImpl",()=>fS),l(cX,"uniqueImpl",()=>fZ);const c6=cZ((e,t)=>e+t);function c5(e,t,r,n,a){let i=r0.sizeFromShape(n),s=r0.makeZerosTypedArray(a,r);for(let r=0;r<e.length;r++){let n=e[r];if(n<0)throw Error("Input x must be non-negative!");n>=a||(i>0?s[n]+=t[r]:s[n]+=1)}return s}function c8(e,t,r,n=!1){let a=e.shape[0],i=e.shape[1],s=iW([a,r],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<i;a++){let i=e.get(o,a);if(i<0)throw Error("Input x must be non-negative!");i>=r||(n?s.set(1,o,i):t.size>0?s.set(s.get(o,i)+t.get(o,a),o,i):s.set(s.get(o,i)+1,o,i))}return s}c3("Add",c6,c4((e,t,r,n)=>({real:e+r,imag:t+n})));const c7=cZ((e,t)=>e&t);function c9(e){return(t,r,n)=>{let a=r0.getArrayFromDType(r,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],n);return a}}function fe(e,t,r){return({inputs:n,attrs:a,backend:i})=>{let s,{x:o}=n;cY(o,e);let l=i.data.get(o.dataId).values;if("string"===o.dtype){if(!Array.isArray(l))throw Error("String tensor's value was not an instance of Array");s=sl.fromUint8ToStringArray(l)}else s=l;let u=r||o.dtype,d=t(s,u,a);return i.makeTensorInfo(o.shape,u,d)}}c3(ez,c7);const ft=c9(e=>Math.ceil(e));function fr(e,t,r,n){let a=r0.getArrayFromDType(r,r0.sizeFromShape(t));if(n&&"string"!==r){let t=0;e.forEach(e=>{let r=r0.sizeFromShape(e.shape);a.set(e.vals,t),t+=r})}else{let n=0;e.forEach(e=>{let i="string"===r?sl.fromUint8ToStringArray(e.vals):e.vals,s=0;for(let r=0;r<e.shape[0];++r){let o=r*t[1]+n;for(let t=0;t<e.shape[1];++t)a[o+t]=i[s++]}n+=e.shape[1]})}return a}fe(eV,ft);const fn=cZ((e,t)=>+(e===t));c3(ti,fn,null,"bool");const fa=c9(e=>Math.exp(e));fe("Exp",fa,"float32");const fi=c9(e=>Math.expm1(e));fe(to,fi);const fs=c9(e=>Math.floor(e));fe(td,fs);const fo=cZ((e,t)=>Math.floor(e/t));function fl(e,t,r,n,a,i,s,o,l){let u=iW([n,i],r);for(let r=0;r<n;r++){let n=[],d=0;for(let t=0;t<a;t++){let i=e[r*a+t];d+=i*s[t],n.push(i)}if(d<0||d>=l/i)throw Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<i;e++)u.values[r*i+e]=t.get(...t.indexToLoc(d*i+e))}return u}function fu(e,t,r){let n=iW(r,e.dtype);for(let r=0;r<n.size;++r){let a=n.indexToLoc(r).slice(),i=a[0],s=a[2],o=t.locToIndex([i,s]);a[2]=t.values[o];let l=e.locToIndex(a);0<=l&&l<e.values.length&&(n.values[r]=e.values[l])}return n}c3(th,fo,null,"int32");const fd=cZ((e,t)=>+(e>t));c3(tm,fd,null,"bool");const fh=cZ((e,t)=>+(e>=t));c3(tg,fh,null,"bool");const fp=cZ((e,t)=>+(e<t));c3(tC,fp,null,"bool");const fc=cZ((e,t)=>+(e<=t));function ff(e,t,r){let n=(t-e)/(r-1),a=r0.makeZerosTypedArray(r,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}c3(tI,fc,null,"bool");const fm=c9(e=>Math.log(e));function fg(e,t,r,n){let a=r0.getTypedArrayFromDType(n,r0.sizeFromShape(r));for(let r=0;r<a.length;++r){let n=r*t,i=e[n];for(let r=0;r<t;++r){let t=e[n+r];(Number.isNaN(t)||t>i)&&(i=t)}a[r]=i}return a}fe("Log",fm);const fy=cZ((e,t)=>Math.max(e,t));c3(t_,fy);const fx=cZ((e,t)=>Math.min(e,t));c3(tB,fx);const fb=cZ((e,t)=>e*t);function fv(e,t,r){return fb([],t,r0.createScalarValue(-1,r),e,r)}c3(tW,fb,c4((e,t,r,n)=>({real:e*r-t*n,imag:e*n+t*r})));const fw=cZ((e,t)=>+(e!==t));function fS(e,t,r,n,a){let i=t.length,s=r0.sizeFromShape(t),o=r0.computeStrides(t),l=r0.computeStrides(a),u=r0.getTypedArrayFromDType(r,r0.sizeFromShape(a));for(let t=0;t<s;++t){let r=r0.indexToLoc(t,i,o),a=Array(r.length);for(let e=0;e<a.length;e++)a[e]=r[n[e]];u[r0.locToIndex(a,i,l)]=e[t]}return u}function fk(e,t,r,n){let[a,i]=sl.computeOutAndReduceShapes(e,n),s=nY(t,"int32"),o=r0.makeZerosTypedArray(r0.sizeFromShape(a),s),l=r0.sizeFromShape(i);for(let e=0;e<o.length;++e){let t=e*l,n=1;for(let e=0;e<l;++e)n*=r[t+e];o[e]=n}return{outVals:o,outShape:a,outDtype:s}}function fC(e,t){let r=e.slice(0,t);for(;r.length<t;)r.push(1);for(let n=t;n<e.length;n++)r[t-1]*=e[n];return r}function fI(e,t,r,n,a,i,s,o){if(0===e.length)throw Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw Error("Split tensors must not be scalars");let l=t[0][0]-1;if(i.forEach((e,t)=>{if(e<0||e>=l){let r=r0.indexToLoc(t,s.length,r0.computeStrides(s)).join(",");throw Error(`indices[${r}] = ${e} is not in [0, ${l})`)}}),0===n.length)throw Error("params.rank must be nonzero");let{outSplits:u,valueSlices:d,numValues:h}=function(e,t,r,n){let a=[],i=0,s=Array(t.length-1+r.length).fill(null).map(()=>[0]);for(let e=0;e<r.length;++e){let t=r[e],a=e===r.length-1?n:r[e+1].length;if(0===t.length)throw Error("Ragged splits may not be empty");if(t[0]<0)throw Error("Ragged splits must be non-negative");if(t[t.length-1]>a)throw Error("Ragged splits must not point past values");for(let e=1;e<t.length;++e)if(t[e-1]>t[e])throw Error("Ragged splits must be sorted in ascending order")}let o=1;for(let e=0;e<t.length-1;++e){o*=t[e];let r=t[e+1];for(let t=1;t<o+1;++t)s[e].push(t*r)}for(let n=0;n<e.length;++n){let o=e[n],l=e[n]+1;for(let e=0;e<r.length;++e){let n=r[e],a=e+t.length-1;if(a>=0){let e=s[a],t=e[e.length-1]-n[o];for(let e=o;e<l;++e)s[a].push(n[e+1]+t)}o=n[o],l=n[l]}l!==o&&(a.push([o,l]),i+=l-o)}return{outSplits:s,valueSlices:a,numValues:i}}(i,s,e,n[0]),p=function(e){let t=[];for(let r=0;r<e.length;++r){let n=e[r].length,a=r0.getArrayFromDType("int32",n);t.push(a),e[r].forEach((e,t)=>a[t]=e)}return t}(u),c=function(e,t,r,n,a){let i=t.slice();i[0]=a;let s=r0.getArrayFromDType(r,r0.sizeFromShape(i)),o=e.length,l=0===o?0:o/t[0];return!function(e,t,r,n,a,i){let s=fC(t,2)[1],o=fC(i,2)[1],l=0;for(let t of r)for(let r=t[0];r<t[1];++r){for(let t=0;t<n;++t)a[l*o+t]=e[r*s+t];++l}}(e,t,n,l,s,i),[s,i]}(r,n,a,d,h);return[p,c[0],c[1]]}function fT(e,t,r,n,a,i,s){if(t.length>1)throw Error("starts must be a scalar or vector");if(a.length>1)throw Error("limits must be a scalar or vector");if(s.length>1)throw Error("deltas must be a scalar or vector");let o=0===t.length,l=0===a.length,u=0===s.length,d=[];o||d.push(t[0]),l||d.push(a[0]),u||d.push(s[0]);for(let e=1;e<d.length;++e)if(d[e]!==d[e-1])throw Error("starts, limits, and deltas must have the same shape");let h=0===d.length?1:d[0],p=r0.getArrayFromDType("int32",h+1);p[0]=0;for(let t=0;t<h;++t){let r,a=o?e[0]:e[t],s=l?n[0]:n[t],d=u?i[0]:i[t];if(0===d)throw Error("Requires delta != 0");if(d>0&&s<a||d<0&&s>a)r=0;else if((r=Math.ceil(Math.abs((s-a)/d)))>0x7fffffff)throw Error("Requires ((limit - start) / delta) <= 2147483647");p[t+1]=p[t]+r}let c=p[h],f=r0.getArrayFromDType(r,c),m=0;for(let t=0;t<h;++t){let r=p[t+1]-p[t],n=o?e[0]:e[t],a=u?i[0]:i[t];for(let e=0;e<r;++e)f[m++]=n,n+=a}return[p,f]}c3(tV,fw,null,"bool");var f$=sl.RowPartitionType;class fN{constructor(e,t,r,n,a,i,s,o,l,u){this.shape=e,this.shapeShape=t,this.values=r,this.valuesShape=n,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=s,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=sl.getRowPartitionTypesHelper(u),this.raggedRank=sl.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===f$.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===f$.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case f$.VALUE_ROWIDS:return fN.getMaxWidthValueRowID(t);case f$.ROW_SPLITS:return fN.getMaxWidthRowSplit(t);default:throw Error(`Cannot handle partition type ${f$[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(0===t||1===t)return 0;let r=0;for(let n=0;n<t-1;++n){let t=e[n+1]-e[n];t>r&&(r=t)}return r}static getMaxWidthValueRowID(e){let t=e.length;if(0===t)return 0;let r=0,n=e[0],a=0;for(let i=1;i<t;++i){let t=e[i];t!==n&&(n=t,a=Math.max(i-r,a),r=i)}return Math.max(t-r,a)}tensorShapeFromTensor(e,t,r=!0){if(0===t.length){if(-1===e[0])return[];throw Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return fR(e,r)}calculateOutputSize(e){let t=this.valuesShape,r=this.defaultValueShape;sl.validateDefaultValueShape(r,t);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=sl.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,r){let n=Math.min(e,r),a=[],i=0;for(let e=0;e<n;++e,i+=t)a.push(i);for(let t=n;t<e;++t)a.push(-1);return r0.assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,r,n){let a=e.length,i=[];for(let s=0;s<a-1;++s){let a=e[s+1]-e[s],o=Math.min(n,a),l=t[s];-1===l&&(o=0);for(let e=0;e<o;++e)i.push(l),l+=r;for(let e=0;e<a-o;++e)i.push(-1)}if(a>0&&i.length!==e[a-1])throw Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,r,n){let a=e.length,i=[];if(0===a)return[];let s=0,o=e[0];if(o>=t.length)throw Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];i.push(l);for(let u=1;u<a;++u){let a=e[u];if(a===o)l>=0&&(++s<n?l+=r:l=-1);else{if(s=0,o=a,a>=t.length)throw Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}i.push(l)}if(i.length!==e.length)throw Error("Invalid row ids.");return i}calculateOutputIndex(e,t,r,n){let a=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case f$.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,r,n);case f$.ROW_SPLITS:if(a.length-1>t.length)throw Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,r,n);default:throw Error(`Unsupported partition type: ${f$[i]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case f$.FIRST_DIM_SIZE:return e[0];case f$.VALUE_ROWIDS:throw Error("Cannot handle VALUE_ROWIDS in first dimension.");case f$.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw Error(`Cannot handle type ${f$[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),r=Array(this.raggedRank+1);r[r.length-1]=1;for(let e=r.length-2;e>=0;--e)r[e]=r[e+1]*t[e+1];let n=fR(t,!1),a=r0.getArrayFromDType(this.valuesDType,r0.sizeFromShape(n));if(r[0]*t[0]>0){let i=this.calculateFirstParentOutputIndex(e,r[0],t[0]);for(let e=1;e<=this.raggedRank;++e)i=this.calculateOutputIndex(e-1,i,r[e],t[e]);this.setOutput(this.raggedRank,i,a,n)}return[n,a]}setOutput(e,t,r,n){if(0===r.length)return;let a=this.values,i=n.slice();i=i.slice(e+1);let s=r0.sizeFromShape(i),o=t.length,l=this.defaultValue;if(l.length!==s&&1!==l.length){let e=this.defaultValueShape;af(()=>{l=lp(sV(l,e),i).dataSync()})}let u=0,d=0,h=0;for(let e=0;e<=o;++e){let n=e<o?t[e]:-1;if(n===h){++h;continue}if(d<h){let e=a.subarray(u*s);fE(r.subarray(d*s),e,(h-d)*s)}if(e>=o&&(n=Math.floor(r.length/s)),n>h)if(1===this.defaultValue.length)r.subarray(h*s,n*s).fill(this.defaultValue[0]),h=n;else for(;n>h;)fE(r.slice(h*s),l,s),++h;n<0?(u=e+1,d=h):(u=e,h=(d=h)+1)}}}function fE(e,t,r){for(let n=0;n<r;n++)e[n]=t[n]}function fR(e,t){let r=[];for(let n of e){if(n<0){if(!t)throw Error(`Dimension ${n} must be >= 0`);if(n<-1)throw Error(`Dimension ${n} must be >= -1`);n=-1}r.push(n)}return r}function fA(e,t,r,n,a,i,s,o,l,u){return new fN(e,t,r,n,a,i,s,o,l,u).compute()}function f_(e,t,r,n){let a=e===t,i=e<t&&r<0,s=t<e&&r>1;if(a||i||s)return r0.makeZerosTypedArray(0,n);let o=Math.abs(Math.ceil((t-e)/r)),l=r0.makeZerosTypedArray(o,n);t<e&&1===r&&(r=-1),l[0]=e;for(let e=1;e<l.length;e++)l[e]=l[e-1]+r;return l}const fO=c9(e=>1/Math.sqrt(e));function fF(e,t,r,n,a,i,s,o,l,u){let d=e.values,h=t.values;if(0===n)return iW(r,t.dtype);let p=l instanceof nV?l:iW([n/a,a],t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let e=0;e<i;e++){let i=[],l=0;for(let t=0;t<s;t++){let r=d[e*s+t];i.push(r),l+=r*o[t]}if(l<0||l>=n/a)throw Error(`Invalid indices: ${i} does not index into ${r}`);for(let r=0;r<a;r++)u?p.values[l*a+r]+=h[e*a+r]:p.values[l*a+r]=0===t.rank?h[0]:h[e*a+r]}return p}fe(ra,fO);const fP=c9(e=>1/(1+Math.exp(-e)));function fD(e,t,r,n,a){let i=s6.isSliceContinous(n,t,r),s=r0.sizeFromShape(r),o=r0.computeStrides(n);if(i){let r=s6.computeFlatOffset(t,o);return"string"===a?e.slice(r,r+s):e.subarray(r,r+s)}let l="string"===a?sl.fromUint8ToStringArray(e):e,u=iW(n,a,l),d=iW(r,a);for(let e=0;e<d.size;++e){let r=d.indexToLoc(e),n=r.map((e,r)=>e+t[r]);d.set(u.get(...n),...r)}return"string"===a?sl.fromStringArrayToUint8(d.values):d.values}function fL(e,t,r,n,a,i,s){let o=t[0],l=i[0],u=Array(l),d=Array(o),h=t[1];if(0===l){if(0!==o)throw Error(sl.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[r0.getArrayFromDType(r,0),[0,h],r0.getArrayFromDType(a,0),u,d]}let p=!0,c=0,f=Array(l).fill(0);for(let t=0;t<o;++t){let r=e[t*h];if(r<0)throw Error(sl.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,r));if(r>=l)throw Error(sl.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,r,l));++f[r],p=p&&r>=c,c=r}let m=!0;for(let e=0;e<l;++e){let t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){for(let e=0;e<o;++e)d[e]=e;return[e,[o,h],n,u,d]}{let t=f[l-1],i=r0.getArrayFromDType(r,t*h),p=r0.getArrayFromDType(a,t),c=Array(l).fill(0);for(let t=0;t<o;++t){let r=e[t*h],a=c[r],s=(0===r?0:f[r-1])+a;c[r]++;for(let r=0;r<h;++r)i[s*h+r]=e[t*h+r];p[s]=n[t],d[t]=s}for(let e=0;e<l;++e)if(0===c[e]){let t=0===e?0:f[e-1];i[t*h+0]=e;for(let e=1;e<h;++e)i[t*h+e]=0;p[t]=s}return[i,[t,h],p,u,d]}}function fM(e,t,r,n,a){let i=r0.sizeFromShape(n),s=t[0],o=a.length,l=[],u=1,d=-1;for(let e=0;e<o;++e){let t=a[e];if(-1===t){if(-1!==d)throw Error(sl.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(d,e));d=e,l.push(1)}else{if(t<0)throw Error(sl.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==d){if(u<=0)throw Error(sl.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let e=Math.trunc(i/u);if(u*e!==i)throw Error(sl.getSparseReshapeInputOutputMultipleErrorMessage(n,l));l[d]=e}if(r0.sizeFromShape(l)!==i)throw Error(sl.getSparseReshapeInputOutputMismatchErrorMessage(n,l));let h=n.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*n[e+1]}let c=[];if(o>0){c[o-1]=1;for(let e=o-2;e>=0;--e)c[e]=c[e+1]*l[e+1]}let f=r0.getArrayFromDType(r,s*o);for(let t=0;t<s;++t){let r=0;for(let n=0;n<h;++n)r+=e[t*h+n]*p[n];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(r/c[e]),r%=c[e]}return[f,[s,o],l]}function fB(e,t,r,n,a,i=!1,s=0){let o=n.length,l=[t[0],e.length/t[0]],u=l[1],d=o>0?a[o-1]+1:0;if(d<0)throw Error(sl.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let h=t.slice();h[0]=d;let p=h.reduce((e,t)=>e*t,1),c=r0.getArrayFromDType(r,p);if(0===o)return d>0&&c.fill(s),[c,h];if(d<=0)throw Error(sl.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=a[0];for(;;){let t=0;if(m<o){if(y===(t=a[m])){++m;continue}if(y>=t)throw Error(sl.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=d)throw Error(sl.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,d));y>g&&c.fill(s,g*u,y*u);for(let t=f;t<m;++t){let r=n[t];if(r<0||r>=l[0])throw Error(sl.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,n[t],l[0]));for(let t=0;t<u;t++)c[y*u+t]+=e[r*u+t]}if(i)for(let e=0;e<u;e++)c[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<d&&c.fill(s,g*u,d*u),[c,h]}fe(rc,c9(e=>1/(1+Math.exp(-e))),void 0);const fz=c9(e=>Math.sqrt(e));fe(rm,c9(e=>Math.sqrt(e)),void 0);const fU=cZ((e,t)=>{let r=e-t;return r*r});c3(rC,fU);const fW=c9((e,t)=>{let{pattern:r,replaceGlobal:n,rewrite:a}=t;return e.replace(new RegExp(r,n?"g":""),a)});function fV(e,t,r,n){let a=iW(e,t.dtype);for(let e=0;e<a.size;e++){let i=a.indexToLoc(e),s=Array(i.length);for(let e=0;e<s.length;e++)s[e]=i[e]*r[e]+n[e];a.set(t.get(...s),...i)}return a}fe(rT,fW);class fG{constructor(e,t,r,n,a,i){this.separator=r0.encodeString(e),this.nGramWidths=t,this.leftPad=r0.encodeString(r),this.rightPad=r0.encodeString(n),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){return Math.max(0,e+2*this.getPadWidth(t)-t+1)}createNGrams(e,t,r,n,a,i){for(let s=0;s<a;++s){let o,l=this.getPadWidth(i),u=Math.max(0,l-s),d=Math.max(0,l-(a-(s+1))),h=i-(u+d),p=t+(u>0?0:s-l);o=0+u*this.leftPad.length;for(let t=0;t<h;++t)o+=e[p+t].length;o+=d*this.rightPad.length,o+=(u+d+h-1)*this.separator.length,r[n+s]=new Uint8Array(o);let c=r[n+s],f=0,m=e=>e.forEach(e=>c[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<h-1;++t)m(e[p+t]),m(this.separator);if(h>0){m(e[p+h-1]);for(let e=0;e<d;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<d-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){let r=e.length,n=t.length;if(n>0){let e=t[0];if(0!==e)throw Error(`First split value must be 0, got ${e}`);for(let a=1;a<n;++a){let n=t[a]>=e;if(!(n=n&&t[a]<=r))throw Error(`Invalid split value ${t[a]}, must be in [${e}, ${r}]`);e=t[a]}if(e!==r)throw Error(`Last split value must be data size. Expected ${r}, got ${e}`)}let a=n-1,i=r0.getArrayFromDType("int32",n);if(0===r||0===n){let e=Array(r);for(let e=0;e<=a;++e)i[e]=0;return[e,i]}i[0]=0;for(let e=1;e<=a;++e){let r=t[e]-t[e-1],n=0;this.nGramWidths.forEach(e=>{n+=this.getNumNGrams(r,e)}),this.preserveShort&&r>0&&0===n&&(n=1),i[e]=i[e-1]+n}let s=Array(i[a]);for(let r=0;r<a;++r){let n=t[r],a=i[r];if(this.nGramWidths.forEach(i=>{let o=t[r+1]-t[r],l=this.getNumNGrams(o,i);this.createNGrams(e,n,s,a,l,i),a+=l}),this.preserveShort&&a===i[r]){let i=t[r+1]-t[r];if(0===i)continue;let o=i+2*this.padWidth;this.createNGrams(e,n,s,a,1,o)}}return[s,i]}}function fH(e,t,r,n,a,i,s,o){return new fG(r,n,a,i,s,o).compute(e,t)}function fj(e,t,r){let n=e.length,a=[],i=0,s=0,o=Array(n);for(let l=0;l<n;++l){let n=a.length;!function(e,t,r,n){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)n.push(e.subarray(t,t+1));return}if(1===t.length){let a=t[0],i=e.indexOf(a);for(;-1!==i;){let t=e.subarray(0,i);r&&0===t.length||n.push(t),i=(e=e.subarray(i+1)).indexOf(a)}r&&0===e.length||n.push(e);return}let a=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==t.indexOf(e[i])){let t=e.subarray(a,i);r&&0===t.length||n.push(t),a=i+1}}(e[l],t,r,a);let u=a.length-n;o[l]=u,i+=u,s=Math.max(s,u)}let l=r0.getArrayFromDType("int32",2*i),u=Array(i),d=[n,s],h=0;for(let e=0;e<n;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=a[h],++h;return[l,u,d]}function fK(e,t){let r=r0.getArrayFromDType("int32",e.length);for(let n=0;n<e.length;++n)r[n]=r0.fingerPrint64(e[n]).modulo(t).getLowBitsUnsigned();return r}const fq=cZ((e,t)=>e-t);function fX(e,t){let r=Array(e.rank);for(let n=0;n<r.length;n++)r[n]=e.shape[n]*t[n];let n=iW(r,e.dtype);for(let t=0;t<n.values.length;++t){let r=n.indexToLoc(t),a=Array(e.rank);for(let t=0;t<a.length;t++)a[t]=r[t]%e.shape[t];let i=e.locToIndex(a);n.values[t]=e.values[i]}return n}c3("Sub",fq,c4((e,t,r,n)=>({real:e-r,imag:t-n})));const fY=(e,t)=>{let r=t.value-e.value;return 0===r?e.index-t.index:r};function fQ(e,t,r,n,a){let i=t[t.length-1],[s,o]=[e.length/i,i],l=r0.getTypedArrayFromDType(r,s*n),u=r0.getTypedArrayFromDType("int32",s*n);for(let t=0;t<s;t++){let r=t*o,i=e.subarray(r,r+o),s=Array(i.length);i.forEach((e,t)=>s[t]={value:e,index:t}),n<s.length&&(!function e(t,r,n=0,a=t.length-1){for(;a>n;){if(a-n>600){let i=a-n+1,s=r-n+1,o=Math.log(i),l=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*l*(i-l)/i)*Math.sign(s-i/2),d=Math.max(n,Math.floor(r-s*l/i+u)),h=Math.min(a,Math.floor(r+(i-s)*l/i+u));e(t,r,d,h)}let i=t[r],s=n,o=a;for(r0.swap(t,n,r),fY(t[a],i)>0&&r0.swap(t,n,a);s<o;){for(r0.swap(t,s,o),s++,o--;0>fY(t[s],i);)s+=1;for(;fY(t[o],i)>0;)o-=1}0===fY(t[n],i)?r0.swap(t,n,o):(o+=1,r0.swap(t,o,a)),o<=r&&(n=o+1),r<=o&&(a=o-1)}}(s,n),s=s.slice(0,n)),a&&s.sort(fY);let d=t*n,h=l.subarray(d,d+n),p=u.subarray(d,d+n);for(let e=0;e<n;e++)h[e]=s[e].value,p[e]=s[e].index}let d=t.slice();return d[d.length-1]=n,[iW(d,r,l),iW(d,"int32",u)]}function fZ(e,t,r,n){let a=r0.parseAxisParam(t,r)[0],i=[1,r[0],1];for(let e=0;e<a;e++)i[0]*=r[e];i[1]=r[a];for(let e=a+1;e<r.length;e++)i[2]*=r[e];let s=new Map,o=new Int32Array(r[a]),l=new nV(i,n,e),u=[],d=1===i[0]&&1===i[2];for(let t=0;t<r[a];t++){let r;if(d)r=e[t].toString();else{let e=[];for(let r=0;r<i[0];r++)for(let n=0;n<i[2];n++)e.push(l.get(r,t,n));r=e.join(",")}let n=s.get(r);if(null!=n)o[t]=n;else{let e=s.size;s.set(r,e),o[t]=e,u.push(t)}}let h=i.slice();h[1]=s.size;let p=new nV(h,n);u.forEach((e,t)=>{for(let r=0;r<i[0];r++)for(let n=0;n<i[2];n++)p.set(l.get(r,e,n),r,t,n)});let c=r.slice();return c[a]=h[1],{outputValues:p.values,outputShape:c,indices:o}}const{addImpl:fJ,bincountImpl:f0,bincountReduceImpl:f1,bitwiseAndImpl:f2,castImpl:f3,ceilImpl:f4,concatImpl:f6,equalImpl:f5,expImpl:f8,expm1Impl:f7,floorImpl:f9,gatherNdImpl:me,gatherV2Impl:mt,greaterImpl:mr,greaterEqualImpl:mn,lessImpl:ma,lessEqualImpl:mi,linSpaceImpl:ms,logImpl:mo,maxImpl:ml,maximumImpl:mu,minimumImpl:md,multiplyImpl:mh,negImpl:mp,notEqualImpl:mc,prodImpl:mf,raggedGatherImpl:mm,raggedRangeImpl:mg,raggedTensorToTensorImpl:my,rangeImpl:mx,rsqrtImpl:mb,scatterImpl:mv,sigmoidImpl:mw,simpleAbsImpl:mS,sliceImpl:mk,sparseFillEmptyRowsImpl:mC,sparseReshapeImpl:mI,sparseSegmentReductionImpl:mT,sqrtImpl:m$,staticRegexReplaceImpl:mN,stridedSliceImpl:mE,stringNGramsImpl:mR,stringSplitImpl:mA,stringToHashBucketFastImpl:m_,subImpl:mO,tileImpl:mF,topKImpl:mP,transposeImpl:mD,uniqueImpl:mL}=cX;function mM(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function mB(e,t){return 1===t?[e]:mM(e,t)}class mz{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=cF(this.outputShape.length),0===this.rank)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=mB("rc",this.rank),t=cN(this.rank),r=this.getOutOfBoundsCondition(e),n=this.getSetup(e),a=this.getOutput(e);this.userCode=`
        void main() {
          ${t} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${n}

            setOutput(vec4(${a}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let r=0;r<=1;r++)for(let n=0;n<=1;n++){let a=`${0===r?"r":"rp1"}, ${0===n?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let r=this.rank-2;r<this.rank;r++)t+=`${e[r]} >= ${this.enableShapeUniforms?`outShape[${r}]`:this.outputShape[r]}`,r<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";let t=e.slice(-2),r=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${r};
      bool rEdge = rp1 >= ${n};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);if(1===this.rank){let e=this.enableShapeUniforms?"outShape":this.outputShape[0];return`getA(rc), (rc + 1 >= ${e} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}class mU{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length);let r="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),r+=`
        ${t}
        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${e}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${e>0?"}":""}
      `}this.userCode=`
      ${function(e,t){let r=t?function(e,t,r="index"){let n=function(e,t){let r=e.length,n=e.map(e=>`${t}[${e}]`),a=Array(r-1);a[r-2]=n[r-1];for(let e=r-3;e>=0;--e)a[e]=`(${a[e+1]} * ${n[e+1]})`;return a}(e.map((e,t)=>t),t);return n.map((t,a)=>{let i=`int ${e[a]} = ${r} / ${n[a]}`,s=a===n.length-1?`int ${e[a+1]} = ${r} - ${e[a]} * ${n[a]}`:`index -= ${e[a]} * ${n[a]}`;return`${i}; ${s};`}).join("")}(["r","c","d"],"inputShape"):cm(["r","c","d"],e);return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${r}
      return ivec3(r, c, d);
    }
  `}(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?cx():cy(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${r}

        setOutput(result);
      }
    `}}class mW{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,r){let n,a=mG(t,r),i=mH(e,a,r);i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]);let s=mV(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();let e=this.freeTextures[i].pop();return this.usedTextures[i].push(e),e}return a===Tj.PACKED_2X2_FLOAT32?n=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===Tj.PACKED_2X2_FLOAT16?n=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===Tj.UNPACKED_FLOAT32?n=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===Tj.UNPACKED_FLOAT16?n=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===Tj.PACKED_4X1_UNSIGNED_BYTE&&(n=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[i].push(n),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),n}releaseTexture(e,t,r,n){if(null==this.freeTextures)return;let a=mG(r,n),i=mH(t,a,n);i in this.freeTextures||(this.freeTextures[i]=[]);let s=mV(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,n),o=eb.getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=s):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=s),this.numUsedTextures--;let l=this.usedTextures[i],u=l&&l.indexOf(e);if(null==u||u<0)throw Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(let e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function mV(e,t,r,n,a){let i,s=function(e,t){switch(e){case Tj.PACKED_2X2_FLOAT32:return cj(t);case Tj.PACKED_2X2_FLOAT16:return cK(t);case Tj.UNPACKED_FLOAT32:return cV(t);case Tj.UNPACKED_FLOAT16:return cG(t);case Tj.PACKED_4X1_UNSIGNED_BYTE:return cH(t);default:throw Error(`Unknown physical texture type ${e}`)}}(t,n);if(a){let[t,r]=p3(e[0],e[1]);i=t*r}else{var o;let[t,r]=(o=e[0],[e[1],o]);i=t*r}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;else if(t===e.RGBA8)return 4;throw Error(`Unknown internal format ${t}`)}(r,s)}function mG(e,t){if(e===TH.UPLOAD)return Tj.PACKED_2X2_FLOAT32;if(e===TH.RENDER||null==e)return eb.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Tj.PACKED_2X2_FLOAT32:Tj.UNPACKED_FLOAT32:t?Tj.PACKED_2X2_FLOAT16:Tj.UNPACKED_FLOAT16;if(e===TH.DOWNLOAD||e===TH.PIXELS)return Tj.PACKED_4X1_UNSIGNED_BYTE;throw Error(`Unknown logical texture type ${e}`)}function mH(e,t,r){return`${e[0]}_${e[1]}_${t}_${r}`}class mj{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}const mK="if (isnan(x)) return x;",mq="return abs(x);",mX=mK+`
  return (x < 0.0) ? 0.0 : x;
`,mY=mK+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,mQ="return x;",mZ=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,mJ=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,m0=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;class m1{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}class m2{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length);let t=e.length,r=mB("rc",t),n=cN(t),a=function(e,t){if(1===e)return"rc";let r="";for(let n=0;n<e;n++)r+=t[n],n<e-1&&(r+=",");return r}(t,r),i=r.slice(-2),s=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${s}));
      }
    `}}const m3=pQ.whereImpl,m4={},m6=eb.getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class m5 extends v{nextDataId(){return m5.nextDataId++}constructor(e){let t;if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!eb.getBool("HAS_WEBGL"))throw Error("WebGL is not supported on this device");if(null!=e)t=e instanceof cq?e:new cq(p1(eb.getNumber("WEBGL_VERSION"),e)),this.binaryCache={},this.gpgpuCreatedLocally=!1;else{var r;t=new cq(p1(eb.getNumber("WEBGL_VERSION"))),this.binaryCache=((r=eb.getNumber("WEBGL_VERSION"))in m4||(m4[r]={}),m4[r]),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new mW(this.gpgpu),this.numMBBeforeWarning=null==eb.global.screen?1024:eb.global.screen.height*eb.global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new b(this,n5)}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,r,n,a,i){let s=this.makeTensorInfo(t,r),o=this.texData.get(s.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[n,a]},o.texShape=[n,a];let l=new cz(co(t),!1,i),u=this.runWebGLProgram(l,[s],r,[[n,a]]);return u.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(s),u.dataId}write(e,t,r){if((eb.getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||eb.getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:t,dtype:r,values:e,usage:TH.UPLOAD,refCount:1}),n}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,r,n,a){if(eb.getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:n,values:t,usage:TH.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t,r,{values:n,dtype:a,complexTensorInfos:i,slice:s,shape:o,isPacked:l}=this.texData.get(e);if(null!=s){let t;t=l?new m1(o,mQ):new mj(o,mQ);let r=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:a}],a),n=this.readSync(r.dataId);return this.disposeIntermediateTensorInfo(r),n}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===a)return n;let u=null!=this.activeTimers;if(u&&(t=r0.now()),"complex64"===a){let e=this.readSync(i.real.dataId),t=this.readSync(i.imag.dataId);r=sl.mergeRealAndImagArrays(e,t)}else r=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=r0.now()-t),this.convertAndCacheOnCPU(e,r)}async read(e){let t,r;if(this.pendingRead.has(e)){let t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}let{values:n,shape:a,slice:i,dtype:s,complexTensorInfos:o,isPacked:l}=this.texData.get(e);if(null!=i){let t;t=l?new m1(a,mQ):new mj(a,mQ);let r=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:s}],s),n=this.read(r.dataId);return this.disposeIntermediateTensorInfo(r),n}if(null!=n)return this.convertAndCacheOnCPU(e);if(eb.getBool("DEBUG")&&!eb.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===eb.getNumber("WEBGL_VERSION"))throw Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null;if("complex64"!==s&&eb.get("WEBGL_BUFFER_SUPPORTED")){t=this.decode(e);let r=this.texData.get(t.dataId);u=this.gpgpu.createBufferFromTexture(r.texture.texture,...p2(a))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){let e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];r=sl.mergeRealAndImagArrays(t,n)}else if(null==u)r=this.getValuesFromTexture(e);else{let e=r0.sizeFromShape(a);r=this.gpgpu.downloadFloat32MatrixFromBuffer(u,e)}if(null!=t&&this.disposeIntermediateTensorInfo(t),null!=u){let e=this.gpgpu.gl;p6(e,()=>e.deleteBuffer(u))}let d=this.convertAndCacheOnCPU(e,r),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&n5.removeDataId(e,this),this.pendingDeletes--),d}readToGPU(e,t={}){let{values:r,shape:n,slice:a,dtype:i,isPacked:s,texture:o}=this.texData.get(e);if("complex64"===i)throw Error("Does not support reading texture for complex64 dtype.");if(null!=a){let r;r=s?new m1(n,mQ):new mj(n,mQ);let a=this.runWebGLProgram(r,[{dataId:e,shape:n,dtype:i}],i),o=this.readToGPU(a,t);return this.disposeIntermediateTensorInfo(a),o}if(null==o)if(null!=r)throw Error("Data is not on GPU but on CPU.");else throw Error("There is no data on GPU or CPU.");let l=this.decode(e,t.customTexShape);return Object.assign({tensorRef:n5.makeTensorFromTensorInfo(l)},this.texData.get(l.dataId).texture)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let r=t.map(e=>r0.decodeString(e));return iW(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return iW(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){let r=e[t];if(!(eb.getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===r||596e-10<Math.abs(r)&&65504>Math.abs(r))&&1){if(eb.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(e){let{shape:t,dtype:r,isPacked:n}=this.texData.get(e),a=r0.sizeFromShape(t);if(eb.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let r=this.decode(e),n=this.texData.get(r.dataId),i=this.gpgpu.downloadMatrixFromPackedTexture(n.texture.texture,...p2(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(r),i}let i=eb.getBool("WEBGL_PACK")&&!0===n,s=i?co(t):t,o=i?new cM(s):new cL(s),l=this.runWebGLProgram(o,[{shape:s,dtype:r,dataId:e}],"float32"),u=this.texData.get(l.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),d}timerAvailable(){return eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,r=[],n=!1;null==this.programTimersStack?(this.programTimersStack=r,n=!0):this.activeTimers.push(r),this.activeTimers=r,e();let a=r0.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=r0.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,n&&(this.programTimersStack=null);let s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let e=await Promise.all(a);s.kernelMs=r0.sum(e),s.getExtraProfileInfo=()=>e.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else s.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,s})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r0.now(),endMs:null}}endTimer(e){return eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.endQuery():e.endMs=r0.now(),e}async getQueryTime(e){return eb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,t),this.disposeData(r.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:r,texShape:n,usage:a,isPacked:i,slice:s}=this.texData.get(e),o=s&&s.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(n,r),this.textureManager.releaseTexture(t,n,a,i)));let u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=m6){return eb.getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&r0.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){sl.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return m3(e.shape,t)}packedUnaryOp(e,t,r){let n=new m1(e.shape,t),a=this.compileAndRun(n,[e],r);return n5.makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){let t=mS(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(eb.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,mq,e.dtype);let t=new mj(e.shape,mq),r=this.compileAndRun(t,[e]);return n5.makeTensorFromTensorInfo(r)}makeTensorInfo(e,t,r){let n;if("string"===t&&null!=r&&r.length>0&&r0.isString(r[0])){let a=r.map(e=>r0.encodeString(e));n=this.write(a,e,t)}else n=this.write(r,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t,r){return n5.makeTensorFromTensorInfo(this.makeTensorInfo(e,t,r),this)}unpackTensor(e){let t=new m2(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new mz(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let r=[ci(e.shape),...cs(e.shape)],n={dtype:e.dtype,shape:r,dataId:e.dataId},a=new mU([ci(t),...cs(t)],r),i=this.runWebGLProgram(a,[n],e.dtype,[r],!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){let r,{isPacked:n,shape:a,dtype:i}=this.texData.get(e);if(null!=t){let e=r0.sizeFromShape(a),r=t[0]*t[1]*4;r0.assert(e<=r,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let s=co(a);r=n?new cD(s):new cP(s);let o=[null!=t?t:p2(s)],l=this.runWebGLProgram(r,[{shape:s,dtype:i,dataId:e}],i,o,!0,t);return{dtype:i,shape:a,dataId:l.dataId}}runWebGLProgram(e,t,r,n,a=!1,i){let s,o=this.makeTensorInfo(e.outputShape,r),l=this.texData.get(o.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===TG.DENSE&&(l.texShape=(null!=i?i:p2(e.outputShape)).map(e=>2*e)),null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===r0.sizeFromShape(o.shape))return l.values=r0.getTypedArrayFromDType(o.dtype,0),o;let u=[],d=t.map(t=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(t.dataId);if(null==r.texture){if(!e.packedInputs&&r0.sizeFromShape(t.shape)<=eb.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:r.values};e.packedInputs&&(r.isPacked=!0,r.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!r.isPacked!=!!e.packedInputs)t=r.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),r=this.texData.get(t.dataId);else if(r.isPacked&&!cl(r.shape,t.shape)){let e=t,n=t.shape;t.shape=r.shape,t=this.packedReshape(t,n),u.push(t),r=this.texData.get(t.dataId),e.shape=n}return{shape:t.shape,texData:r,isUniform:!1}});this.uploadToGPU(o.dataId);let h={shape:o.shape,texData:l,isUniform:!1},p=function(e,t,r){let n="";t.concat(r).forEach(t=>{let a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){let i=t.texData.texShape,{useSqueezeShape:s,uniformShape:o,keptDims:l}=cE(e.packedInputs,t.shape,i),u="",d="",h="";if(1===o.length&&e.packedInputs){let e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){let e=r0.computeStrides(o);h=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else d=`${o[0]>1}_${o[1]>1}`;let p=t.shape.length,c=2===o.length&&r0.arraysEqual(t.shape,i),f=1===r0.sizeFromShape(t.shape),m=sl.getBroadcastDims(t.shape,r.shape),g=!e.packedInputs&&p===r.shape.length&&r0.arraysEqual(i,r.texData.texShape),y=e.packedInputs||o.length>2?"":`${i[0]>1}_${i[1]>1}`;n+=`${p}_${g}_${s?l:""}_${o.length}_${f}_${m}_${c}_${u}_${d}_${h}_${y}_${a}`}else{let e=t.isUniform?"uniform":t.texData.texShape;n+=`${t.shape}_${e}_${a}`}});let a=e.userCode,i=e.constructor.name;return i+("_"+n+"_"+a+`${eb.getNumber("WEBGL_VERSION")}`)}(e,d,h),c=this.getAndSaveBinary(p,()=>(function(e,t,r,n){let a=r.map((e,r)=>{let n={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(n.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[r],shapeInfo:n}}),i=a.map(e=>e.shapeInfo),s={logicalShape:n.shape,texShape:n.texData.texShape,isUniform:!1,isPacked:n.texData.isPacked,flatOffset:null},o=function(e,t,r){var n,a,i,s;let o,l,u=[];if(e.forEach(e=>{let t=r0.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?u.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(u.push(`uniform sampler2D ${e.name};`),u.push(`uniform int offset${e.name};`)),r.enableShapeUniforms){let{uniformShape:t}=cE(r.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:u.push(`uniform int ${e.name}Shape;`);break;case 2:u.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:u.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:u.push(`uniform ivec4 ${e.name}Shape;`)}u.push(`uniform ivec2 ${e.name}TexShape;`)}}),r.enableShapeUniforms){switch(t.logicalShape.length){case 1:u.push("uniform int outShape;");break;case 2:u.push("uniform ivec2 outShape;"),u.push("uniform int outShapeStrides;");break;case 3:u.push("uniform ivec3 outShape;"),u.push("uniform ivec2 outShapeStrides;");break;case 4:u.push("uniform ivec4 outShape;"),u.push("uniform ivec3 outShapeStrides;")}u.push("uniform ivec2 outTexShape;")}r.customUniforms&&r.customUniforms.forEach(e=>{u.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});let d=u.join("\n"),h=e.map(e=>(function(e,t,r=!1,n){let a="";r?a+=function e(t,r){switch(t.shapeInfo.logicalShape.length){case 0:var n=t;let a=n.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=cf();return`
    vec4 ${i}() {
      return ${s.texture2D}(${a}, halfCR);
    }
  `;case 1:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=cf();if(t)return`
    vec4 ${n}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${i.texture2D}(${r}, uv);
    }
  `;let s=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`
    vec4 ${n}(int index) {
      vec2 uv = packedUVfrom1D(
        ${s[0]}, ${s[1]}, index);
      return ${i.texture2D}(${r}, uv);
    }
  `}(t,r);case 2:return function(e,t){let r=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),i=e.shapeInfo.texShape,s=i[0],o=i[1],l=cf();if(null!=i&&r0.arraysEqual(r,i))return t?`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);

        return ${l.texture2D}(${n}, uv);
      }
    `:`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${s}.0);

        return ${l.texture2D}(${n}, uv);
      }
    `;if(t)return`
    vec4 ${a}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `;let u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],d=Math.ceil(r[1]/2);return`
    vec4 ${a}(int row, int col) {
      vec2 uv = packedUVfrom2D(${d}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `}(t,r);case 3:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=t.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){let a=cR(t,n.slice(1));return`
        ${e(a,r)}
        vec4 ${i}(int b, int row, int col) {
          return ${i}(${cA(["b","row","col"],[1,2])});
        }
      `}let l=cf();if(r)return`
    vec4 ${i}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `;let u=o[0],d=o[1],h=Math.ceil(n[2]/2),p=h*Math.ceil(n[1]/2);return`
    vec4 ${i}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${d}, ${p}, ${h}, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `}(t,r);default:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1),a=cf();if(t)return`
    vec4 ${n}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${r}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${r}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${r}, uv);
    }
  `;let i=e.shapeInfo.logicalShape,s=i.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],d=l[1],h=Math.ceil(i[s-1]/2),p=h*Math.ceil(i[s-2]/2),c="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<s-1;e++)c=`int b${e}, `+c,p*=i[s-e-1],f=`b${e} * ${p} + `+f;return`
    vec4 ${n}(${c}) {
      int index = ${f};
      int texR = index / ${d};
      int texC = index - texR * ${d};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}, ${u});
      return ${a.texture2D}(${r}, uv);
    }
  `}(t,r)}}(e,n):a+=function e(t,r=!1){let n=t.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${r};}`;let[a,i]=e.shapeInfo.texShape;if(1===a&&1===i)return`
      float ${n}() {
        return sampleTexture(${r}, halfCR);
      }
    `;let s=cT(r);if(t)return`
    float ${n}() {
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], ${s});
      return sampleTexture(${r}, uv);
    }
  `;let[o,l]=e.shapeInfo.texShape;return`
    float ${n}() {
      vec2 uv = uvFromFlat(${o}, ${l}, ${s});
      return sampleTexture(${r}, uv);
    }
  `}(t,r);case 1:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1);if(e.shapeInfo.isUniform)return`
      float ${n}(int index) {
        ${c$(e)}
      }
    `;let a=e.shapeInfo.texShape,i=a[0],s=a[1];if(1===s&&1===i)return`
      float ${n}(int index) {
        return sampleTexture(${r}, halfCR);
      }
    `;let o=cT(r);return 1===s?t?`
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${r}TexShape[0]));
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${i}.0);
        return sampleTexture(${r}, uv);
      }
    `:1===i?t?`
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${r}TexShape[1]), 0.5);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${s}.0, 0.5);
        return sampleTexture(${r}, uv);
      }
    `:t?`
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${o});
      return sampleTexture(${r}, uv);
    }
  `:`
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${i}, ${s}, index + ${o});
      return sampleTexture(${r}, uv);
    }
  `}(t,r);case 2:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=t.shapeInfo.texShape;if(null!=s&&r0.arraysEqual(n,s)){if(r)return`
      float ${i}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `;let e=s[0],t=s[1];return`
    float ${i}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);
      return sampleTexture(${a}, uv);
    }
  `}let{newShape:o,keptDims:l}=r0.squeezeShape(n);if(o.length<n.length){let n=cR(t,o);return`
      ${e(n,r)}
      float ${i}(int row, int col) {
        return ${i}(${cA(["row","col"],l)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${i}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));
        ${c$(t)}
      }
    `;let u=s[0],d=s[1],h=cT(a);return 1===d?r?`
      float ${i}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${i}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${a}, uv);
    }
  `:1===u?r?`
      float ${i}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${i}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  `:r?`
      float ${i}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    `:`
  float ${i}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${n[1]} + col + ${h};
    vec2 uv = uvFromFlat(${u}, ${d}, index);
    return sampleTexture(${a}, uv);
  }
`}(t,r);case 3:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=n[1]*n[2],o=n[2],{newShape:l,keptDims:u}=r0.squeezeShape(n);if(l.length<n.length){let n=cR(t,l);return`
        ${e(n,r)}
        float ${i}(int row, int col, int depth) {
          return ${i}(${cA(["row","col","depth"],u)});
        }
      `}if(t.shapeInfo.isUniform)return`
      float ${i}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${o}, 1)));
        ${c$(t)}
      }
    `;let d=t.shapeInfo.texShape,h=d[0],p=d[1],c=t.shapeInfo.flatOffset;if(p===s&&null==c)return r?`
      float ${i}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
        float ${i}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${p}.0, ${h}.0);
          return sampleTexture(${a}, uv);
        }
      `;if(p===o&&null==c)return r?`
      float ${i}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${i}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);
      return sampleTexture(${a}, uv);
    }
  `;let f=cT(a);return r?`
    float ${i}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    `:`
      float ${i}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${o} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${p}, index);
        return sampleTexture(${a}, uv);
      }
  `}(t,r);case 4:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=n[3],o=n[2]*s,l=n[1]*o,{newShape:u,keptDims:d}=r0.squeezeShape(n);if(u.length<n.length){let n=cR(t,u);return`
      ${e(n,r)}
      float ${i}(int row, int col, int depth, int depth2) {
        return ${i}(${cA(["row","col","depth","depth2"],d)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${i}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${l}, ${o}, ${s}, 1)));
        ${c$(t)}
      }
    `;let h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,c=p[0],f=p[1],m=`int stride2 = ${a}Shape[3];`,g=`int stride1 = ${a}Shape[2] * stride2;`,y=`int stride0 = ${a}Shape[1] * stride1;`;if(f===l&&null==h)return r?`
      float ${i}(int row, int col, int depth, int depth2) {
        ${m}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;if(f===s&&null==h)return r?`
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n[1]*n[2]}, ${n[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;let x=cT(a);return r?`
    float ${i}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${g}
      ${y}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${x});
      return sampleTexture(${a}, uv);
    }
  `:`
    float ${i}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${c}, ${f}, index + ${x});
      return sampleTexture(${a}, uv);
    }
  `}(t,r);case 5:return function(t){let r=t.shapeInfo.logicalShape,n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),i=r[4],s=r[3]*i,o=r[2]*s,l=r[1]*o,{newShape:u,keptDims:d}=r0.squeezeShape(r);if(u.length<r.length){let r=cR(t,u);return`
      ${e(r)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${cA(["row","col","depth","depth2","depth3"],d)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${o}, ${s}, ${i})) +
          depth3;
        ${c$(t)}
      }
    `;let h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,c=p[0],f=p[1];if(f===l&&null==h)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${s}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `;if(f===i&&null==h)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${r[1]*r[2]*r[3]},
               ${r[2]*r[3]}, ${r[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `;let m=cT(n);return`
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} + depth * ${s} +
          depth2 * ${i} + depth3 + ${m};
      vec2 uv = uvFromFlat(${c}, ${f}, index);
      return sampleTexture(${n}, uv);
    }
  `}(t);case 6:return function(t){let r=t.shapeInfo.logicalShape,n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:i,keptDims:s}=r0.squeezeShape(r);if(i.length<r.length){let r=cR(t,i);return`
      ${e(r)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${cA(["row","col","depth","depth2","depth3","depth4"],s)});
      }
    `}let o=r[5],l=r[4]*o,u=r[3]*l,d=r[2]*u,h=r[1]*d;if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${h}, ${d}, ${u}, ${l})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${c$(t)}
      }
    `;let p=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,f=c[0],m=c[1];if(m===h&&null==p)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${d}, ${u}, ${l}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${f}.0);
        return sampleTexture(${n}, uv);
      }
    `;if(m===o&&null==p)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${r[1]*r[2]*r[3]*r[4]},
               ${r[2]*r[3]*r[4]},
               ${r[3]*r[4]},
               ${r[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${f}.0);
        return sampleTexture(${n}, uv);
      }
    `;let g=cT(n);return`
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${h} + col * ${d} + depth * ${u} +
          depth2 * ${l} + depth3 * ${o} + depth4 + ${g};
      vec2 uv = uvFromFlat(${f}, ${m}, index);
      return sampleTexture(${n}, uv);
    }
  `}(t);default:throw Error(`${n.length}-D input sampling is not yet supported`)}}(e,n);let i=e.shapeInfo.logicalShape,s=t.logicalShape;return i.length<=s.length&&(r?a+=function(e,t){let r,n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),i=e.shapeInfo.logicalShape.length,s=t.logicalShape.length,o=cv(e.shapeInfo.logicalShape,t.logicalShape),l=cN(s),u=s-i,d=["x","y","z","w","u","v"];r=0===i?"":s<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${d[e+u]} = 0;`).join("\n");let h="";h=s<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${d[t+u]}`).join(", ");let p="return outputValue;",c=1===r0.sizeFromShape(e.shapeInfo.logicalShape),f=1===r0.sizeFromShape(t.logicalShape);if(1!==i||c||f){if(c&&!f)p=1===s?`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:`
        return vec4(outputValue.x);
      `;else if(o.length){let e=i-2,t=i-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?p="return vec4(outputValue.x);":o.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p=`
      return vec4(outputValue.xy, outputValue.xy);
    `;return`
    vec4 ${"get"+a+"AtOutCoords"}() {
      ${l} coords = getOutputCoords();
      ${r}
      vec4 outputValue = get${a}(${h});
      ${p}
    }
  `}(e,t):a+=function(e,t){let r,n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),i="get"+a+"AtOutCoords",s=t.texShape,o=e.shapeInfo.texShape,l=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&l===u&&null==e.shapeInfo.flatOffset&&r0.arraysEqual(o,s))return`
      float ${i}() {
        return sampleTexture(${n}, resultUV);
      }
    `;let d=cN(u),h=cv(e.shapeInfo.logicalShape,t.logicalShape),p=u-l,c=["x","y","z","w","u","v"];r=0===l?"":u<2&&h.length>=1?"coords = 0;":h.map(e=>`coords.${c[e+p]} = 0;`).join("\n");let f="";return f=u<2&&l>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${c[t+p]}`).join(", "),`
    float ${i}() {
      ${d} coords = getOutputCoords();
      ${r}
      return get${a}(${f});
    }
  `}(e,t)),a})(e,t,r.packedInputs,r.enableShapeUniforms)).join("\n"),p=t.texShape,c=cf(),f=(n=c,`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `),m=(a=c,`${a.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${a.varyingFs} vec2 resultUV;
    ${a.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${a.defineSpecialNaN}
    ${a.defineSpecialInf}
    ${a.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${cw}
    ${cS}
    ${ck}
  `);return t.isPacked?(o=function(e,t,r){switch(e.length){case 0:return cI();case 1:var n=0,a=t,i=r;let s=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return 1===s[0]?i?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    `:1===s[1]?i?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    `:i?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;case 2:var o=e,l=t,u=r;let d=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];if(r0.arraysEqual(o,l))return u?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${d[0]}, ${d[1]}));
      }
    `;let h=Math.ceil(o[1]/2);return u?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${d[0]}, ${d[1]}));

      int index = resTexRC.x * ${d[1]} + resTexRC.y;
      int r = 2 * (index / ${h});
      int c = imod(index, ${h}) * 2;

      return ivec2(r, c);
    }
  `;case 3:var p=e,c=t,f=r;if(f)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let m=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)],g=Math.ceil(p[2]/2),y=g*Math.ceil(p[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${m[0]}, ${m[1]}));
      int index = resTexRC.x * ${m[1]} + resTexRC.y;

      int b = index / ${y};
      index -= b * ${y};

      int r = 2 * (index / ${g});
      int c = imod(index, ${g}) * 2;

      return ivec3(b, r, c);
    }
  `;default:return function(e,t,r){if(r)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),i=a*Math.ceil(e[e.length-2]/2),s=i,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],o=`
      int b${t} = index / ${s};
      index -= b${t} * ${s};
    `+o,l=`b${t}, `+l;return`
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      int index = resTexRC.x * ${n[1]} + resTexRC.y;

      ${o}

      int b = index / ${i};
      index -= b * ${i};

      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec${e.length}(${l});
    }
  `}(e,t,r)}}(t.logicalShape,p,r.enableShapeUniforms),i=c,l=`
    void setOutput(vec4 val) {
      ${i.output} = val;
    }
  `):(o=function(e,t,r){switch(e.length){case 0:return cI();case 1:return n=0,a=t,i=r,1===a[0]?i?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${a[1]}.0);
      }
    `:1===a[1]?i?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${a[0]}.0);
      }
    `:i?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      return resTexRC.x * ${a[1]} + resTexRC.y;
    }
  `;case 2:return s=e,o=t,l=r,r0.arraysEqual(s,o)?l?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `:1===s[1]?l?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${o[0]}, ${o[1]}));
        int index = resTexRC.x * ${o[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:1===s[0]?l?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${o[0]}, ${o[1]}));
        int index = resTexRC.x * ${o[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:l?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = index / ${s[1]};
      int c = index - r * ${s[1]};
      return ivec2(r, c);
    }
  `;case 3:var n,a,i,s,o,l,u=e,d=t,h=r;if(h){let e=cg(["r","c","d"],u);return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${e}
    return ivec3(r, c, d);
  }
`}let p=cm(["r","c","d"],u);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${d[0]}, ${d[1]}));
      int index = resTexRC.x * ${d[1]} + resTexRC.y;
      ${p}
      return ivec3(r, c, d);
    }
  `;case 4:var c=e,f=t,m=r;if(m){let e=cg(["r","c","d","d2"],c);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${e}
      return ivec4(r, c, d, d2);
    }
  `}let g=cm(["r","c","d","d2"],c);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${f[0]}, ${f[1]}));
      int index = resTexRC.x * ${f[1]} + resTexRC.y;
      ${g}
      return ivec4(r, c, d, d2);
    }
  `;case 5:var y=e,x=t;let b=cm(["r","c","d","d2","d3"],y);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${x[0]},
                             ${x[1]}));

      int index = resTexRC.x * ${x[1]} + resTexRC.y;

      ${b}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;case 6:var v=e,w=t;let S=cm(["r","c","d","d2","d3","d4"],v);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${w[0]}, ${w[1]}));
      int index = resTexRC.x * ${w[1]} + resTexRC.y;

      ${S}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;default:throw Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,p,r.enableShapeUniforms),s=c,l=`
    void setOutput(float val) {
      ${s.output} = vec4(val, 0, 0, 0);
    }
  `),r.packedInputs&&(m+=cC),[m,f,l,d,o,h,r.userCode].join("\n")}(a,s,t),l=function(e,t){let r=ca(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(p6(e,()=>e.shaderSource(r,t)),p6(e,()=>e.compileShader(r)),eb.get("ENGINE_COMPILE_ONLY"))return r;if(!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw p7(t,e.getShaderInfoLog(r)),Error("Failed to compile fragment shader.");return r}(e.gl,o),u=e.createProgram(l);return eb.get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:i,outShapeInfo:s,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:i,outShapeInfo:s},c_(e,t,u)))})(this.gpgpu,e,d,h)),f=null!=this.activeTimers;f&&(s=this.startTimer()),eb.get("ENGINE_COMPILE_ONLY")||function(e,t,r,n,a){t.program.enableShapeUniforms||(cO(t.inShapeInfos,r),cO([t.outShapeInfo],[n]));let i=n.texData.texture,s=n.texData.texShape;n.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,s[0],s[1]):e.setOutputMatrixTexture(i.texture,s[0],s[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===eb.getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let n=0;n<r.length;++n){let a=r[n],{uniform:i,offset:s,shape:o,texShape:l}=t.variablesLocations[n];if(o){let{uniformShape:r}=cE(t.program.packedInputs,a.shape,a.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(o,new Int32Array(r));break;case 2:e.gl.uniform2iv(o,new Int32Array(r));break;case 3:e.gl.uniform3iv(o,new Int32Array(r));break;case 4:e.gl.uniform4iv(o,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,a.texData.texShape[0],a.texData.texShape[1]),null!=i){if(a.isUniform){if(2>r0.sizeFromShape(a.shape))e.gl.uniform1f(i,a.uniformValues[0]);else{let t=a.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}continue}null!=a.texData.slice&&null!=s&&e.gl.uniform1i(s,a.texData.slice.flatOffset),e.setInputMatrixTexture(a.texData.texture.texture,i,n)}}let o=t.outShapeLocation;if(o)switch(n.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(n.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(n.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(n.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(n.shape))}if(t.outShapeStridesLocation){let r=r0.computeStrides(n.shape);switch(n.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(r));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(r));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(r))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,n.texData.texShape[0],n.texData.texShape[1]),t.program.customUniforms&&a)for(let r=0;r<t.program.customUniforms.length;++r){let n=t.program.customUniforms[r],i=t.customUniformLocations[r],s=a[r];if("float"===n.type)e.gl.uniform1fv(i,s);else if("vec2"===n.type)e.gl.uniform2fv(i,s);else if("vec3"===n.type)e.gl.uniform3fv(i,s);else if("vec4"===n.type)e.gl.uniform4fv(i,s);else if("int"===n.type)e.gl.uniform1iv(i,s);else if("ivec2"===n.type)e.gl.uniform2iv(i,s);else if("ivec3"===n.type)e.gl.uniform3iv(i,s);else if("ivec4"===n.type)e.gl.uniform4iv(i,s);else throw Error(`uniform type ${n.type} is not supported yet.`)}e.executeProgram()}(this.gpgpu,c,d,h,n),u.forEach(e=>this.disposeIntermediateTensorInfo(e)),f&&(s=this.endTimer(s),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(s)}));let m=eb.getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){let e=r0.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!eb.getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===a){let e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,r,n,a=!1){return r=r||t[0].dtype,this.runWebGLProgram(e,t,r,n,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(eb.getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=af(()=>{if(!eb.get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=eb.getBool("DEBUG");eb.set("DEBUG",!1);let t=this.abs(i0(1e-8)).dataSync()[0];if(eb.set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){let t,r=this.texData.get(e),{shape:n,dtype:a,values:i,texture:s,usage:o,isPacked:l}=r;if(null!=s)return;let u=null!=this.activeTimers;u&&(t=r0.now());let d=r.texShape;if(null==d&&(r.texShape=d=function(e,t=!1){let r=eb.getNumber("WEBGL_MAX_TEXTURE_SIZE"),n=eb.getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");n===1/0&&eb.getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(n=r/2),t&&(r*=2,n*=2,1===(e=e.map((t,r)=>r>=e.length-2?r0.nearestLargerEven(e[r]):e[r])).length&&(e=[2,e[0]])),2!==e.length&&(e=r0.squeezeShape(e).newShape);let a=r0.sizeFromShape(e),i=null;e.length<=1&&a<=r?i=[1,a]:2===e.length&&e[0]<=r&&e[1]<=r?i=e:3===e.length&&e[0]*e[1]<=r&&e[2]<=r?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=r&&e[1]*e[2]<=r?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=r&&e[3]<=r?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=r&&e[1]*e[2]*e[3]<=r&&(i=[e[0],e[1]*e[2]*e[3]]);let s=null!=i&&Math.max(...i)>n&&Math.min(...i)<=(t?2:1)&&Math.min(...i)>0;if(null==i||s)if(t){let t=ci(e),r=2,n=2;e.length&&([r,n]=cs(e)),a=r/2*t*(n/2),i=r0.sizeToSquarishShape(a).map(e=>2*e)}else i=r0.sizeToSquarishShape(a);return i}(n,l)),null!=i){let e,s=co(n),o=d[1],h=d[0],p=i instanceof Uint8Array||i instanceof Uint8ClampedArray;(l||!p)&&([o,h]=p3(d[0],d[1])),e=l?new cU(s,p):new cz(s,p);let c=p?[h,o]:d,f=this.makeTensorInfo(c,a),m=this.texData.get(f.dataId);p?m.usage=TH.PIXELS:m.usage=TH.UPLOAD,m.texShape=c,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,h,i);let g=[[h,o]],y=this.runWebGLProgram(e,[f],a,g,!0),x=this.texData.get(y.dataId);r.texShape=x.texShape,r.isPacked=x.isPacked,r.usage=x.usage,eb.get("ENGINE_COMPILE_ONLY")?this.disposeData(y.dataId):(r.texture=x.texture,r.values=null,this.texData.delete(y.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=r0.now()-t)}else r.texture=this.acquireTexture(d,o,a,l)}convertAndCacheOnCPU(e,t){let r=this.texData.get(e),{dtype:n}=r;return null!=t&&(r.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){let r="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<r.length;++t)r[t]=Math.round(e[t]);return r}throw Error(`Unknown dtype ${t}`)}(t,n)),r.values}acquireTexture(e,t,r,n){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){let e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,n)}computeBytes(e,t){return e[0]*e[1]*r0.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(let[,t]of Object.entries(this.binaryCache)){let r=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}});e.push(r)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await new Promise(e=>pZ(()=>e())),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw p7(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),Error("Failed to compile fragment shader.");throw Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(let e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);let{variablesLocations:t,customUniformLocations:r,infLoc:n,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:s,outTexShapeLocation:o}=c_(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=r,e.infLoc=n,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=s,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,r){e.channels=e.channels||"RGBA";let{texture:n,height:a,width:i,channels:s}=e,o=n5.backend;if(!o.gpgpu.gl.isTexture(n))throw Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");let l=o.writeTexture(n,t,r,a,i,s);return n5.makeTensorFromDataId(l,t,r,o)}}m5.nextDataId=0,n7.isBrowser()&&ab("webgl",()=>new m5,2);const m8=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;class m7{constructor(e,t,r){this.variableNames=["A","B"],this.outputShape=sl.assertAndGetBroadcastShape(t,r),this.enableShapeUniforms=cF(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}const m9=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class ge{constructor(e,t,r,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=sl.assertAndGetBroadcastShape(t,r);let a=this.outputShape.length;this.enableShapeUniforms=cF(a);let i="";if(n)if(0===a||1===r0.sizeFromShape(this.outputShape))i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else{let e=cN(a);if(i=`
          ${e} coords = getOutputCoords();
        `,1===a)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let e=mB("coords",a);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}}function gt(e){let{inputs:t,backend:r}=e,{x:n}=t;return r.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}function gr(e){let{inputs:t,backend:r}=e,{real:n,imag:a}=t,i=r.makeTensorInfo(n.shape,"complex64"),s=r.texData.get(i.dataId);return s.complexTensorInfos={real:gt({inputs:{x:n},backend:r}),imag:gt({inputs:{x:a},backend:r})},i}const gn="return (a < 0.) ? b * a : a;",ga=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,gi="return (a < 0.) ? b * a : a;",gs=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,go="if (isnan(x)) return x;";function gl({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:r,dtype:n}){return({inputs:a,backend:i})=>{let s,{x:o}=a,l=n||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=r){let e=r(i.texData.get(o.dataId).values,l);return i.makeTensorInfo(o.shape,l,e)}return s=eb.getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new m1(o.shape,t):new mj(o.shape,e),i.runWebGLProgram(s,[o],l)}}function gu({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:r=!1,supportsComplex:n=!1,cpuKernelImpl:a,dtype:i}){return({inputs:s,backend:o})=>{let l,{a:u,b:d}=s;if(n&&"complex64"===u.dtype){let t=o.texData.get(u.dataId),r=o.texData.get(d.dataId),[n,a]=[[t.complexTensorInfos.real,r.complexTensorInfos.real],[t.complexTensorInfos.imag,r.complexTensorInfos.imag]].map(t=>{let[r,n]=t,a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},i={dataId:n.dataId,dtype:n.dtype,shape:d.shape},s=new m7(e,u.shape,d.shape);return o.runWebGLProgram(s,[a,i],nY(r.dtype,n.dtype))}),i=gr({inputs:{real:n,imag:a},backend:o});return o.disposeIntermediateTensorInfo(n),o.disposeIntermediateTensorInfo(a),i}let h=i||nY(u.dtype,d.dtype);if(("string"===u.dtype||"string"===d.dtype||o.shouldExecuteOnCPU([u,d]))&&null!=a){let e=o.texData.get(u.dataId).values,t=o.texData.get(d.dataId).values,r="string"===u.dtype?sl.fromUint8ToStringArray(e):e,n="string"===u.dtype?sl.fromUint8ToStringArray(t):t,[i,s]=a(u.shape,d.shape,r,n,h),l=o.makeTensorInfo(s,h);return o.texData.get(l.dataId).values=i,l}return l=eb.getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new ge(t,u.shape,d.shape,r):new m7(e,u.shape,d.shape),o.runWebGLProgram(l,[u,d],h)}}function gd(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?mJ:mX;if("elu"===e)return t?mZ:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?m0:mY;if("prelu"===e)return t?gs:gi;else if("leakyrelu"===e)return t?ga:gn;else if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class gh{constructor(e,t,r,n=!1,a=!1,i=!1,s=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r,this.enableShapeUniforms=cF(this.outputShape.length);let u=Math.ceil((n?e[1]:e[2])/2),d=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],p="",c="";s&&(p=o?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`:l?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`:`vec4 activation(vec4 x) {
          ${s}
        }`,c="result = activation(result);"),i&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let f="rc.x",m="rc.x";e[0]<t[0]?f=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(m=`imod(rc.x, ${t[0]})`),this.userCode=`
      ${p}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${u}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${f};
        int batchB = ${m};
        for (int i = 0; i < ${u}; i++) {
          vec4 a = getMatrixA(batchA, ${n?"i * 2, rc.y":"rc.y, i * 2"});
          vec4 b = getMatrixB(batchB, ${a?"rc.z, i * 2":"i * 2, rc.z"});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${d[0]} * ${h[0]});
          result += (${d[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${i?"result += getBiasAtOutCoords();":""}

        ${c}

        setOutput(result);
      }
    `}}const gp={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class gc{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=sl.assertAndGetBroadcastShape(t,r),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}const gf="return a * b;";function gm(e){let t,{inputs:r,backend:n}=e,{a:a,b:i}=r,s=sl.upcastType(a.dtype,i.dtype);if("complex64"===a.dtype){let e=n.texData.get(a.dataId),t=n.texData.get(i.dataId),r=new gc(gp.REAL,a.shape,i.shape),s=new gc(gp.IMAG,a.shape,i.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:i.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:i.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(s,o,"float32"),d=gr({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),d}if(n.shouldExecuteOnCPU([a,i])){let e=n.texData.get(a.dataId),t=n.texData.get(i.dataId),[r,o]=mh(a.shape,i.shape,e.values,t.values,s),l=n.makeTensorInfo(o,s);return n.texData.get(l.dataId).values=r,l}return t=eb.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ge(gf,a.shape,i.shape):new m7(gf,a.shape,i.shape),n.runWebGLProgram(t,[a,i],s)}function gg(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{shape:i}=n,s=r0.sizeFromShape(a.shape),o=r0.inferFromImplicitShape(i,s),l=r0.sizeFromShape(o);r0.assert(s===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`);let u=r.texData.get(a.dataId);return!u.isPacked||cl(a.shape,o)||null!==u.texture&&cl(u.shape,o)?(r.incRef(a.dataId),{dataId:a.dataId,shape:o,dtype:a.dtype}):function(e,t,r){let n=[ci(e.shape),...cs(e.shape)],a={dtype:e.dtype,shape:n,dataId:e.dataId},i=new mU([ci(t),...cs(t)],n),s=r.runWebGLProgram(i,[a],e.dtype,[n],!0);return{dataId:s.dataId,shape:t,dtype:s.dtype}}(a,o,r)}class gy{constructor(e,t){this.variableNames=["x"];let{windowSize:r,batchSize:n,inSize:a,outSize:i}=e;this.outputShape=[n,i];let s=4*Math.floor(r/4),o=r%4,l="sumValue += dot(values, ones);";if(null!=t){let e=1/t;l=`sumValue += dot(values * ${r0.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";a%r>0&&(u=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        float sumValue = 0.0;

        for (int i = 0; i < ${s}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${l}
        }

        int inIdx = inOffset + ${s};
        if (${1===o}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${l}
        } else if (${2===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${l}
        } else if (${3===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${l}
        }
        setOutput(sumValue);
      }
    `}}class gx{constructor(e,t){this.variableNames=["x"];let{windowSize:r,batchSize:n,inSize:a,outSize:i}=e;this.outputShape=[n,i];let s="0.0",o="";"prod"===t?s="1.0":"min"===t?(s="1.0 / 1e-20",o="min"):"max"===t&&(s="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");let u=4*Math.floor(r/4),d=r%4,h=`
      if (${"sum"===t}) {
        sumValue += dot(values, ones);
      } else if (${"prod"===t}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${"min"===t} || ${"max"===t}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,p="vec4";"all"===t?(s="1.0",h=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,p="bvec4"):"any"===t&&(s="0.0",h=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,p="bvec4");let c="";a%r>0&&(c=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${s};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        vec4 minMaxValue = vec4(${s});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${h}
        }

        int inIdx = inOffset + ${u};
        if (${1===d}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${2===d}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${3===d}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${h}
        }
        setOutput(${l});
      }
    `}}function gb(e,t,r,n){let a=function(e){let t=[];for(;0===t.length||1!==t[t.length-1].outSize;){let r=t.length?t[t.length-1].outSize:e[1],n=sl.computeOptimalWindowSize(r);t.push({inSize:r,windowSize:n,outSize:Math.ceil(r/n)})}return t}(e.shape),i=e;for(let s=0;s<a.length;s++){let o,l,{inSize:u,windowSize:d,outSize:h}=a[s];o="mean"===r?0===s?new gy({windowSize:d,inSize:u,batchSize:e.shape[0],outSize:h},u):new gy({windowSize:d,inSize:u,batchSize:e.shape[0],outSize:h}):new gx({windowSize:d,inSize:u,batchSize:e.shape[0],outSize:h},r),l=i,i=n.runWebGLProgram(o,[i],t),l.dataId!==e.dataId&&n.disposeIntermediateTensorInfo(l)}return i}class gv{constructor(e,t){this.variableNames=["A"];let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];this.outputShape=r,this.rank=r.length;let n=cN(this.rank),a=function(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],n=Array(t);for(let t=0;t<e.length;t++)n[e[t]]=r[t];return n.join()}(t);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `}}class gw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];if(this.outputShape=r,this.rank=r.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=cN(this.rank),a=mM("rc",this.rank),i=Array(this.rank);for(let e=0;e<t.length;e++)i[t[e]]=a[e];let s=`vec2(${i.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${r[this.rank-1]}`,l=`getChannel(getA(${i.join()}), ${s})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${l};
      if(${o}) {
        result[1] = ${l};
      }
      --${a[this.rank-1]};
      if(++${a[this.rank-2]} < ${r[this.rank-2]}) {
        result[2] = ${l};
        if(${o}) {
          result[3] = ${l};
        }
      }
      setOutput(result);
    }
    `}}function gS(e,t,r){let n=eb.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gw(e.shape,t):new gv(e.shape,t);return r.runWebGLProgram(n,[e],e.dtype)}function gk(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return function(e,t,r,n){let a=e.shape.length,i=r0.parseAxisParam(t,e.shape),s=i,o=sl.getAxesPermutation(s,a),l=null!=o,u=e;l&&(u=gS(e,o,n),s=sl.getInnerMostAxes(s.length,a)),sl.assertAxesAreInnerMostDims("sum",s,a);let[d,h]=sl.computeOutAndReduceShapes(u.shape,s),p=d;r&&(p=sl.expandShapeToKeepDim(d,i));let c=r0.sizeFromShape(h),f=gg({inputs:{x:u},attrs:{shape:[r0.sizeFromShape(e.shape)/c,c]},backend:n}),m=gb(f,nQ(e.dtype),"sum",n),g=gg({inputs:{x:m},attrs:{shape:p},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),l&&n.disposeIntermediateTensorInfo(u),g}(a,i,s,r)}function gC(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{perm:s}=a,o=Array(i.shape.length);for(let e=0;e<o.length;e++)o[e]=i.shape[s[e]];if(n.shouldExecuteOnCPU([i])){let e=mD(n.texData.get(i.dataId).values,i.shape,i.dtype,s,o);t=n.makeTensorInfo(o,i.dtype),n.texData.get(t.dataId).values=e}else t=gS(i,s,n);return t}function gI({a:e,b:t,transposeA:r,transposeB:n,backend:a,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:l=null}){let u,d=e.shape.length,h=t.shape.length,p=r?e.shape[d-2]:e.shape[d-1],c=n?t.shape[h-1]:t.shape[h-2],f=r?e.shape[d-1]:e.shape[d-2],m=n?t.shape[h-2]:t.shape[h-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),x=r0.sizeFromShape(g),b=r0.sizeFromShape(y),v=se.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);r0.assert(p===c,()=>`Error in matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${r} and transposeB=${n} must match.`);let w=r?[x,p,f]:[x,f,p],S=n?[b,m,c]:[b,c,m],k=gg({inputs:{x:e},backend:a,attrs:{shape:w}}),C=gg({inputs:{x:t},backend:a,attrs:{shape:S}}),I=[k,C],T=Math.max(x,b),$=r?k.shape[1]:k.shape[2],N=null!=i,E=null!=s,R="leakyrelu"===l,A=null!=l?gd(l,!0):null,_=N||E||R||null!=A;if((1===f||1===m)&&$>1e3&&!1===_){let e=k,t=C;r&&(e=gC({inputs:{x:k},backend:a,attrs:{perm:[0,2,1]}}),I.push(e)),n&&(t=gC({inputs:{x:C},backend:a,attrs:{perm:[0,2,1]}}),I.push(t));let i=1!==m,s=1===m,o=e;i&&(o=gg({inputs:{x:e},backend:a,attrs:{shape:[T,$,1]}}),I.push(o));let l=t;s&&(l=gg({inputs:{x:t},backend:a,attrs:{shape:[T,1,$]}}),I.push(l));let d=gm({inputs:{a:o,b:l},backend:a});u=gk({inputs:{x:d},backend:a,attrs:{axis:1===m?2:1,keepDims:!0}}),I.push(d)}else{let l=nY(e.dtype,t.dtype),d=new gh(w,S,[T,f,m],r,n,N,A,E,R),h=[k,C];if(null!=i&&h.push(i),E&&h.push(s),R){let e=a.makeTensorInfo([],"float32",r0.createScalarValue(o,"float32"));h.push(e),I.push(e)}u=a.runWebGLProgram(d,h,l)}let O=gg({inputs:{x:u},backend:a,attrs:{shape:v}});for(let e of(I.push(u),I))a.disposeIntermediateTensorInfo(e);return O}const gT="return abs(x);",g$=gl({opSnippet:mK+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`}),gN=gl({opSnippet:mK+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`}),gE="return a + b;",gR=gu({opSnippet:gE,packedOpSnippet:gE,supportsComplex:!0,cpuKernelImpl:fJ});class gA{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let r=[];this.variableNames.forEach(e=>{r.push(`float v${e} = get${e}AtOutCoords();`)});let n=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${r.join("\n        ")}

        float result = ${n};
        setOutput(result);
      }
    `}}class g_{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let r=[];this.variableNames.forEach(e=>{r.push(`vec4 v${e} = get${e}AtOutCoords();`)});let n=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${r.join("\n        ")}

        vec4 result = ${n};
        setOutput(result);
      }
    `}}class gO{constructor(e,t,r){this.variableNames=["A"];let{windowSize:n,batchSize:a,outSize:i}=e;r||this.variableNames.push("bestIndicesA"),this.outputShape=[a,i],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${r?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};
          float candidate = getA(batch, inIdx);
          if (candidate ${"max"===t?">":"<"} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}class gF{constructor(e,t,r,n){let a,i;this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r0.assert(e.length>2,()=>`Packed arg${r.charAt(0).toUpperCase()+r.slice(1)} supports only inputs with rank above 2.`);let s=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),n||this.variableNames.push("bestIndicesA");let o=this.outputShape,l=o.length,u=cN(l),d=mB("coords",l);if(1===s){let e=cN(i=l+1);a=`
        ${e} sourceLocR = ${e}(${d.join()}, 0);
        ++${d[l-1]};
        ${e} sourceLocG = ${e}(${d.join()}, 0);
        ++${d[l-2]};
        ${e} sourceLocA = ${e}(${d.join()}, 0);
        --${d[l-1]};
        ${e} sourceLocB = ${e}(${d.join()}, 0);
        --${d[l-2]};`}else i=l,a=`
        ${u} sourceLocR = coords;
        ++${d[l-1]};
        ${u} sourceLocG = coords;
        ++${d[l-2]};
        ${u} sourceLocA = coords;
        --${d[l-1]};
        ${u} sourceLocB = coords;
        --${d[l-2]};`;let h=["x","y","z","w","u","v"].slice(0,i),p="."+h[i-1],c=h.map(e=>"int "+e),f=mB("sourceLocR",i-1).concat("inIdx.r"),m=mB("sourceLocG",i-1).concat("inIdx.g"),g=mB("sourceLocB",i-1).concat("inIdx.b"),y=mB("sourceLocA",i-1).concat("inIdx.a"),x="max"===r?"greaterThan":"lessThan",b=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${f.join()}),
                             getBestIndicesAChannel(${m.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(
            getAChannel(${f.join()}),
            hasNextCol ? getAChannel(${m.join()}) : 0.,
            hasNextRow ? getAChannel(${g.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,w=n?"":`
      float getBestIndicesAChannel(${c.join()}) {
        return getChannel(getBestIndicesA(${h.join()}),
                                          vec2(${h.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${c.join()}) {
        return getChannel(getA(${h.join()}),
                               vec2(${h.slice(-2).join()}));
      }
      ${w}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${d[l-1]} < ${o[l-1]-1};
        bool hasNextRow = ${d[l-2]} < ${o[l-2]-1};
        ${a}
        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},
          sourceLocB${p}, sourceLocA${p}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${b}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}function gP(e,t,r,n){let a=[r];if(sl.assertAxesAreInnerMostDims("arg"+n.charAt(0).toUpperCase()+n.slice(1),a,t.shape.length),!eb.getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let r=[],i=e.texData.get(t.dataId),s=null!==i&&i.isPacked,o=t;s&&r.push(o=e.unpackTensor(t));let[l,u]=sl.computeOutAndReduceShapes(o.shape,a),d=gg({inputs:{x:o},backend:e,attrs:{shape:[-1,r0.sizeFromShape(u)]}});r.push(d);let h=function e(t,r,n,a=null){let i=r.shape[0],s=r.shape[1];null!=a&&(i=a.shape[0],s=a.shape[1]);let o=sl.computeOptimalWindowSize(s),l=new gO({windowSize:o,inSize:s,batchSize:i,outSize:Math.ceil(s/o)},n,null==a),u=[r];null!=a&&u.push(a);let d=t.runWebGLProgram(l,u,"int32");if(1===d.shape[1])return d;let h=e(t,r,n,d);return t.disposeIntermediateTensorInfo(d),h}(e,d,n);r.push(h);let p=gg({inputs:{x:h},backend:e,attrs:{shape:l}});return r.forEach(t=>e.disposeIntermediateTensorInfo(t)),p}return function e(t,r,n,a=null){let i=null!=a?a.shape:r.shape,s=i[i.length-1],o=new gF(i,sl.computeOptimalWindowSize(s),n,null==a),l=null==a?[r]:[r,a],u=t.runWebGLProgram(o,l,"int32");if(u.shape.length===r.shape.length){let a=e(t,r,n,u);return t.disposeIntermediateTensorInfo(u),a}return u}(e,t,n)}const gD=gl({opSnippet:mK+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`}),gL=gl({opSnippet:mK+"return log(x + sqrt(x * x + 1.0));"}),gM=gl({opSnippet:mK+`
  return atan(x);
`}),gB=gu({opSnippet:m8+`
  return atan(a, b);
`,packedOpSnippet:`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+m9+`
  return result;
`}),gz=gl({opSnippet:mK+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`});class gU{constructor(e,t,r,n=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&r)throw Error("Cannot compute positions for average pool.");let i=e.filterWidth,s=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,c=e.padInfo.left;this.outputShape=e.outShape;let f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,y="0.0";if(f||(y="-1.0 / 1e-20"),r){this.userCode=`
        const ivec2 strides = ivec2(${s}, ${o});
        const ivec2 pads = ivec2(${p}, ${c});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${d};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${h};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value >= currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?a?m:g:`wR * ${h} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / max(count, 1.0)");let b=4*Math.floor(i/4),v=i%4,w=`
      if (${f}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${o});
      const ivec2 pads = ivec2(${p}, ${c});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${d};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${b}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${w}
          }

          int xC = xCCorner + ${b};
          if (${1===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${w}
          } else if (${2===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${w}
          } else if (${3===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${w}
          }
        }
        setOutput(${x});
      }
    `}}class gW{constructor(e,t,r,n=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&r)throw Error("Cannot compute positions for average pool.");let i=e.filterWidth,s=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,d=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,c=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;let x="avg"===t,b="0.0";if(x||(b="-1.0 / 1e-20"),r){this.userCode=`
        const ivec3 strides =
            ivec3(${s}, ${o}, ${l});
        const ivec3 pads = ivec3(${m}, ${g}, ${y});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${c};
                wR += ${d}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${f};
                  wC += ${h}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value >= currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${c} * ${f} +
                      wR * ${f} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / max(count, 1.0)");let w=4*Math.floor(i/4),S=i%4,k=`
      if (${x}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${s}, ${o}, ${l});
      const ivec3 pads = ivec3(${m}, ${g}, ${y});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${c};
            wR += ${d}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${w}; wC += 4) {
              int xC = xCCorner + wC * ${h};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                getValue(batch, xD, xR, xC + 3 * ${h}, ch)
              );

              ${k}
            }

            int xC = xCCorner + ${w};
            if (${1===S}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${k}
            } else if (${2===S}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                initializationValue,
                initializationValue
              );

              ${k}
            } else if (${3===S}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                initializationValue
              );

              ${k}
            }
          }
        }
        setOutput(${v});
      }
    `}}class gV{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,n=e.strideHeight,a=e.strideWidth,i=e.dilationHeight,s=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,d=l-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${u}, ${d});
      const float avgMultiplier = float(${1/(t*r)});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${s}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class gG{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,r=e.filterHeight,n=e.filterWidth,a=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,d=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,c=d-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${c}, ${f}, ${m});
      const float avgMultiplier = float(${1/(t*r*n)});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${h};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class gH{constructor(e,t,r,n,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],sl.assertAndGetBroadcastShape(e,t),sl.assertAndGetBroadcastShape(e,r);let s="0.0";null!=n&&(sl.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let o="1.0";null!=a&&(sl.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${s};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}class gj{constructor(e,t,r,n,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],sl.assertAndGetBroadcastShape(e,t),sl.assertAndGetBroadcastShape(e,r);let s="vec4(0.0)";null!=n&&(sl.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(sl.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${s};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}}class gK{constructor(e){let t;this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let r=cN(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let n=function(e){if(1===e)return"sourceLoc";if(e<=6)return gq.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank),a=e.map((e,t)=>`sourceLoc.${gq[t]} = start[${t}] + coords.${gq[t]};`);t=`
        ${r} sourceLoc;
        ${r} coords = getOutputCoords();
        ${a.join("\n")}
      `,this.userCode=`
      void main() {
        ${t}
        setOutput(getSource(${n}));
      }
    `}}const gq=["x","y","z","w","u","v"];class gX{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=cN(this.rank),r=mB("coords",this.rank),n=mB("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${a})`,s=`
      result.x = ${i};
      if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,o=1===this.rank?"":`
      --${r[this.rank-1]};
      if (++${r[this.rank-2]} < ${e[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,l=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${n[t]} = ${r[t]} + start[${t}];`).join("\n");this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${l}
        vec4 result = vec4(0.);
        ${s}
        ${o}
        setOutput(result);
      }
    `}}function gY(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{begin:i,size:s}=n,[o,l]=s6.parseSliceParams(a,i,s);if(s6.assertParamsValid(a,o,l),0===r0.sizeFromShape(l))return r.makeTensorInfo(l,a.dtype,[]);if(r.shouldExecuteOnCPU([a])||"string"===a.dtype){let e=mk(r.texData.get(a.dataId).values,o,l,a.shape,a.dtype);return r.makeTensorInfo(l,a.dtype,e)}let{isPacked:u}=r.texData.get(a.dataId),d=s6.isSliceContinous(a.shape,o,l);if(u||!d){let e=eb.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gX(l):new gK(l),t=[o];return r.runWebGLProgram(e,[a],a.dtype,t)}return r.uploadToGPU(a.dataId),function(e,t,r,n){let a=n.texData.get(e.dataId),i=n.makeTensorInfo(r,e.dtype),s=n.texData.get(i.dataId);Object.assign(s,a),s.refCount=1,s.shape=r,s.dtype=e.dtype;let o=s6.computeFlatOffset(t,r0.computeStrides(e.shape));a.slice&&(o+=a.slice.flatOffset),s.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};let l=n.dataRefCount.get(s.slice.origDataId)||1;return n.dataRefCount.set(s.slice.origDataId,l+1),i}(a,o,l,r)}const gQ=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,gZ=`
  return float(int(a.r) & int(b.r));
`,gJ=gu({opSnippet:"return float(a != b);",cpuKernelImpl:mc,dtype:"bool"});function g0(e){let{inputs:t,backend:r}=e,{input:n}=t;return gt({inputs:{x:r.texData.get(n.dataId).complexTensorInfos.real},backend:r})}const g1="return ceil(x);",g2=gl({opSnippet:g1,packedOpSnippet:g1,cpuKernelImpl:f4});class g3{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}class g4{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}class g6{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}function g5(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}class g8{constructor(e){this.outputShape=[],this.outputShape=sl.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);let t=Array(e.length-1);t[0]=e[0][1];for(let r=1;r<t.length;r++)t[r]=t[r-1]+e[r][1];let r=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){let n=t[e-1];r.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${n}));`)}let n=t.length,a=t[t.length-1];r.push(`else setOutput(getT${n}(yR, yC-${a}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${r.join("\n        ")}
      }
    `}}class g7{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=sl.computeOutShape(e,t);let r=this.outputShape,n=r.length,a=cN(n),i=mB("coords",n),s=["x","y","z","w","u","v"].slice(0,n);this.variableNames=e.map((e,t)=>`T${t}`);let o=Array(e.length-1);o[0]=e[0][t];for(let r=1;r<o.length;r++)o[r]=o[r-1]+e[r][t];let l=s[t],u=s.slice(-2),d=s.join(),h=`if (${l} < ${o[0]}) {
        return getChannel(
            getT0(${d}), vec2(${u.join()}));
        }`;for(let e=1;e<o.length;e++){let t=o[e-1];h+=`
        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {
          return getChannel(
            getT${e}(${g9(s,l,t)}),
            vec2(${g9(u,l,t)}));
        }`}let p=o.length,c=o[o.length-1];h+=`
        return getChannel(
          getT${p}(${g9(s,l,c)}),
          vec2(${g9(u,l,c)}));`,this.userCode=`
      float getValue(${s.map(e=>"int "+e)}) {
        ${h}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${r[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${r[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${r[n-2]} &&
            ${i[n-1]} < ${r[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}}function g9(e,t,r){let n=e.indexOf(t);return e.map((e,t)=>t===n?`${e} - ${r}`:e).join()}function ye(e){let{inputs:t,backend:r}=e,{input:n}=t;return gt({inputs:{x:r.texData.get(n.dataId).complexTensorInfos.imag},backend:r})}function yt(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n,i=r0.parseAxisParam(a,t[0].shape)[0],s=t.map(e=>e.shape);sl.assertParamsConsistent(s,i);let o=sl.computeOutShape(t.map(e=>e.shape),i);if(0===r0.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>r0.sizeFromShape(e.shape)>0);return 1===l.length?gt({inputs:{x:l[0]},backend:r}):function e(t,r,n){let a=t[0].dtype;if("complex64"===a){let a=t.map(e=>g0({inputs:{input:e},backend:n})),i=t.map(e=>ye({inputs:{input:e},backend:n})),s=e(a,r,n),o=e(i,r,n),l=gr({inputs:{real:s,imag:o},backend:n});return a.forEach(e=>n.disposeIntermediateTensorInfo(e)),i.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}let i=n.shouldExecuteOnCPU(t);if("string"===a&&(i=!0),i){let e=t.map(e=>{let t=r0.sizeFromShape(e.shape.slice(r));return gg({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),i=e.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),s=f6(i,sl.computeOutShape(e.map(e=>e.shape),1),a,1===e[0].shape[0]),o=sl.computeOutShape(t.map(e=>e.shape),r),l=n.makeTensorInfo(o,a,s);return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}let s=t.filter(e=>r0.sizeFromShape(e.shape)>0),o=eb.getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&s[0].shape.length>1;if(1===s.length){let e=o?new mj(t[0].shape,mQ):new m1(t[0].shape,mQ);return n.runWebGLProgram(e,t,a)}let l=eb.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(s.length>l){let t=[];for(let a=0;a<s.length;a+=l){let i=s.slice(a,a+l);t.push(e(i,r,n))}let a=e(t,r,n);for(let e of t)n.disposeIntermediateTensorInfo(e);return a}if(o){let e=new g7(s.map(e=>e.shape),r);return n.runWebGLProgram(e,s,a)}let{tensors2D:u,outShape:d}=function(e,t,r){let n=sl.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>gg({inputs:{x:e},attrs:{shape:[-1,r0.sizeFromShape(e.shape.slice(t))]},backend:r})),outShape:n}}(s,r,n),h=new g8(u.map(e=>e.shape)),p=n.runWebGLProgram(h,u,a);u.forEach(e=>n.disposeIntermediateTensorInfo(e));let c=gg({inputs:{x:p},attrs:{shape:d},backend:n});return n.disposeIntermediateTensorInfo(p),c}(l,i,r)}class yr{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let i=e.padInfo.top,s=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,d=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g="",y="";r&&(g=n?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`
          float activation(float x) {
            ${r}
          }
        `,y="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${g}

      const ivec2 strides = ivec2(${o}, ${l});
      const ivec2 pads = ivec2(${i}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${m?3:1}];

        ivec2 xRCCorner =
            ivec2(coords[${m?1:2}], coords[${m?2:3}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${h}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${d};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${c}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${1===f}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${c}) *
                    getW(wR, wC, ${c}, d2);
              } else {
                dotProd +=
                    getX(batch, ${c}, xR, xC) *
                    getW(wR, wC, ${c}, d2);
              }

            } else if (${2===f}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${3===f}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2),
                getW(wR, wC, ${c} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1),
                  getX(batch, xR, xC, ${c} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC),
                  getX(batch, ${c} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${y}
        setOutput(result);
      }
    `}}class yn{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,r=e.padInfo.top,n=e.padInfo.left,a=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,d=e.filterDepth,h=e.filterHeight,p=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${a}, ${i}, ${s});
      const ivec3 pads = ivec3(${t}, ${r}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${d}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${c}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${1===f}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${c}) *
                  getW(wF, wR, wC, ${c}, d2);
              } else if (${2===f}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${3===f}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1),
                  getX(batch, xF, xR, xC, ${c} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2),
                  getW(wF, wR, wC, ${c} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class ya{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cF(this.outputShape.length);let i=e.padInfo.left,s=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,d=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<u;e++)d+=`
           vec4 xTexelC${2*e};
           int xTexelC${2*e}Ready;
           vec4 xTexelC${2*e+1};
           int xTexelC${2*e+1}Ready;
           vec4 xC${e};`;d+=`
     for (int r = 0; r < ${l}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let e=0;e<u;e++)d+=`
           xTexelC${2*e} = vec4(0.0);
           xTexelC${2*e}Ready = 0;
           xTexelC${2*e+1} = vec4(0.0);
           xTexelC${2*e+1}Ready = 0;
           xC${e} = vec4(0.0);`;d+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let t=0;t<(u+1)/2;t++){let r=2*t;if(d+=`
           xC = xCCorner + ${r*o};
           `,1===s){if(r<u&&(i%2==1?(d+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }
               `,1===o&&r>0?d+=`
                 xC${r} = vec4(xTexelC${r-2}.zw, xTexelC${r}.xy);
                 `:d+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${r} = vec4(previous.zw, xTexelC${r}.xy);
                   } else {
                     xC${r} = vec4(0.0, 0.0, xTexelC${r}.xy);
                   }
                   `):d+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 xC${r} = xTexelC${r};
                 `,r+1<u)){let e=i%2==0?r0.nearestLargerEven(o):o;o%2==0&&i%2==1||o%2!=0&&i%2!=1?(d+=`
                   xCOffset = xC + imod(pads[1], 2) + ${e};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                     xTexelC${r+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${r+1}.zw = vec2(0.0);
                     }
                     xTexelC${r+1}Ready = 1;
                   }
                   `,o>1?d+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${r+1} = vec4(previous.zw, xTexelC${r+1}.xy);
                     } else {
                      xC${r+1} = vec4(0.0, 0.0, xTexelC${r+1}.xy);
                     }
                     `:d+=`
                     xC${r+1} = vec4(xTexelC${r}.zw, xTexelC${r+1}.xy);
                     `):1===e?d+=`
                     xC${r+1} = xTexelC${r};
                     `:d+=`
                     xCOffset = xC + ${e};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                       xTexelC${r+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${r+1}.zw = vec2(0.0);
                       }
                       xTexelC${r+1}Ready = 1;
                     }

                     xC${r+1} = xTexelC${r+1};
                     `}}else r<u&&(i%2==1?(d+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${r+1}Ready == 0) {
                   xTexelC${r+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${r+1}.zw = vec2(0.0);
                   }
                   xTexelC${r+1}Ready = 1;
                 }

                 xC${r} = vec4(xTexelC${r}.zw, xTexelC${r+1}.zw);
               `,r+1<u&&(d+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${r+1} = vec4(xTexelC${r+1}.xy, final.xy);
                 `)):(d+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                   xTexelC${r+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r+1}.zw = vec2(0.);
                   }
                   xTexelC${r+1}Ready = 1;
                 }

                 xC${r} = vec4(
                   xTexelC${r}.xy, xTexelC${r+1}.xy);
               `,r+1<u&&(d+=`
                   xC${r+1} = vec4(xTexelC${r}.zw, xTexelC${r+1}.zw);
                 `)));r<u&&(d+=`
             wTexel = getW(r, ${r}, d1, d2);
             dotProd += xC${r}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${r}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,r+1<u&&(d+=`
               wTexel = getW(r, ${r+1}, d1, d2);
               dotProd += xC${r+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${r+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}d+=`
     }
   
     }
   
     }
   `;let h="",p="";r&&(h=n?`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${r}
         }`:a?`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${r}
         }`:`vec4 activation(vec4 x) {
           ${r}
         }`,p="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${h}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${t?"result += getBiasAtOutCoords();":""}
         ${p}
         setOutput(result);
       }
     `}}class yi{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=cF(this.outputShape.length);let{dataFormat:r}=t,n=cf(),a="channelsLast"===r,i=a?1:2,s=a?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`
          blockIndex = rc.z + ${t};
          pos = rc.y + ${e};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${s}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${l}

        ${n.output} = result;
      }
    `}}function ys(e,t){let r=e.length;return r>=3?t?[...e.slice(0,-3),e[r-3]*e[r-2],e[r-1]]:[...e.slice(0,-3),e[r-3],e[r-2]*e[r-1]]:!t&&1===r&&e[0]>1?[e[0],1]:null}function yo({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u=e.shape,d=n.texData.get(e.dataId),h=r.inChannels,p=u[0]*u[1]*u[2],c=r.outChannels,f="channelsLast"===r.dataFormat,m=[];if(null!=i){let e=ys(i.shape,f);null!=e&&(i=gg({inputs:{x:i},backend:n,attrs:{shape:e}}),m.push(i))}if(null!=a){let e=ys(a.shape,f);null!=e&&(a=gg({inputs:{x:a},backend:n,attrs:{shape:e}}),m.push(a))}if(!((1===p||1===c)&&h>1e3)&&d.isPacked&&f&&null!=d.texture&&u[2]%2!=0&&r0.arraysEqual(d.shape.slice(-3),u.slice(-3))){let h=u[0]*u[1]*(u[2]+1),p={dataId:e.dataId,shape:[1,h,r.inChannels],dtype:e.dtype},c=d.shape;d.shape=d.shape.slice(),d.shape[d.shape.length-2]++,r0.assert(cl(d.shape,p.shape),()=>`packed reshape ${d.shape} to ${p.shape} isn't free`);let f=gg({inputs:{x:t},backend:n,attrs:{shape:[1,r.inChannels,r.outChannels]}});m.push(f);let g=gI({a:p,b:f,backend:n,transposeA:!1,transposeB:!1,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),y=n.texData.get(g.dataId);r0.assert(y.isPacked,()=>"batchMatMul result is expected to be packed"),d.shape=c,y.shape=r.outShape,(l=gt({inputs:{x:g},backend:n})).shape=r.outShape,m.push(g)}else{let u=r.outHeight*r.outWidth,d=gg({inputs:{x:e},backend:n,attrs:{shape:f?[r.batchSize,u,r.inChannels]:[r.batchSize,r.inChannels,u]}}),h=gg({inputs:{x:t},backend:n,attrs:{shape:[1,r.inChannels,r.outChannels]}}),p=gI({a:f?d:h,b:f?h:d,transposeA:!f,transposeB:!1,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s});l=gg({inputs:{x:p},backend:n,attrs:{shape:r.outShape}}),m.push(d),m.push(h),m.push(p)}for(let e of m)n.disposeIntermediateTensorInfo(e);return l}function yl({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:d,outWidth:h,outHeight:p,dataFormat:c}=r,f="channelsLast"===c,m=l*u*d,g=p*h,y=[r.batchSize,m,g],x=[];if(null!=i){let e=ys(i.shape,f);null!=e&&(i=gg({inputs:{x:i},backend:n,attrs:{shape:e}}),x.push(i))}if(null!=a){let e=ys(a.shape,f);null!=e&&(a=gg({inputs:{x:a},backend:n,attrs:{shape:e}}),x.push(a))}let b=gg({inputs:{x:t},backend:n,attrs:{shape:[1,m,r0.sizeFromShape(t.shape)/m]}});x.push(b);let v=new yi(y,r),w=[e.shape,[r.padInfo.top,r.padInfo.left],[r.strideHeight,r.strideWidth],[r.dilationHeight,r.dilationWidth],[r.inChannels],[r.filterWidth*r.inChannels],[r.outWidth]],S=n.runWebGLProgram(v,[e],"float32",w),k=gg({inputs:{x:S},backend:n,attrs:{shape:y}});x.push(S),x.push(k);let C=null!=a,I=null!=i,T="leakyrelu"===o,$=o?gd(o,!0):null,N=new gh(f?k.shape:b.shape,f?b.shape:k.shape,f?[r.batchSize,g,r.outChannels]:[r.batchSize,r.outChannels,g],!0,!1,C,$,I,T),E=f?[k,b]:[b,k];if(a&&E.push(a),I&&E.push(i),T){let e=n.makeTensorInfo([],"float32",r0.createScalarValue(s,"float32"));E.push(e),x.push(e)}let R=n.runWebGLProgram(N,E,"float32"),A=gg({inputs:{x:R},backend:n,attrs:{shape:r.outShape}});for(let e of(x.push(R),x))n.disposeIntermediateTensorInfo(e);return A}class yu{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,r=e.strideWidth,n=e.padInfo.top,a=e.padInfo.left,i="channelsLast"===e.dataFormat;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${i?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class yd{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,n=e.strideHeight,a=e.strideWidth,i="channelsLast"===e.dataFormat,s=t-1-e.padInfo.top,o=r-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${i?3:1}];

        ivec2 dyCorner = ivec2(coords[${i?1:2}], coords[${i?2:3}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class yh{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,r=e.strideHeight,n=e.strideWidth,a=e.padInfo.front,i=e.padInfo.top,s=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${r} - ${i};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${s};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class yp{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,r=e.filterHeight,n=e.filterWidth,a=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=t-1-e.padInfo.front,l=r-1-e.padInfo.top,u=n-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${o}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${r}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${r} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class yc{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=cF(this.outputShape.length);let t=e.filterHeight,r=e.filterWidth,n=t-1-e.padInfo.top,a=r-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${n}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            int wCPerm = ${r} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}}const yf=gl({opSnippet:go+`
  return cos(x);
`,packedOpSnippet:`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${m9}
  return result;
`}),ym=gl({opSnippet:`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`});class yg{constructor(e,t,r,n,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,s,o,l]=e,[u]=t,[d,h]=r;this.outputShape=[u,d,h,l];let[p,c]=[`${s-1}.0`,`${o-1}.0`],[f,m,g]=d>1?[`${(s-1)/(d-1)}`,"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[y,x,b]=h>1?[`${(o-1)/(h-1)}`,"(x2-x1) * width_ratio",`x1*${c} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${c}`];this.userCode=`
      const float height_ratio = float(${f});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${m};
        float width_scale = ${x};

        float in_y = ${g};
        if( in_y < 0.0 || in_y > ${p} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${b};
        if( in_x < 0.0 || in_x > ${c} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${+("bilinear"===n)} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}(TI=TK||(TK={})).Prod="*",TI.Sum="+";class yy{constructor(e,t,r,n){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let a=this.outputShape.length,i=this.op===TK.Prod?"1.0":"0.0",s=r?i:`getX(${yx(a,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1],l="",u="";r?(l=n?`end != ${o-1}`:"end != 0",u=n?"end + 1":"end - 1"):(l=n?`end + pow2 < ${o}`:"end >= pow2",u=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${cN(a)} coords = getOutputCoords();
        int end = ${yb(a,"coords",this.op)};
        float val = ${s};
        int pow2 = int(pow(2.0, index));
        if (${l}) {
          int idx = ${u};
          ${yb(a,"coords",this.op)} = idx;
          val ${this.op}= getX(${yx(a,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function yx(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function yb(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function yv(e,t,r,n,a,i){let s=t.shape.length,o=sl.getAxesPermutation([n],s),l=t;null!=o&&(l=gC({inputs:{x:t},backend:r,attrs:{perm:o}}));let u=sl.getInnerMostAxes(1,s)[0];if(u!==s-1)throw Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${n}`);let d=l.shape[u],h=gt({inputs:{x:l},backend:r});for(let t=0;t<=Math.ceil(Math.log2(d))-1;t++){let n=new yy(e,l.shape,!1,i),a=[[t]],s=h;h=r.runWebGLProgram(n,[h],h.dtype,a),r.disposeIntermediateTensorInfo(s)}if(a){let t=new yy(e,l.shape,a,i),n=h;h=r.runWebGLProgram(t,[h],h.dtype),r.disposeIntermediateTensorInfo(n)}if(null!=o){let e=gC({inputs:{x:h},backend:r,attrs:{perm:sl.getUndoAxesPermutation(o)}});return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(l),e}return h}class yw{constructor(e,t,r){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=r,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class yS{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cF(this.outputShape.length);let i=e.filterHeight,s=e.filterWidth,o=e.outChannels/e.inChannels,l="",u="";r&&(l=n?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`
          float activation(float x) {
            ${r}
          }
        `,u="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${l}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${s}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${u}
        setOutput(result);
      }
    `}}class yk{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cF(this.outputShape.length);let i=e.outChannels/e.inChannels,s=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,d=e.filterWidth,h=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<d;e++)h+=`
          vec4 xTexelC${2*e};
          int xTexelC${2*e}Ready;
          vec4 xTexelC${2*e+1};
          int xTexelC${2*e+1}Ready;
          vec4 xC${e};`;h+=`
    for (int r = 0; r < ${u}; r++) {
      `;for(let e=0;e<d;e++)h+=`
          xTexelC${2*e} = vec4(0.0);
          xTexelC${2*e}Ready = 0;
          xTexelC${2*e+1} = vec4(0.0);
          xTexelC${2*e+1}Ready = 0;
          xC${e} = vec4(0.0);`;h+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let e=0;e<(d+1)/2;e++){let t=2*e;if(h+=`
          xC = xCCorner + ${t*l};
          `,1===o){if(t<d&&(s%2==1?(h+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }
              `,1===l&&t>0?h+=`
                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);
                `:h+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);
                  } else {
                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);
                  }
                  `):h+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xC${t} = xTexelC${t};
                `,t+1<d)){let e=s%2==0?r0.nearestLargerEven(l):l;l%2==0&&s%2==1||l%2!=0&&s%2!=1?(h+=`
                  xCOffset = xC + imod(pads[1], 2) + ${e};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${t+1}.zw = vec2(0.0);
                    }
                    xTexelC${t+1}Ready = 1;
                  }
                  `,l>1?h+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);
                    } else {
                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);
                    }
                    `:h+=`
                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);
                    `):1===e?h+=`
                    xC${t+1} = xTexelC${t};
                    `:h+=`
                    xCOffset = xC + ${e};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${t+1}.zw = vec2(0.0);
                      }
                      xTexelC${t+1}Ready = 1;
                    }

                    xC${t+1} = xTexelC${t+1};
                    `}}else t<d&&(s%2==1?(h+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.0);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
              `,t+1<d&&(h+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);
                `)):(h+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(
                  xTexelC${t}.xy, xTexelC${t+1}.xy);
              `,t+1<d&&(h+=`
                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
                `)));t<d&&(h+=`
            wTexel = getW(r, ${t}, d1, q);
            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);
          `,t+1<d&&(h+=`
              wTexel = getW(r, ${t+1}, d1, q);
              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);
            `))}h+=`
    }
  
      }
    `;let p="",c="";r&&(p=n?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`vec4 activation(vec4 x) {
          ${r}
        }`,c="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${p}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${h}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${t?"result += getBiasAtOutCoords();":""}
        ${c}
        setOutput(result);
      }
    `}}class yC{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,r=e.strideWidth,n=e.padInfo.top,a=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class yI{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,n=e.strideHeight,a=e.strideWidth,i=t-1-e.padInfo.top,s=r-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class yT{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}class y${constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:r,padInfo:n,strideHeight:a,strideWidth:i,filterHeight:s,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:d,left:h}=n;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${i});
      const ivec2 pads = ivec2(${d}, ${h});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${s}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${r}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}const yN=gl({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`}),yE=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,yR=gu({opSnippet:"return float(a == b);",packedOpSnippet:`
  return vec4(equal(a, b));
`,dtype:"bool",cpuKernelImpl:f5}),yA=gl({opSnippet:`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${sl.ERF_P};
  float a1 = ${sl.ERF_A1};
  float a2 = ${sl.ERF_A2};
  float a3 = ${sl.ERF_A3};
  float a4 = ${sl.ERF_A4};
  float a5 = ${sl.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`}),y_=gl({opSnippet:go+`
  return exp(x);
`,packedOpSnippet:`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cpuKernelImpl:f8,dtype:"float32"});function yO(e){let{inputs:t,attrs:r,backend:n}=e,{dim:a}=r,{input:i}=t,s=i.shape.length,o=i.shape.slice(),l=a;return a<0&&(r0.assert(-(s+1)<=a,()=>`Axis must be in the interval [${-(s+1)}, ${s}]`),l=s+a+1),o.splice(l,0,1),gg({inputs:{x:i},backend:n,attrs:{shape:o}})}const yF="return exp(x) - 1.0;",yP=gl({opSnippet:yF,packedOpSnippet:yF,cpuKernelImpl:f7});class yD{constructor(e,t,r){let n;this.variableNames=["real","imag"];let a=t[1];this.outputShape=t;let i=r?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=r?`${a}.0`:"1.0";if("real"===e)n="return real * expR - imag * expI;";else if("imag"===e)n="return real * expI + imag * expR;";else throw Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${i};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${n}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${s};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}function yL(e,t,r){let n=r.texData.get(e.dataId),a=r0.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],s=gg({inputs:{x:e},backend:r,attrs:{shape:[a/i,i]}}),o=s.shape,l=new yD("real",o,t),u=new yD("imag",o,t),d=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:o},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:o}],h=r.runWebGLProgram(l,d,"float32"),p=r.runWebGLProgram(u,d,"float32"),c=gr({inputs:{real:h,imag:p},backend:r});r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p);let f=gg({inputs:{x:c},backend:r,attrs:{shape:e.shape}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(c),f}class yM{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}function yB(e){let{backend:t,attrs:r}=e,{shape:n,value:a}=r,{dtype:i}=r;if("string"===(i=i||r0.inferDtype(a))){let e=r0.getArrayFromDType(i,r0.sizeFromShape(n));return e.fill(a),t.makeTensorInfo(n,i,e)}{let e=new yM(n,a),r=[[a]];return t.runWebGLProgram(e,[],i,r)}}class yz{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}const yU="return floor(x);",yW=gl({opSnippet:yU,packedOpSnippet:yU,cpuKernelImpl:f9}),yV=gu({opSnippet:`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,packedOpSnippet:`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,dtype:"int32"});class yG{constructor(e){this.variableNames=["A"];let t=cf(),[r,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${r}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}class yH{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=cf(),[r,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${r}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}let yj=eb.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class yK{constructor(e,t,r,n){this.sliceDim=e,this.strides=t,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=r;let a=cN(r.length),i=`
    int index;`;for(let e=0;e<this.sliceDim;e++)i+=`
          index = round(getIndices(coords[0], ${e}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};
          flattenIndex += index * ${this.strides[e]};`;this.userCode=`
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}class yq{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let r=cN(this.rank),n=function(e,t){let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let t=0;t<e.length;t++)2===t?n.push("index"):n.push(`${r[t]}`);return n.join()}(e,0);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}}function yX(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,indices:i}=t,{axis:s,batchDims:o}=n,l=r0.parseAxisParam(s,a.shape)[0];if(eb.get("DEBUG")){let e=r.readSync(i.dataId),t=a.shape[l];for(let r=0;r<e.length;++r){let n=e[r];r0.assert(n<=t-1&&n>=0,()=>`GatherV2: the index value ${n} is not in [0, ${t-1}]`)}}let u=sl.segment_util.collectGatherOpShapeInfo(a,i,l,o),d=r0.sizeFromShape(i.shape),h=[],p=gg({inputs:{x:a},backend:r,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),c=gg({inputs:{x:i},backend:r,attrs:{shape:[u.batchSize,d/u.batchSize]}});h.push(p),h.push(c);let f=[u.batchSize,u.outerSize,d/u.batchSize,u.sliceSize];if(r.shouldExecuteOnCPU([a,i])||"string"===a.dtype){let e=r.bufferSync(c),t=mt(r.bufferSync(p),e,f);return h.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(u.outputShape,t.dtype,t.values)}let m=new yq(p.shape,f),g=r.runWebGLProgram(m,[p,c],p.dtype);h.push(g);let y=gg({inputs:{x:g},backend:r,attrs:{shape:u.outputShape}});return h.forEach(e=>r.disposeIntermediateTensorInfo(e)),y}const yY=gu({opSnippet:"return float(a > b);",packedOpSnippet:`
  return vec4(greaterThan(a, b));
`,cpuKernelImpl:mr,dtype:"bool"}),yQ=gu({opSnippet:"return float(a >= b);",packedOpSnippet:`
  return vec4(greaterThanEqual(a, b));
`,dtype:"bool",cpuKernelImpl:mn}),yZ=gl({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),yJ=gl({opSnippet:"return float(isinf(x));",dtype:"bool"}),y0=gl({opSnippet:"return float(isnan(x));",dtype:"bool"}),y1=gu({opSnippet:"return float(a < b);",packedOpSnippet:`
  return vec4(lessThan(a, b));
`,cpuKernelImpl:ma,dtype:"bool"}),y2=gu({opSnippet:"return float(a <= b);",packedOpSnippet:`
  return vec4(lessThanEqual(a, b));
`,cpuKernelImpl:mi,dtype:"bool"}),y3=gl({opSnippet:go+`
  return x < 0.0 ? 0./0. : log(x);
`,packedOpSnippet:`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,cpuKernelImpl:mo}),y4=gl({opSnippet:go+`
  return log(1.0 + x);
`}),y6=gu({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,dtype:"bool"}),y5=gl({opSnippet:"return float(!(x >= 1.0));"}),y8=gu({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,dtype:"bool"});class y7{constructor(e,t,r,n,a){let i;this.variableNames=["x"],this.outputShape=[];let s=e[3]-1;this.outputShape=e;let o=`float(${r}) + float(${n}) * sum`;i=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${t}; j <= ${t}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${s}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${i};
        setOutput(val);
      }
    `}}class y9{constructor(e,t,r,n,a){let i;this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let s=e[3]-1;this.outputShape=e;let o=`float(${r}) + float(${n}) * sum`;i=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${t};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${t}; j <= ${t}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${s}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${i};
        setOutput(result);
      }
    `}}class xe{constructor(e,t,r,n,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=r,this.alpha=n,this.beta=a,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${r});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${a})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}function xt(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{reductionIndices:s,keepDims:o}=a,l=i.shape.length,u=r0.parseAxisParam(s,i.shape),d=u,h=sl.getAxesPermutation(d,l),p=null!=h,c=n.shouldExecuteOnCPU([i]),f=i;if(p){if(c){let e=n.texData.get(f.dataId).values,t=Array(l);for(let e=0;e<t.length;e++)t[e]=i.shape[h[e]];let r=mD(e,i.shape,i.dtype,h,t);f=n.makeTensorInfo(t,i.dtype),n.texData.get(f.dataId).values=r}else f=gS(i,h,n);d=sl.getInnerMostAxes(d.length,l)}sl.assertAxesAreInnerMostDims("max",d,l);let[m,g]=sl.computeOutAndReduceShapes(f.shape,d),y=m;if(o&&(y=sl.expandShapeToKeepDim(m,u)),c){let e=ml(n.texData.get(f.dataId).values,r0.sizeFromShape(g),y,i.dtype);t=n.makeTensorInfo(y,i.dtype),n.texData.get(t.dataId).values=e}else t=function(e,t,r,n){let a=r0.sizeFromShape(t),i=r0.sizeFromShape(e.shape),s=gg({inputs:{x:e},attrs:{shape:[i/a,a]},backend:n}),o=gb(s,e.dtype,"max",n),l=gg({inputs:{x:o},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}(f,g,y,n);return p&&n.disposeIntermediateTensorInfo(f),t}const xr=gu({opSnippet:m8+`
  return max(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+m9+`
  return result;
`,cpuKernelImpl:mu});class xn{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,r=e.strideWidth,n=e.dilationHeight,a=e.effectiveFilterHeight,i=e.effectiveFilterWidth,s=a-1-e.padInfo.top,o=i-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${a*i-1} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class xa{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,r=e.strideHeight,n=e.strideWidth,a=e.dilationDepth,i=e.dilationHeight,s=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,d=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${d}, ${h}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${r}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${s}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${o*l*u-1} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}const xi=gu({opSnippet:m8+`
  return min(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+m9+`
  return result;
`,cpuKernelImpl:md});class xs{constructor(e,t,r){this.variableNames=["x"],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=cN(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),l=+("reflect"!==r);if(1===n){this.userCode=`
        int start = ${i};
        int end = ${s};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${l};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${l};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${i});
      ${a} end = ${a}(${s});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${l};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${o}));
      }
    `}}class xo{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=cN(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=mB("rc",n),l=mB("source",n),u=`${o[n-1]} < ${this.outputShape[n-1]}`,d=1===n?"source":`vec2(${l.slice(-2).join()})`,h=+("reflect"!==r),p="";if(1===n){let e=`
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${h};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${h};
        }
        source -= start;
      `;p=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${d});
        ${o[n-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${d});
        }
      `}else{let e=`
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${h}) +
                gte * ((end - 1) * 2 - source + ${h});
        source -= start;
      `;p=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${d});
        ${o[n-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${d});
        }
        rc = outputLoc;
        ${o[n-2]} += 1;
        if(${o[n-2]} < ${this.outputShape[n-2]}) {
          ${e}
          result[2] = getChannel(getX(${l.join()}), ${d});
          ${o[n-1]} += 1;
          if(${u}) {
            ${e}
            result[3] = getChannel(getX(${l.join()}), ${d});
          }
        }
      `}this.userCode=`
      const ${a} start = ${a}(${i});
      const ${a} end = ${a}(${s});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `}}const xl=gu({opSnippet:`if (b == 0.0) return NAN;
  return mod(a, b);`,packedOpSnippet:`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+m9+`
  return result;
`});class xu{constructor(e,t,r){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,r],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}const xd=gu({opSnippet:`
if (a == b) {
  return 1.0;
};
return a / b;`,packedOpSnippet:`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,checkOutOfBounds:!0}),xh="return a - b;",xp=gu({opSnippet:xh,packedOpSnippet:xh,supportsComplex:!0,cpuKernelImpl:mO});function xc(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{dim:i}=n,s=r0.parseAxisParam([i],a.shape),o=xt({inputs:{x:a},backend:r,attrs:{reductionIndices:s,keepDims:!1}}),l=sl.expandShapeToKeepDim(o.shape,s),u=gg({inputs:{x:o},backend:r,attrs:{shape:l}}),d=xp({inputs:{a:a,b:u},backend:r}),h=y_({inputs:{x:d},backend:r}),p=gk({inputs:{x:h},backend:r,attrs:{axis:s,keepDims:!1}}),c=gg({inputs:{x:p},backend:r,attrs:{shape:l}}),f=xd({inputs:{a:h,b:c},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(u),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(c),f}const xf=mK+`
  return -x;
`,xm=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,xg=pQ.nonMaxSuppressionV3Impl,xy=pQ.nonMaxSuppressionV4Impl,xx=pQ.nonMaxSuppressionV5Impl;class xb{constructor(e,t,r,n){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${r}),
                      float(index == coords.y)));
      }
    `}}function xv(e){let{inputs:t,backend:r}=e,{x:n}=t;if("complex64"!==n.dtype)return yB({attrs:{shape:n.shape,dtype:n.dtype,value:"string"===n.dtype?"":0},backend:r});{let e=g0({inputs:{input:n},backend:r}),t=xv({inputs:{x:e},backend:r}),a=ye({inputs:{input:n},backend:r}),i=xv({inputs:{x:a},backend:r}),s=gr({inputs:{real:t,imag:i},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),s}}class xw{constructor(e,t,r){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=cN(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(1===n){this.userCode=`
        int start = ${i};
        int end = ${s};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${i});
      ${a} end = ${a}(${s});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `}}class xS{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=cN(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=mB("rc",n),l=mB("source",n),u=`${o[n-1]} < ${this.outputShape[n-1]}`,d=1===n?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${o[n-1]} += 1;
       if(${u}) {
      `,1===n?"":`}
       rc = outputLoc;
       ${o[n-2]} += 1;
       if(${o[n-2]} < ${this.outputShape[n-2]}) {`,1===n?"":`  ${o[n-1]} += 1;
         if(${u}) {`],p=1===n?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",c="";for(let e=0,t=1===n?2:4;e<t;e++)c+=`
        ${h[e]}
        if (${p}) {
          result[${e}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${e}] = getChannel(getX(${l.join()}), ${d});
        }
      `;c+=1===n?"} ":"}}",this.userCode=`
      const ${a} start = ${a}(${i});
      const ${a} end = ${a}(${s});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${c}
        setOutput(result);
      }
    `}}const xk=e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{paddings:i,constantValue:s}=n;if(0===r0.sizeFromShape(a.shape))return yB({backend:r,attrs:{shape:i.map((e,t)=>e[0]+a.shape[t]+e[1]),value:s,dtype:a.dtype}});let o=eb.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xS(a.shape,i,s):new xw(a.shape,i,s),l=[[s]];return r.runWebGLProgram(o,[a],a.dtype,l)},xC=gu({opSnippet:`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,packedOpSnippet:`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+m9+`
  return result;
`}),xI=e=>{let{backend:t,attrs:r}=e,{start:n,stop:a,step:i,dtype:s}=r,o=mx(n,a,i,s);return t.makeTensorInfo([o.length],s,o)},xT=gl({opSnippet:"return 1.0 / x;"}),x$=gl({opSnippet:mK+`
  return (x < 0.0) ? 0.0 : x;
`,packedOpSnippet:`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`}),xN=gl({opSnippet:mK+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,packedOpSnippet:`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`});class xE{constructor(e,t,r,n,a){this.variableNames=["A"],this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],d=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/d[0]},
          ${u[1]/d[1]});
      const vec2 inputShapeRC = vec2(${s}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}class xR{constructor(e,t,r,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],d=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/d[0]},
          ${u[1]/d[1]},
          ${u[1]/d[1]});
      const vec3 inputShapeRC = vec3(${s}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${r-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}class xA{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,a]=t,[,i,s]=e,o=[r&&i>1?n-1:n,r&&s>1?a-1:a],l=[r&&i>1?i-1:i,r&&s>1?s-1:s],u=o[0]/l[0],d=o[1]/l[1],h=1/u,p=1/d,c=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${s}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class x_{constructor(e,t,r,n,a){this.variableNames=["A"],this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],d=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/d[0]},
          ${u[1]/d[1]});
      const vec2 inputShapeRC = vec2(${s}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${n?"0.5":"0.0"})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}class xO{constructor(e,t,r,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],d=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/d[0]},
          ${u[1]/d[1]},
          ${u[1]/d[1]});
      const vec3 inputShapeRC = vec3(${s}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${n?"0.5":"0.0"})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${r-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}class xF{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,a]=t,[,i,s]=e,o=[r&&i>1?n-1:n,r&&s>1?a-1:a],l=[r&&i>1?i-1:i,r&&s>1?s-1:s],u=o[0]/l[0],d=o[1]/l[1],h=1/u,p=1/d,c=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${s}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${r} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${r} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class xP{constructor(e,t){this.variableNames=["x"];let r=e.length;if(r>4)throw Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);if(this.outputShape=e,1===r){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let n=r=>-1!==t.indexOf(r)&&1!==e[r]?`${e[r]} - coords[${r}] - 1`:`coords[${r}]`,a=e.map((e,t)=>n(t)).join(","),i=cN(r);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}}class xD{constructor(e,t){var r,n,a;this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let i=e.length;if(i>4)throw Error(`WebGL backend: Reverse of rank-${i} tensor is not yet supported`);this.outputShape=e;let s=mB("rc",i),o=`${s[i-1]} + 1 < ${this.outputShape[i-1]}`,l=`${s[i-2]} + 1 < ${this.outputShape[i-2]}`,u=cN(i);function d(r){let n=e.map((n,a)=>{var i,s;return i=a,s=r,-1!==t.indexOf(i)&&1!==e[i]?`${e[i]} - ${s[i]} - 1`:`${s[i]}`}),a=n.join(","),i=n.slice(-2).join(",");return`getChannel(getX(${a}), vec2(${i}))`}1===i?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${u} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${d(s.slice())};
          if(${o}){
            result.g = ${(r=s.slice())[i-1]="("+r[i-1]+" + 1)",d(r)};
          }
          if(${l}) {
            result.b = ${(n=s.slice())[i-2]="("+n[i-2]+" + 1)",d(n)};
            if(${o}) {
              result.a = ${(a=s.slice())[i-1]="("+a[i-1]+" + 1)",a[i-2]="("+a[i-2]+" + 1)",d(a)};
            }
          }
          setOutput(result);
        }
    `}}class xL{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let r=e[1],n=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${r}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}const xM=gl({opSnippet:`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`}),xB=gl({opSnippet:"return inversesqrt(x);",cpuKernelImpl:mb});class xz{constructor(e,t,r,n,a,i,s=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=cN(a.length),u=cN(i.length),d="";1===r?d="i":2===r&&(d="i, j");let h=`getIndices(${d})`,p="";1===n?p="i":2===n&&(p="i, coords[1]");let c=`getUpdates(${p})`,f="";o&&(f="coords[0], coords[1]");let m=`getDefaultValue(${f})`;this.userCode=`
        ${l} strides = ${l}(${a});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${t>1?"strides[j]":"strides"};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${c};
              found = true;
            }
          }
          setOutput(mix(${m}, sum, float(found)));
        }
      `}}class xU{constructor(e,t,r,n,a,i,s=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;let l=cN(a.length),u=cN(i.length),d="";1===r?d="i":2===r&&(d="i, j");let h=`getIndices(${d})`,p="";1===n?p="i":2===n&&(p="i, coords[1]");let c=`getUpdates(${p})`,f="";o&&(f="coords[0], coords[1]");let m=`getDefaultValue(${f})`;this.userCode=`
        ${l} strides = ${l}(${a});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${h});
              flattenedIndex += index.xz * ${t>1?"strides[j]":"strides"};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${t>1?"strides[j + 1]":"strides"};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${c};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${m}, sum, found));
        }
      `}}class xW{constructor(e,t,r,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,r];let a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,i=2===eb.getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${"left"===n?"<":"<="} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}class xV{constructor(e,t,r){let n,a;if(this.variableNames=["c","a","b"],this.outputShape=t,r>4)throw Error(`Where for rank ${r} is not yet supported`);if(1===r)a="resRC",n="resRC";else{let r=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],s=[];for(let n=0;n<t.length;n++)s.push(`${r[n]}`),n<e&&i.push(`${r[n]}`);n=i.join(),a=s.join()}let i=cN(r);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `}}const xG=gl({opSnippet:`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${sl.SELU_SCALEALPHA};
  float scale = ${sl.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`}),xH=gl({opSnippet:go+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,packedOpSnippet:`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cpuKernelImpl:mw}),xj=gl({opSnippet:`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`}),xK=gl({opSnippet:go+`
  return sin(x);
`,packedOpSnippet:`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${m9}
  return result;
`}),xq=gl({opSnippet:`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`}),xX=gl({opSnippet:`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`}),xY="return sqrt(x);",xQ=gl({opSnippet:xY,packedOpSnippet:xY,cpuKernelImpl:m$}),xZ=gl({opSnippet:"return x * x;"}),xJ="return (a - b) * (a - b);",x0=gu({opSnippet:xJ,packedOpSnippet:xJ});class x1{constructor(e,t,r){this.variableNames=["x"],this.outputShape=r;let n=r.length,a=cN(r.length),i=cN(r.length),s="";if(1===n)s="coords * strides + begin";else{let e=0;s=r.map((t,n)=>(e++,1===r.length?`coords * strides[${n}] + begin[${n}]`:`coords[${e-1}] * strides[${n}] + begin[${n}]`)).join(",")}this.userCode=`
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}}const x2=gl({opSnippet:"return tan(x);"}),x3=gl({opSnippet:`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`});class x4{constructor(e,t){this.variableNames=["A"];let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[n]*t[n];this.outputShape=r,this.rank=r.length;let n=cN(this.rank),a=function(e){let t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;let r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],n=[];for(let t=0;t<e.length;t++)n.push(`imod(${r[t]}, ${e[t]})`);return n.join()}(e);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}}function x6(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reps:i}=n;if("string"===a.dtype||a.shape.length>5){let e=r.readSync(a.dataId),t="string"===a.dtype?e.map(e=>r0.decodeString(e)):e,n=mF(iW(a.shape,a.dtype,t),i);return r.makeTensorInfo(n.shape,n.dtype,n.values)}let s=new x4(a.shape,i);return r.runWebGLProgram(s,[a],a.dtype)}class x5{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class x8{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}function x7(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function x9(e){let t=1;for(;t<e;)t*=2;return t}class be{constructor(e,t,r,n,a,i){let s;switch(this.variableNames=["Image","Transforms"],this.outputShape=i,n){case"constant":default:s=1;break;case"reflect":s=2;break;case"wrap":s=3;break;case"nearest":s=4}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${s} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${s} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${s} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${"nearest"===r?1:2} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}class bt{constructor(e,t){this.variableNames=["x","segmentIds"];let r=e.windowSize,n=e.batchSize,a=e.inSize,i=e.numSegments,s=i*Math.ceil(a/r);this.outputShape=[n,s];let o=4*Math.floor(r/4),l=r%4,u=`
        sumValue += dot(values, segFilter);
    `,d="";a%r>0&&(d=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);let h="";a%r>0&&(h=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${r}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${o}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${u}
        }

        int inIdx = inOffset + ${o};
        if (${1===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${u}
        } else if (${2===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${u}
        } else if (${3===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${u}
        }
        setOutput(sumValue);
      }
    `}}for(const e of[{kernelName:rV,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i,bias:s,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:d,leakyreluAlpha:h}=n;return gI({a:a,b:i,transposeA:l,transposeB:u,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:h,activation:d})}},{kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n}=e,{x:a}=r;if(n.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){let e=mS(n.texData.get(a.dataId).values);return n.makeTensorInfo(a.shape,a.dtype,e)}return t=eb.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new m1(a.shape,gT):new mj(a.shape,gT),n.runWebGLProgram(t,[a],a.dtype)}},{kernelName:ek,backendName:"webgl",kernelFunc:g$},{kernelName:eC,backendName:"webgl",kernelFunc:gN},{kernelName:"Add",backendName:"webgl",kernelFunc:gR},{kernelName:eI,backendName:"webgl",kernelFunc:function e(t){let{inputs:r,backend:n}=t;if(1===r.length)return gt({inputs:{x:r[0]},backend:n});if(r.length>eb.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){let t=Math.floor(r.length/2),a=e({inputs:r.slice(0,t),backend:n}),i=e({inputs:r.slice(t),backend:n});return e({inputs:[a,i],backend:n})}let a=r.map(e=>e.dtype).reduce((e,t)=>nY(e,t)),i=r.map(e=>e.shape),s=eb.getBool("WEBGL_PACK")?new g_(r[0].shape,i):new gA(r[0].shape,i);return n.runWebGLProgram(s,r,a)}},{kernelName:"All",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=r0.parseAxisParam(s,i.shape),d=u,h=sl.getAxesPermutation(d,l),p=i;null!=h&&(p=gC({inputs:{x:i},backend:n,attrs:{perm:h}}),d=sl.getInnerMostAxes(d.length,l)),sl.assertAxesAreInnerMostDims("all",d,l);let[c,f]=sl.computeOutAndReduceShapes(p.shape,d),m=gg({inputs:{x:p},backend:n,attrs:{shape:[-1,r0.sizeFromShape(f)]}}),g=gb(m,m.dtype,"all",n);return t=o?gg({inputs:{x:g},backend:n,attrs:{shape:sl.expandShapeToKeepDim(c,u)}}):gg({inputs:{x:g},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),t}},{kernelName:"Any",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=r0.parseAxisParam(s,i.shape),d=u,h=sl.getAxesPermutation(d,l),p=i;null!=h&&(p=gC({inputs:{x:i},backend:n,attrs:{perm:h}}),d=sl.getInnerMostAxes(d.length,l)),sl.assertAxesAreInnerMostDims("any",d,l);let[c,f]=sl.computeOutAndReduceShapes(p.shape,d),m=gg({inputs:{x:p},backend:n,attrs:{shape:[-1,r0.sizeFromShape(f)]}}),g=gb(m,m.dtype,"any",n);return t=o?gg({inputs:{x:g},backend:n,attrs:{shape:sl.expandShapeToKeepDim(c,u)}}):gg({inputs:{x:g},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),t}},{kernelName:eT,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=r0.parseAxisParam(i,a.shape),o=sl.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=gC({inputs:{x:a},backend:r,attrs:{perm:o}})),s=sl.getInnerMostAxes(s.length,l.shape.length)),sl.assertAxesAreInnerMostDims("argMax",[s[0]],l.shape.length);let d=gP(r,l,s[0],"max");return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),d}},{kernelName:e$,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=r0.parseAxisParam(i,a.shape),o=sl.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=gC({inputs:{x:a},backend:r,attrs:{perm:o}})),s=sl.getInnerMostAxes(s.length,l.shape.length)),sl.assertAxesAreInnerMostDims("argMin",[s[0]],l.shape.length);let d=gP(r,l,s[0],"min");return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),d}},{kernelName:eN,backendName:"webgl",kernelFunc:gD},{kernelName:eE,backendName:"webgl",kernelFunc:gL},{kernelName:eR,backendName:"webgl",kernelFunc:gM},{kernelName:e_,backendName:"webgl",kernelFunc:gB},{kernelName:eA,backendName:"webgl",kernelFunc:gz},{kernelName:eO,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t;cp(a,"avgPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n;r0.assert(sl.eitherStridesOrDilationsAreOne(s,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`);let u=sl.computePool2DInfo(a.shape,i,s,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&r0.arraysEqual(u.inShape,u.outShape))return gt({inputs:{x:a},backend:r});let d=new gU(u,"avg",!1);return r.runWebGLProgram(d,[a],"float32")}},{kernelName:eP,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=n,d=new gW(sl.computePool3DInfo(a.shape,i,s,[1,1,1],o,l,u),"avg",!1);return r.runWebGLProgram(d,[a],"float32")}},{kernelName:eD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,d=new gG(sl.computePool3DInfo(i.shape,s,o,[1,1,1],l,u));return r.runWebGLProgram(d,[a],i.dtype)}},{kernelName:eF,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t;cp([a,i],"avgPoolGrad");let{filterSize:s,strides:o,pad:l}=n,u=new gV(sl.computePool2DInfo(i.shape,s,o,1,l));return r.runWebGLProgram(u,[a],i.dtype)}},{kernelName:eL,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i}=t,{transposeA:s,transposeB:o}=n;return gI({a:a,b:i,transposeA:s,transposeB:o,backend:r})}},{kernelName:tp,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n,mean:a,variance:i,offset:s,scale:o}=e;r0.assert(a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r0.assert(null==s||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r0.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=r;null==l&&(l=.001);let u=[n,a,i],d=null;null!=s&&(d=s.shape,u.push(s));let h=null;null!=o&&(h=o.shape,u.push(o));let p=eb.getBool("WEBGL_PACK_NORMALIZATION")?new gj(n.shape,a.shape,i.shape,d,h,l):new gH(n.shape,a.shape,i.shape,d,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}},{kernelName:eM,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,crops:s}=n;r0.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=sl.getReshaped(a.shape,i,o),u=sl.getPermuted(l.length,i.length),d=sl.getReshapedPermuted(a.shape,i,o),h=sl.getSliceBeginCoords(s,i.length),p=sl.getSliceSize(d,s,i.length),c=[],f=gg({inputs:{x:a},backend:r,attrs:{shape:l}}),m=gC({inputs:{x:f},backend:r,attrs:{perm:u}}),g=gg({inputs:{x:m},backend:r,attrs:{shape:d}}),y=gY({inputs:{x:g},backend:r,attrs:{begin:h,size:p}});return c.push(f),c.push(m),c.push(g),c.forEach(e=>r.disposeIntermediateTensorInfo(e)),y}},{kernelName:eB,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s}=n,o=f0(r.readSync(a.dataId),r.readSync(i.dataId),i.dtype,i.shape,s);return r.makeTensorInfo([s],i.dtype,o)}},{kernelName:ez,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n}=e,{a:a,b:i}=r,s=eb.getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=eb.getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([a,i])||1===o){let e=n.texData.get(a.dataId).values,t=n.texData.get(i.dataId).values,[r,s]=f2(a.shape,i.shape,e,t,a.dtype),o=n.makeTensorInfo(s,a.dtype);return n.texData.get(o.dataId).values=r,o}return t=s?new ge(gQ,a.shape,i.shape,!1):new m7(gZ,a.shape,i.shape),n.runWebGLProgram(t,[a,i],a.dtype)}},{kernelName:eU,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{s0:n,s1:a}=t,i=r.readSync(n.dataId),s=r.readSync(a.dataId),o=sl.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return r.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:eW,backendName:"webgl",kernelFunc:function e(t){let{inputs:r,backend:n,attrs:a}=t,{x:i}=r,{dtype:s}=a;if("complex64"===s){if("complex64"===i.dtype)return gt({inputs:{x:i},backend:n});let t=u0(i.shape),r=e({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),a=gr({inputs:{real:r,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(r),a}if("complex64"===i.dtype){let t=g0({inputs:{input:i},backend:n}),r=e({inputs:{x:t},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(t),r}if(!r0.hasEncodingLoss(i.dtype,s)){let e=gt({inputs:{x:i},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if(n.shouldExecuteOnCPU([i])){let[e,t,r]=f3(n.texData.get(i.dataId).values,i.shape,i.dtype,s);return n.makeTensorInfo(e,t,r)}if("int32"===s){let e=new mj(i.shape,"return float(int(x));"),t=n.runWebGLProgram(e,[i],"int32");return{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}if("bool"===s){let e=n.makeTensorInfo([],"bool",r0.getTypedArrayFromDType("bool",1)),t=gJ({inputs:{a:i,b:e},backend:n});return n.disposeIntermediateTensorInfo(e),t}throw Error(`Error in Cast: failed to cast ${i.dtype} to ${s}`)}},{kernelName:eV,backendName:"webgl",kernelFunc:g2},{kernelName:eG,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{clipValueMin:s,clipValueMax:o}=a;return t=eb.getBool("WEBGL_PACK_CLIP")?new g4(i.shape):new g3(i.shape),n.runWebGLProgram(t,[i],i.dtype,[[s],[o]])}},{kernelName:eH,backendName:"webgl",kernelFunc:gr},{kernelName:ej,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=r.texData.get(n.dataId),i=new g6(n.shape),s=[g5(n,a.complexTensorInfos.real),g5(n,a.complexTensorInfos.imag)];return r.runWebGLProgram(i,s,s[0].dtype)}},{kernelName:eK,backendName:"webgl",kernelFunc:yt},{kernelName:eq,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dataFormat:u,dilations:d,dimRoundingMode:h}=a,p=sl.convertConv2DDataFormat(u),c=sl.computeConv2DInfo(i.shape,s.shape,o,d,l,h,!1,p);if(1===c.filterHeight&&1===c.filterWidth&&1===c.dilationHeight&&1===c.dilationWidth&&1===c.strideHeight&&1===c.strideWidth&&("SAME"===c.padInfo.type||"VALID"===c.padInfo.type))t=yo({x:i,filter:s,convInfo:c,backend:n});else if(c.strideWidth<=2&&"channelsLast"===p&&eb.getBool("WEBGL_EXP_CONV")){let e=new ya(c),r=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];t=n.runWebGLProgram(e,[i,s],"float32",r)}else if(eb.getBool("WEBGL_CONV_IM2COL"))t=yl({x:i,filter:s,convInfo:c,backend:n});else{let e=new yr(c);t=n.runWebGLProgram(e,[i,s],"float32")}let f=gg({inputs:{x:t},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(t),f}},{kernelName:eX,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:d}=n,h=sl.convertConv2DDataFormat(l),p=new yu(sl.computeConv2DInfo(a.shape,d,s,1,o,u,!1,h));return r.runWebGLProgram(p,[a,i],"float32")}},{kernelName:eY,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{inputShape:s,strides:o,pad:l,dataFormat:u,dimRoundingMode:d}=n,h=sl.convertConv2DDataFormat(u),p=sl.computeConv2DInfo(s,i.shape,o,1,l,d,!1,h);if(eb.getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){let e=[[p.strideHeight,p.strideWidth]],t=new yc(p);return r.runWebGLProgram(t,[a,i],"float32",e)}{let e=new yd(p);return r.runWebGLProgram(e,[a,i],"float32")}}},{kernelName:eQ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n,u=new yn(sl.computeConv3DInfo(a.shape,i.shape,s,l,o));return r.runWebGLProgram(u,[a,i],"float32")}},{kernelName:eZ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,filterShape:l}=n,u=new yh(sl.computeConv3DInfo(a.shape,l,s,1,o));return r.runWebGLProgram(u,[a,i],"float32")}},{kernelName:eJ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{pad:s,strides:o,inputShape:l}=n,u=new yp(sl.computeConv3DInfo(l,i.shape,o,1,s));return r.runWebGLProgram(u,[a,i],"float32")}},{kernelName:"Cos",backendName:"webgl",kernelFunc:yf},{kernelName:e0,backendName:"webgl",kernelFunc:ym},{kernelName:e3,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{image:a,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=n,d=new yg(a.shape,i.shape,o,l,u);return r.runWebGLProgram(d,[a,i,s],"float32")}},{kernelName:e1,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return yv(TK.Prod,a,r,i,s,o)}},{kernelName:e2,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return yv(TK.Sum,a,r,i,s,o)}},{kernelName:e4,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s,binaryOutput:o}=n;if(1===a.shape.length){let e=f0(r.readSync(a.dataId),r.readSync(i.dataId),i.dtype,i.shape,s);return r.makeTensorInfo([s],i.dtype,e)}if(2===a.shape.length){let e=f1(r.bufferSync(a),r.bufferSync(i),s,o);return r.makeTensorInfo(e.shape,i.dtype,e.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:e6,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockSize:i,dataFormat:s}=n,o=a.shape[0],l="NHWC"===s?a.shape[1]:a.shape[2],u="NHWC"===s?a.shape[2]:a.shape[3],d="NHWC"===s?a.shape[3]:a.shape[1],h=l*i,p=u*i,c=d/(i*i),f=new yw("NHWC"===s?[o,h,p,c]:[o,c,h,p],i,s);return r.runWebGLProgram(f,[a],a.dtype)}},{kernelName:e5,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dilations:u,dimRoundingMode:d}=a,h=u;null==h&&(h=[1,1]),r0.assert(sl.eitherStridesOrDilationsAreOne(o,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`);let p=sl.computeConv2DInfo(i.shape,s.shape,o,h,l,d,!0);t=eb.getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new yk(p):new yS(p);let c=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(t,[i,s],"float32",c)}},{kernelName:e8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:d}=n,h=new yC(sl.computeConv2DInfo(a.shape,d,s,o,l,u,!0));return r.runWebGLProgram(h,[a,i],"float32")}},{kernelName:e7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:d}=n,h=new yI(sl.computeConv2DInfo(d,i.shape,s,o,l,u,!0));return r.runWebGLProgram(h,[a,i],"float32")}},{kernelName:e9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=[...n.shape,...n.shape],i=r0.sizeFromShape(n.shape),s=gg({inputs:{x:n},backend:r,attrs:{shape:[i]}}),o=new yT(i),l=r.runWebGLProgram(o,[s],s.dtype),u=gg({inputs:{x:l},backend:r,attrs:{shape:a}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(l),u}},{kernelName:te,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dilations:u}=a,d=sl.computeDilation2DInfo(i.shape,s.shape,o,l,"NHWC",u),h=new y$(d),p=gg({inputs:{x:t=n.runWebGLProgram(h,[i,s],"float32")},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(t),p}},{kernelName:tn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{equation:a}=n,{allDims:i,summedDims:s,idDims:o}=sl.decodeEinsumEquation(a,t.length);sl.checkEinsumDimSizes(i.length,o,t);let{path:l,steps:u}=sl.getEinsumComputePath(s,o),d=u.length,h=null,p=i.length,c=[];for(let e=0;e<d;++e){for(let n of u[e]){let e,{permutationIndices:a,expandDims:i}=sl.getEinsumPermutation(p,o[n]);sl.isIdentityPermutation(a)?e=t[n]:(e=gC({inputs:{x:t[n]},backend:r,attrs:{perm:a}}),c.push(e));let s=e.shape.slice();for(let e=0;e<i.length;++e)s.splice(i[e],0,1);r0.arraysEqual(e.shape,s)||(e=gg({inputs:{x:e},backend:r,attrs:{shape:s}}),c.push(e)),null===h?h=e:(h=gm({inputs:{a:e,b:h},backend:r}),c.push(h))}e<d-1&&(l[e]>=0&&(h=gk({inputs:{x:h},backend:r,attrs:{axis:l[e]-(i.length-p),keepDims:!1}}),c.push(h)),p--)}for(let e of c)e!==h&&r.disposeIntermediateTensorInfo(e);return h}},{kernelName:"Elu",backendName:"webgl",kernelFunc:yN},{kernelName:ta,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r}=e,{dy:n,y:a}=t,i=eb.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ge(yE,n.shape,a.shape):new m7("return (b >= 0.0) ? a : a * (b + 1.0);",n.shape,a.shape);return r.runWebGLProgram(i,[n,a],n.dtype)}},{kernelName:ti,backendName:"webgl",kernelFunc:yR},{kernelName:"Erf",backendName:"webgl",kernelFunc:yA},{kernelName:"Exp",backendName:"webgl",kernelFunc:y_},{kernelName:ts,backendName:"webgl",kernelFunc:yO},{kernelName:to,backendName:"webgl",kernelFunc:yP},{kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return yL(n,!1,r)}},{kernelName:tl,backendName:"webgl",kernelFunc:yB},{kernelName:tu,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{let{image:r}=e,n=new yz(r.shape);return t.runWebGLProgram(n,[r],r.dtype)}},{kernelName:td,backendName:"webgl",kernelFunc:yW},{kernelName:th,backendName:"webgl",kernelFunc:yV},{kernelName:rU,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{pixels:a}=t,{numChannels:i}=n,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,d]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[d,u],p=[d,u,i];if(l||o){let e=eb.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==s||e!==yj)&&(yj=e,s=document.createElement("canvas").getContext("2d",{willReadFrequently:yj})),s.canvas.width=u,s.canvas.height=d,s.drawImage(a,0,0,u,d),a=s.canvas}let c=r.makeTensorInfo(h,"int32");r.texData.get(c.dataId).usage=TH.PIXELS,r.gpgpu.uploadPixelDataToTexture(r.getTexture(c.dataId),a);let f=eb.getBool("WEBGL_PACK")?new yH(p):new yG(p),m=r.runWebGLProgram(f,[c],"int32");return r.disposeData(c.dataId),m}},{kernelName:rG,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=r,{strides:u,pad:d,dataFormat:h,dilations:p,dimRoundingMode:c,activation:f,leakyreluAlpha:m}=a,g=sl.convertConv2DDataFormat(h),y=sl.computeConv2DInfo(i.shape,s.shape,u,p,d,c,!1,g),x=[],b=null!=o,v=null!=l,w="leakyrelu"===f,S=()=>{let e=[i,s],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){let t=gg({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(b&&e.push(t(o,h)),v&&e.push(t(l,h)),w){let t=n.makeTensorInfo([],"float32",r0.createScalarValue(m,"float32"));e.push(t),x.push(t)}return e};if(1===y.filterHeight&&1===y.filterWidth&&1===y.dilationHeight&&1===y.dilationWidth&&1===y.strideHeight&&1===y.strideWidth&&("SAME"===y.padInfo.type||"VALID"===y.padInfo.type))t=yo({x:i,filter:s,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else if(y.strideWidth<=2&&"channelsLast"===g&&eb.getBool("WEBGL_EXP_CONV")){let e=new ya(y,b,f?gd(f,!0):null,v,w),r=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],a=S();t=n.runWebGLProgram(e,a,"float32",r)}else if(eb.getBool("WEBGL_CONV_IM2COL"))t=yl({x:i,filter:s,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{let e=new yr(y,b,f?gd(f,!1):null,v,w),r=S();t=n.runWebGLProgram(e,r,"float32")}let k=gg({inputs:{x:t},backend:n,attrs:{shape:y.outShape}});return x.push(t),x.forEach(e=>n.disposeIntermediateTensorInfo(e)),k}},{kernelName:rH,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=r,{strides:u,pad:d,dilations:h,dimRoundingMode:p,activation:c,leakyreluAlpha:f}=a,m=[],g=h;null==g&&(g=[1,1]),r0.assert(sl.eitherStridesOrDilationsAreOne(u,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`);let y=sl.computeConv2DInfo(i.shape,s.shape,u,g,d,p,!0),x=eb.getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,b=c?gd(c,x):null,v=[i,s],w=null!=o,S=null!=l,k="leakyrelu"===c;if(w&&v.push(o),S&&v.push(l),k){let e=n.makeTensorInfo([],"float32",r0.createScalarValue(f,"float32"));v.push(e),m.push(e)}t=x?new yk(y,w,b,S,k):new yS(y,w,b,S,k);let C=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],I=n.runWebGLProgram(t,v,"float32",C);return m.forEach(e=>n.disposeIntermediateTensorInfo(e)),I}},{kernelName:tf,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{params:n,indices:a}=t,i=a.shape,s=i[i.length-1],o=r0.sizeFromShape(n.shape),[l,u,d,h]=sl.prepareAndValidate(n,a),p=gg({inputs:{x:a},backend:r,attrs:{shape:[u,s]}}),c=gg({inputs:{x:n},backend:r,attrs:{shape:[r0.sizeFromShape(n.shape)/d,d]}});if(r.shouldExecuteOnCPU([n,a])||"string"===n.dtype){let e=me(r.readSync(a.dataId),r.bufferSync(n),n.dtype,u,s,d,h,n.shape,o);return r.makeTensorInfo(l,n.dtype,e.values)}let f=new yK(s,h,[u,d],n.shape),m=r.runWebGLProgram(f,[c,p],c.dtype),g=gg({inputs:{x:m},backend:r,attrs:{shape:l}});return r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(m),g}},{kernelName:tc,backendName:"webgl",kernelFunc:yX},{kernelName:tm,backendName:"webgl",kernelFunc:yY},{kernelName:tg,backendName:"webgl",kernelFunc:yQ},{kernelName:ty,backendName:"webgl",kernelFunc:gt},{kernelName:tx,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return yL(n,!0,r)}},{kernelName:tb,backendName:"webgl",kernelFunc:ye},{kernelName:tv,backendName:"webgl",kernelFunc:yZ},{kernelName:tw,backendName:"webgl",kernelFunc:yJ},{kernelName:tS,backendName:"webgl",kernelFunc:y0},{kernelName:tk,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{alpha:i}=n,s=r.makeTensorInfo([],"float32",r0.createScalarValue(i,"float32")),o=eb.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ge(ga,a.shape,s.shape):new m7(gn,a.shape,s.shape),l=r.runWebGLProgram(o,[a,s],"float32");return r.disposeIntermediateTensorInfo(s),l}},{kernelName:tC,backendName:"webgl",kernelFunc:y1},{kernelName:tI,backendName:"webgl",kernelFunc:y2},{kernelName:tT,backendName:"webgl",kernelFunc:function(e){let{backend:t,attrs:r}=e,{start:n,stop:a,num:i}=r,s=ms(n,a,i);return t.makeTensorInfo([s.length],"float32",s)}},{kernelName:"Log",backendName:"webgl",kernelFunc:y3},{kernelName:t$,backendName:"webgl",kernelFunc:y4},{kernelName:tN,backendName:"webgl",kernelFunc:y6},{kernelName:tE,backendName:"webgl",kernelFunc:y5},{kernelName:tR,backendName:"webgl",kernelFunc:y8},{kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{depthRadius:i,bias:s,alpha:o,beta:l}=n,u=eb.getBool("WEBGL_PACK_NORMALIZATION")?new y9(a.shape,i,s,o,l):new y7(a.shape,i,s,o,l);return r.runWebGLProgram(u,[a],a.dtype)}},{kernelName:tA,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:d}=n,h=new xe(a.shape,o,l,u,d);return r.runWebGLProgram(h,[a,i,s],a.dtype)}},{kernelName:"Max",backendName:"webgl",kernelFunc:xt},{kernelName:t_,backendName:"webgl",kernelFunc:xr},{kernelName:tO,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t;cp(a,"maxPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n;r0.assert(sl.eitherStridesOrDilationsAreOne(s,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`);let u=sl.computePool2DInfo(a.shape,i,s,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&r0.arraysEqual(u.inShape,u.outShape))return gt({inputs:{x:a},backend:r});let d=new gU(u,"max",!1);return r.runWebGLProgram(d,[a],a.dtype)}},{kernelName:tP,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=n,d=new gW(sl.computePool3DInfo(a.shape,i,s,[1,1,1],o,u,l),"max",!1);return r.runWebGLProgram(d,[a],a.dtype)}},{kernelName:tD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,d=sl.computePool3DInfo(i.shape,s,o,[1,1,1],l,u),h=new gW(d,"max",!0),p=r.runWebGLProgram(h,[i],i.dtype),c=new xa(d),f=r.runWebGLProgram(c,[a,p],i.dtype);return r.disposeIntermediateTensorInfo(p),f}},{kernelName:tF,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i,output:s}=t;cp([i,s],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:d}=n,h=sl.computePool2DInfo(i.shape,o,l,1,u,d),p=new gU(h,"max",!0),c=r.runWebGLProgram(p,[i],i.dtype),f=new xn(h),m=r.runWebGLProgram(f,[a,c],i.dtype);return r.disposeIntermediateTensorInfo(c),m}},{kernelName:tL,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{filterSize:a,strides:i,pad:s,includeBatchInIndex:o}=t;r0.assert(4===n.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);let l=[1,1];r0.assert(sl.eitherStridesOrDilationsAreOne(i,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`);let u=sl.computePool2DInfo(n.shape,a,i,l,s),[d,h]=function(e,t,r,n){let a=new gU(r,"max",!1),i=n.runWebGLProgram(a,[e],"float32");return a=new gU(r,"max",!0,!0,t),[i,n.runWebGLProgram(a,[e],"float32")]}(n,o,u,r);return[d,h]}},{kernelName:tM,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{keepDims:a,axis:i}=t,s=n.shape.length,o=r0.parseAxisParam(i,n.shape),l=o,u=sl.getAxesPermutation(l,s),d=null!=u,h=r.shouldExecuteOnCPU([n]),p=[],c=n;if(d){if(h){let e=r.texData.get(c.dataId).values,t=Array(s);for(let e=0;e<t.length;e++)t[e]=n.shape[u[e]];let a=mD(e,n.shape,n.dtype,u,t);c=r.makeTensorInfo(t,n.dtype),r.texData.get(c.dataId).values=a}else c=gS(n,u,r);p.push(c),l=sl.getInnerMostAxes(l.length,s)}sl.assertAxesAreInnerMostDims("sum",l,s);let[f,m]=sl.computeOutAndReduceShapes(c.shape,l),g=f;a&&(g=sl.expandShapeToKeepDim(f,o));let y=function(e,t,r,n){let a=r0.sizeFromShape(t),i=r0.sizeFromShape(e.shape),s=gg({inputs:{x:e},attrs:{shape:[i/a,a]},backend:n}),o=gb(s,"float32","mean",n),l=gg({inputs:{x:o},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}(c,m,g,r);for(let e of p)r.disposeIntermediateTensorInfo(e);return y}},{kernelName:"Min",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=r0.parseAxisParam(s,i.shape),d=u,h=sl.getAxesPermutation(d,l),p=i;null!=h&&(p=gC({inputs:{x:i},backend:n,attrs:{perm:h}}),d=sl.getInnerMostAxes(d.length,i.shape.length)),sl.assertAxesAreInnerMostDims("min",d,l);let[c,f]=sl.computeOutAndReduceShapes(p.shape,d),m=gg({inputs:{x:p},backend:n,attrs:{shape:[-1,r0.sizeFromShape(f)]}}),g=gb(m,m.dtype,"min",n);return t=o?gg({inputs:{x:g},backend:n,attrs:{shape:sl.expandShapeToKeepDim(c,u)}}):gg({inputs:{x:g},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),t}},{kernelName:tB,backendName:"webgl",kernelFunc:xi},{kernelName:tz,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n}=e,{paddings:a,mode:i}=r,s=eb.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xo(n.shape,a,i):new xs(n.shape,a,i);return t.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"Mod",backendName:"webgl",kernelFunc:xl},{kernelName:tU,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{numSamples:i,seed:s,normalized:o}=n,l=o?a:xc({inputs:{logits:a},backend:r,attrs:{dim:a.shape.length-1}}),u=new xu(l.shape[0],l.shape[1],i),d=r.runWebGLProgram(u,[l],"int32",[[s]]);return o||r.disposeIntermediateTensorInfo(l),d}},{kernelName:tW,backendName:"webgl",kernelFunc:gm},{kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n}=e,{x:a}=r;if(n.shouldExecuteOnCPU([a])){let[e,t]=mp(n.texData.get(a.dataId).values,a.shape,a.dtype);return n.makeTensorInfo(t,a.dtype,e)}return t=eb.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new m1(a.shape,xm):new mj(a.shape,xf),n.runWebGLProgram(t,[a],a.dtype)}},{kernelName:tG,backendName:"webgl",kernelFunc:function(e){sl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=n,{selectedIndices:u}=xg(r.readSync(a.dataId),r.readSync(i.dataId),s,o,l);return r.makeTensorInfo([u.length],"int32",new Int32Array(u))}},{kernelName:tH,backendName:"webgl",kernelFunc:function(e){sl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=n,{selectedIndices:d,validOutputs:h}=xy(r.readSync(a.dataId),r.readSync(i.dataId),s,o,l,u);return[r.makeTensorInfo([d.length],"int32",new Int32Array(d)),r.makeTensorInfo([],"int32",new Int32Array([h]))]}},{kernelName:tj,backendName:"webgl",kernelFunc:function(e){sl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=n,d=r.readSync(a.dataId),{selectedIndices:h,selectedScores:p}=xx(d,r.readSync(i.dataId),s,o,l,u);return[r.makeTensorInfo([h.length],"int32",new Int32Array(h)),r.makeTensorInfo([p.length],"float32",new Float32Array(p))]}},{kernelName:tV,backendName:"webgl",kernelFunc:gJ},{kernelName:tq,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{indices:a}=t,{dtype:i,depth:s,onValue:o,offValue:l}=n,u=r0.sizeFromShape(a.shape),d=new xb(u,s,o,l),h=gg({inputs:{x:a},backend:r,attrs:{shape:[u]}}),p=r.runWebGLProgram(d,[h],i);r.disposeIntermediateTensorInfo(h);let c=gg({inputs:{x:p},backend:r,attrs:{shape:[...a.shape,s]}});return r.disposeIntermediateTensorInfo(p),c}},{kernelName:tK,backendName:"webgl",kernelFunc:function e(t){let{inputs:r,backend:n}=t,{x:a}=r;if("string"===a.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==a.dtype)return yB({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:n});{let t=g0({inputs:{input:a},backend:n}),r=e({inputs:{x:t},backend:n}),i=ye({inputs:{input:a},backend:n}),s=xv({inputs:{x:i},backend:n}),o=gr({inputs:{real:r,imag:s},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(s),o}}},{kernelName:tX,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n;if(1===t.length)return yO({inputs:{input:t[0]},backend:r,attrs:{dim:a}});let i=t[0].shape,s=t[0].dtype;t.forEach(e=>{r0.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r0.assert(s===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=yt({inputs:t.map(e=>{let t=yO({inputs:{input:e},backend:r,attrs:{dim:a}});return o.push(t),t}),backend:r,attrs:{axis:a}});return o.forEach(e=>r.disposeIntermediateTensorInfo(e)),l}},{kernelName:tY,backendName:"webgl",kernelFunc:xk},{kernelName:"Pow",backendName:"webgl",kernelFunc:xC},{kernelName:tQ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n,alpha:a}=t,i=eb.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ge(gs,n.shape,a.shape):new m7(gi,n.shape,a.shape);return r.runWebGLProgram(i,[n,a],"float32")}},{kernelName:tZ,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=[],d=r0.parseAxisParam(s,i.shape),h=d,p=sl.getAxesPermutation(h,l),c=i;if(null!=p&&(c=gC({inputs:{x:i},backend:n,attrs:{perm:p}}),h=sl.getInnerMostAxes(h.length,l),u.push(c)),sl.assertAxesAreInnerMostDims("prod",h,l),n.shouldExecuteOnCPU([c])){let e=n.texData.get(c.dataId).values,{outVals:r,outShape:a,outDtype:i}=mf(c.shape,c.dtype,e,h);t=n.makeTensorInfo(a,i,r)}else{let[e,r]=sl.computeOutAndReduceShapes(c.shape,h),a=gg({inputs:{x:c},backend:n,attrs:{shape:[-1,r0.sizeFromShape(r)]}}),s=gb(a,nQ(i.dtype),"prod",n);t=gg({inputs:{x:s},backend:n,attrs:{shape:e}}),u.push(a),u.push(s)}if(o){u.push(t);let e=sl.expandShapeToKeepDim(t.shape,d);t=gg({inputs:{x:t},backend:n,attrs:{shape:e}})}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),t}},{kernelName:tJ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{paramsNestedSplits:a,paramsDenseValues:i,indices:s}=t,{outputRaggedRank:o}=n,l=a.map(e=>r.readSync(e.dataId)),u=a.map(e=>e.shape),d=r.readSync(i.dataId),h=r.readSync(s.dataId),[p,c,f]=mm(l,u,d,i.shape,i.dtype,h,s.shape,o),m=p.map(e=>r.makeTensorInfo([e.length],"int32",e)),g=r.makeTensorInfo(f,i.dtype,c);return m.concat([g])}},{kernelName:t0,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{starts:n,limits:a,deltas:i}=t,s=r.readSync(n.dataId),o=r.readSync(a.dataId),l=r.readSync(i.dataId),[u,d]=mg(s,n.shape,n.dtype,o,a.shape,l,i.shape);return[r.makeTensorInfo([u.length],"int32",u),r.makeTensorInfo([d.length],n.dtype,d)]}},{kernelName:t1,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{shape:a,values:i,defaultValue:s,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=n,u=r.readSync(a.dataId),d=r.readSync(i.dataId),h=r.readSync(s.dataId),p=o.map(e=>r.readSync(e.dataId)),c=o.map(e=>e.shape),[f,m]=my(u,a.shape,d,i.shape,i.dtype,h,s.shape,p,c,l);return r.makeTensorInfo(f,i.dtype,m)}},{kernelName:t2,backendName:"webgl",kernelFunc:xI},{kernelName:t3,backendName:"webgl",kernelFunc:g0},{kernelName:tr,backendName:"webgl",kernelFunc:xd},{kernelName:t4,backendName:"webgl",kernelFunc:xT},{kernelName:t6,backendName:"webgl",kernelFunc:x$},{kernelName:rt,backendName:"webgl",kernelFunc:xN},{kernelName:t5,backendName:"webgl",kernelFunc:gg},{kernelName:t9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n,[l,u]=o,d=eb.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new xR(a.shape,l,u,i,s):new xE(a.shape,l,u,i,s);return r.runWebGLProgram(d,[a],"float32")}},{kernelName:re,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,o=new xA(i.shape,a.shape,s);return r.runWebGLProgram(o,[i],i.dtype)}},{kernelName:t8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n,[l,u]=o,d=eb.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new xO(a.shape,l,u,i,s):new x_(a.shape,l,u,i,s);return r.runWebGLProgram(d,[a],a.dtype)}},{kernelName:t7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,o=new xF(i.shape,a.shape,s);return r.runWebGLProgram(o,[i],i.dtype)}},{kernelName:rr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dims:i}=n,s=a.shape.length,o=r0.parseAxisParam(i,a.shape);if(0===s)return gt({inputs:{x:a},backend:r});let l=eb.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xD(a.shape,o):new xP(a.shape,o);return r.runWebGLProgram(l,[a],a.dtype)}},{kernelName:rW,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:n}=e,{radians:a,fillValue:i,center:s}=t,o=new xL(n.shape,i),[l,u]=sl.getImageCenter(s,n.shape[1],n.shape[2]),d=[[l,u,Math.sin(a),Math.cos(a)]];return r.runWebGLProgram(o,[n],n.dtype,d)}},{kernelName:rn,backendName:"webgl",kernelFunc:xM},{kernelName:ra,backendName:"webgl",kernelFunc:xB},{kernelName:ri,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{indices:i,updates:s}=r,{shape:o}=a,{sliceRank:l,numUpdates:u,sliceSize:d,strides:h,outputSize:p}=sl.calculateShapes(s,i,o),c=[p/d,d];if(0===p)return n.makeTensorInfo(o,i.dtype);let f=gg({inputs:{x:i},backend:n,attrs:{shape:[u,l]}}),m=gg({inputs:{x:s},backend:n,attrs:{shape:[u,d]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0]));t=eb.getBool("WEBGL_PACK")?new xU(u,l,f.shape.length,m.shape.length,h,c):new xz(u,l,f.shape.length,m.shape.length,h,c);let y=n.runWebGLProgram(t,[m,f,g],m.dtype),x=gg({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(g),x}},{kernelName:ro,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sortedSequence:a,values:i}=t,{side:s}=n,o=new xW(a.shape[0],a.shape[1],i.shape[1],s),l=[[a.shape[1]]];return r.runWebGLProgram(o,[a,i],"int32",l)}},{kernelName:rl,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{condition:n,t:a,e:i}=t,s=new xV(n.shape.length,a.shape,a.shape.length);return r.runWebGLProgram(s,[n,a,i],nY(a.dtype,i.dtype))}},{kernelName:ru,backendName:"webgl",kernelFunc:xG},{kernelName:rc,backendName:"webgl",kernelFunc:xH},{kernelName:rp,backendName:"webgl",kernelFunc:xj},{kernelName:"Sin",backendName:"webgl",kernelFunc:xK},{kernelName:rh,backendName:"webgl",kernelFunc:xq},{kernelName:rd,backendName:"webgl",kernelFunc:gY},{kernelName:rx,backendName:"webgl",kernelFunc:xc},{kernelName:rf,backendName:"webgl",kernelFunc:xX},{kernelName:rg,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,paddings:s}=n;r0.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);let u=[],d=xk({inputs:{x:a},backend:r,attrs:{paddings:l,constantValue:0}}),h=sl.getReshaped(d.shape,i,o,!1),p=sl.getPermuted(h.length,i.length,!1),c=sl.getReshapedPermuted(d.shape,i,o,!1),f=gg({inputs:{x:d},backend:r,attrs:{shape:h}}),m=gC({inputs:{x:f},backend:r,attrs:{perm:p}}),g=gg({inputs:{x:m},backend:r,attrs:{shape:c}});return u.push(d),u.push(f),u.push(m),u.forEach(e=>r.disposeIntermediateTensorInfo(e)),g}},{kernelName:rb,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{indices:n,values:a,denseShape:i,defaultValue:s}=t;if(1!==i.shape.length)throw Error(`Dense shape must be a vector, saw:
         ${i.shape}`);if(2!==n.shape.length)throw Error(`Indices must be a matrix, saw:
         ${n.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
         ${a.shape}`);if(0!==s.shape.length)throw Error(`Default value must be a scalar, saw:
        ${s.shape}`);let o=r.readSync(n.dataId),l=r.readSync(a.dataId),u=r.readSync(i.dataId),d=r.readSync(s.dataId)[0],[h,p,c,f,m]=mC(o,n.shape,n.dtype,l,a.dtype,u,d);return[r.makeTensorInfo(p,n.dtype,h),r.makeTensorInfo([p[0]],a.dtype,c),r.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),r.makeTensorInfo([m.length],n.dtype,new Int32Array(m))]}},{kernelName:rv,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{inputIndices:n,inputShape:a,newShape:i}=t;if(2!==n.shape.length)throw Error(`Input indices should be a matrix but received shape ${n.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==i.shape.length)throw Error(`Target shape should be a vector but received shape ${i.shape}`);let s=Array.from(r.readSync(a.dataId)),o=r.readSync(n.dataId),l=Array.from(r.readSync(i.dataId)),[u,d,h]=mI(o,n.shape,n.dtype,s,l);return[r.makeTensorInfo(d,n.dtype,u),r.makeTensorInfo([h.length],i.dtype,new Int32Array(h))]}},{kernelName:rw,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;if(n.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
              ${a.shape}`);if(1!==i.shape.length)throw Error(`Segment ids should be a vector but received shape
              ${i.shape}`);let s=r.readSync(n.dataId),o=r.readSync(a.dataId),l=r.readSync(i.dataId),[u,d]=mT(s,n.shape,n.dtype,o,l,!0);return r.makeTensorInfo(d,n.dtype,u)}},{kernelName:rS,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;if(n.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
             ${a.shape}`);if(1!==i.shape.length)throw Error(`Segment ids should be a vector but received shape
             ${i.shape}`);let s=r.readSync(n.dataId),o=r.readSync(a.dataId),l=r.readSync(i.dataId),[u,d]=mT(s,n.shape,n.dtype,o,l);return r.makeTensorInfo(d,n.dtype,u)}},{kernelName:rk,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sparseIndices:a,sparseValues:i,defaultValue:s}=t,{outputShape:o}=n,{sliceRank:l,numUpdates:u,sliceSize:d,strides:h,outputSize:p}=sl.calculateShapes(i,a,o);if("string"===i.dtype){let e=r.bufferSync(a),t=mv(e,r.bufferSync(i),o,p,d,u,l,h,r0.decodeString(r.readSync(s.dataId)[0]),!1);return r.makeTensorInfo(o,t.dtype,t.values)}let c=new xz(u,l,a.shape.length,i.shape.length,h,[p,1],!1),f=r.runWebGLProgram(c,[i,a,s],i.dtype),m=gg({inputs:{x:f},backend:r,attrs:{shape:o}});return r.disposeIntermediateTensorInfo(f),m}},{kernelName:ry,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{numOrSizeSplits:i,axis:s}=n,o=r0.parseAxisParam(s,a.shape)[0],l=sl.prepareSplitSize(a,i,o),u=Array(a.shape.length).fill(0),d=a.shape.slice();return l.map(e=>{let t=[...d];t[o]=e;let n=gY({inputs:{x:a},backend:r,attrs:{begin:u,size:t}});return u[o]+=e,n})}},{kernelName:rm,backendName:"webgl",kernelFunc:xQ},{kernelName:rI,backendName:"webgl",kernelFunc:xZ},{kernelName:rC,backendName:"webgl",kernelFunc:x0},{kernelName:rT,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t;if("string"!==a.dtype)throw Error("Input must be of datatype string");let i=r.readSync(a.dataId),s=mN(sl.fromUint8ToStringArray(i),"string",n);return r.makeTensorInfo(a.shape,"string",s)}},{kernelName:rz,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:r}){let{x:n}=e,a=mK+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,i=new mj(n.shape,a);return r.runWebGLProgram(i,[n],n.dtype)}},{kernelName:r$,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{begin:s,end:o,strides:l,beginMask:u,endMask:d,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:c}=a,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:x,begin:b,end:v,strides:w}=s6.sliceInfo(i.shape,s,o,l,u,d,h,p,c);if(g)t=gg({inputs:{x:i},backend:n,attrs:{shape:m}});else if(y||x){r0.assert(i.shape.length>=1,()=>`Input must have rank at least 1, got: ${i.shape.length}`);let e=s6.computeOutShape(b,v,w),r=gY({inputs:{x:i},backend:n,attrs:{begin:b,size:e}});t=gg({inputs:{x:r},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(r)}else if(n.shouldExecuteOnCPU([i])){let e=n.readSync(i.dataId),r=mE(f,iW(i.shape,i.dtype,e),w,b);t=n.makeTensorInfo(m,i.dtype,r.values)}else{let e=new x1(b,w,f);t=n.runWebGLProgram(e,[i],i.dtype)}let S=gg({inputs:{x:t},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(t),S}},{kernelName:rN,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{separator:a,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=n,{data:d,dataSplits:h}=t,[p,c]=mR(r.readSync(d.dataId),r.readSync(h.dataId),a,i,s,o,l,u);return[r.makeTensorInfo([p.length],"string",p),r.makeTensorInfo(h.shape,"int32",c)]}},{kernelName:rE,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{skipEmpty:a}=n,{input:i,delimiter:s}=t;if("string"!==i.dtype)throw Error("Input must be of datatype string");if(1!==i.shape.length)throw Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==s.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${s.shape}`);let[o,l,u]=mA(r.readSync(i.dataId),r.readSync(s.dataId)[0],a),d=l.length;return[r.makeTensorInfo([d,2],"int32",o),r.makeTensorInfo([d],"string",l),r.makeTensorInfo([2],"int32",new Int32Array(u))]}},{kernelName:rR,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{numBuckets:a}=n,{input:i}=t;if("string"!==i.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let s=m_(r.readSync(i.dataId),a);return r.makeTensorInfo(i.shape,"int32",s)}},{kernelName:"Sub",backendName:"webgl",kernelFunc:xp},{kernelName:"Sum",backendName:"webgl",kernelFunc:gk},{kernelName:"Tan",backendName:"webgl",kernelFunc:x2},{kernelName:rA,backendName:"webgl",kernelFunc:x3},{kernelName:rs,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{tensor:a,indices:i,updates:s}=t,{}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:h}=sl.calculateShapes(s,i,a.shape),p=[h/u,u];if(0===h)return r.makeTensorInfo(a.shape,i.dtype);let c=gg({inputs:{x:i},backend:r,attrs:{shape:[l,o]}}),f=gg({inputs:{x:s},backend:r,attrs:{shape:[l,u]}}),m=gg({inputs:{x:a},backend:r,attrs:{shape:p}}),g=new xz(l,o,c.shape.length,f.shape.length,d,p,!1,!0),y=r.runWebGLProgram(g,[f,c,m],m.dtype),x=gg({inputs:{x:y},backend:r,attrs:{shape:a.shape}});return r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(y),x}},{kernelName:r_,backendName:"webgl",kernelFunc:x6},{kernelName:rO,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{k:i,sorted:s}=n,o=eb.getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=eb.getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,d=u[u.length-1];if(r.shouldExecuteOnCPU([a])||d<o||i>l){let[e,t]=mP(r.readSync(a.dataId),u,a.dtype,i,s);return[r.makeTensorInfo(e.shape,e.dtype,e.values),r.makeTensorInfo(t.shape,t.dtype,t.values)]}if(0===i)return u[u.length-1]=0,[r.makeTensorInfo(u,a.dtype,[]),r.makeTensorInfo(u,"int32",[])];if(1===d)return[a,yB({attrs:{shape:u,dtype:"int32",value:0},backend:r})];let h=r.texData.get(a.dataId),p=null!==h&&h.isPacked,c=p?r.unpackTensor(a):a,f=r0.sizeFromShape(u)/d,m=gg({inputs:{x:c},attrs:{shape:[f,d]},backend:r});p&&x7(r,c);let g=x9(i),y=x9(d),x=null,b=()=>null===x?[m,m]:[m,x],v=(e,t,n)=>{let a=b(),i=new x5(n),s=[[d],[+(null===x)],[Number.NEGATIVE_INFINITY],[e],[t]],o=x;x=r.runWebGLProgram(i,a,"int32",s),x7(r,o)};for(let e=1;e<g;e*=2){let t=2*e;for(let r=e;r>=1;r/=2)v(t,r,[f,y])}for(let e=y;e>g;e/=2){let t=b(),n=new x8([f,e/2]),a=[[d],[+(null===x)],[g]],i=x;x=r.runWebGLProgram(n,t,"int32",a),x7(r,i);let s=g/2,o=2*s;for(let e=s;e>=1;e/=2)v(o,e,x.shape)}let w=x;x=gY({inputs:{x:x},backend:r,attrs:{begin:0,size:[f,i]}}),x7(r,w);let S=yX({inputs:{x:m,indices:x},backend:r,attrs:{axis:1,batchDims:1}});x7(r,m);let k=u.slice(0,-1);k.push(i),w=x,x=gg({inputs:{x:x},attrs:{shape:k},backend:r}),x7(r,w);let C=S;return S=gg({inputs:{x:S},attrs:{shape:k},backend:r}),x7(r,C),[S,x]}},{kernelName:rF,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{image:a,transforms:i}=t,{interpolation:s,fillMode:o,fillValue:l,outputShape:u}=n,[d,h,p,c]=a.shape,[f,m]=null!=u?u:[h,p],g=new be(h,p,s,o,l,[d,f,m,c]);return r.runWebGLProgram(g,[a,i],"float32")}},{kernelName:rP,backendName:"webgl",kernelFunc:gC},{kernelName:rD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:r,backend:n}=e,{axis:a}=r,{x:i}=t;cp(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let{outputValues:s,outputShape:o,indices:l}=mL(n.readSync(i.dataId),a,i.shape,i.dtype);return[n.makeTensorInfo(o,i.dtype,s),n.makeTensorInfo([l.length],"int32",l)]}},{kernelName:rL,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{value:a}=t,{axis:i}=n;i<0&&(i+=a.shape.length);let s=a.shape.length,o=a.shape[i],l=Array(s-1),u=0;for(let e=0;e<s;e++)e!==i&&(l[u++]=a.shape[e]);let d=[],h=Array(s).fill(0),p=a.shape.slice();p[i]=1;let c=Array(o);for(let e=0;e<c.length;e++){h[i]=e;let t=gY({inputs:{x:a},backend:r,attrs:{begin:h,size:p}}),n=gg({inputs:{x:t},backend:r,attrs:{shape:l}});c[e]=n,d.push(t)}return d.forEach(e=>r.disposeIntermediateTensorInfo(e)),c}},{kernelName:rM,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,segmentIds:i}=t,{numSegments:s}=n,o=a.shape.length,l=[],u=0,d=sl.getAxesPermutation([u],o),h=a;null!=d&&(h=gC({inputs:{x:a},backend:r,attrs:{perm:d}}),l.push(h),u=sl.getInnerMostAxes(1,o)[0]);let p=sl.segment_util.computeOutShape(h.shape,u,s),c=r0.sizeFromShape([h.shape[u]]),f=gg({inputs:{x:h},backend:r,attrs:{shape:[-1,c]}});l.push(f);let m=nQ(a.dtype),g=(e,t,n,a,i)=>{let s=e.shape[0],o=e.shape[1],u=sl.segment_util.segOpComputeOptimalWindowSize(o,i),d=new bt({windowSize:u,inSize:o,batchSize:s,numSegments:i},t),h=r.compileAndRun(d,[e,n],a);if(l.push(h),h.shape[1]===i)return h;let p=xI({backend:r,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),c=x6({inputs:{x:p},backend:r,attrs:{reps:[o/u]}});return l.push(p),l.push(c),g(h,t,c,a,i)},y=gg({inputs:{x:g(f,"unsortedSegmentSum",i,m,s)},backend:r,attrs:{shape:p}}),x=y;return null!=d&&(l.push(y),x=gC({inputs:{x:x},backend:r,attrs:{perm:sl.getUndoAxesPermutation(d)}})),l.forEach(e=>r.disposeIntermediateTensorInfo(e)),x}},{kernelName:rB,backendName:"webgl",kernelFunc:xv}])rJ(e);eb.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),(TT=Tq||(Tq={}))[TT.DT_INVALID=0]="DT_INVALID",TT[TT.DT_FLOAT=1]="DT_FLOAT",TT[TT.DT_DOUBLE=2]="DT_DOUBLE",TT[TT.DT_INT32=3]="DT_INT32",TT[TT.DT_UINT8=4]="DT_UINT8",TT[TT.DT_INT16=5]="DT_INT16",TT[TT.DT_INT8=6]="DT_INT8",TT[TT.DT_STRING=7]="DT_STRING",TT[TT.DT_COMPLEX64=8]="DT_COMPLEX64",TT[TT.DT_INT64=9]="DT_INT64",TT[TT.DT_BOOL=10]="DT_BOOL",TT[TT.DT_QINT8=11]="DT_QINT8",TT[TT.DT_QUINT8=12]="DT_QUINT8",TT[TT.DT_QINT32=13]="DT_QINT32",TT[TT.DT_BFLOAT16=14]="DT_BFLOAT16",TT[TT.DT_QINT16=15]="DT_QINT16",TT[TT.DT_QUINT16=16]="DT_QUINT16",TT[TT.DT_UINT16=17]="DT_UINT16",TT[TT.DT_COMPLEX128=18]="DT_COMPLEX128",TT[TT.DT_HALF=19]="DT_HALF",TT[TT.DT_RESOURCE=20]="DT_RESOURCE",TT[TT.DT_VARIANT=21]="DT_VARIANT",TT[TT.DT_UINT32=22]="DT_UINT32",TT[TT.DT_UINT64=23]="DT_UINT64",TT[TT.DT_FLOAT_REF=101]="DT_FLOAT_REF",TT[TT.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",TT[TT.DT_INT32_REF=103]="DT_INT32_REF",TT[TT.DT_UINT8_REF=104]="DT_UINT8_REF",TT[TT.DT_INT16_REF=105]="DT_INT16_REF",TT[TT.DT_INT8_REF=106]="DT_INT8_REF",TT[TT.DT_STRING_REF=107]="DT_STRING_REF",TT[TT.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",TT[TT.DT_INT64_REF=109]="DT_INT64_REF",TT[TT.DT_BOOL_REF=110]="DT_BOOL_REF",TT[TT.DT_QINT8_REF=111]="DT_QINT8_REF",TT[TT.DT_QUINT8_REF=112]="DT_QUINT8_REF",TT[TT.DT_QINT32_REF=113]="DT_QINT32_REF",TT[TT.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",TT[TT.DT_QINT16_REF=115]="DT_QINT16_REF",TT[TT.DT_QUINT16_REF=116]="DT_QUINT16_REF",TT[TT.DT_UINT16_REF=117]="DT_UINT16_REF",TT[TT.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",TT[TT.DT_HALF_REF=119]="DT_HALF_REF",TT[TT.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",TT[TT.DT_VARIANT_REF=121]="DT_VARIANT_REF",TT[TT.DT_UINT32_REF=122]="DT_UINT32_REF",TT[TT.DT_UINT64_REF=123]="DT_UINT64_REF",(TN=(T$=TX||(TX={})).CheckpointFormatVersion||(T$.CheckpointFormatVersion={}))[TN.LEGACY=0]="LEGACY",TN[TN.V1=1]="V1",TN[TN.V2=2]="V2";const br={};function bn(e,t,r,n,a){let i=t.inputParams[e];if(i&&void 0!==i.inputIndexStart){let e=i.inputIndexStart,s=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?e+1:i.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===i.type)return ba(t.inputNames[o],r,n,a);if("tensors"===i.type){let i=t.inputs.slice(e,s);return t.inputNames.slice(e,s).filter((e,t)=>{var r;return(null==(r=i[t])?void 0:r.op)!=="NoOp"}).map(e=>ba(e,r,n,a))}let l=ba(t.inputNames[o],r,n,a),u=l.dataSync();return"number"===i.type?u[0]:r0.toNestedArray(l.shape,u)}let s=t.attrParams[e];return s&&s.value}function ba(e,t,r,n){let[a,i]=bl(e,r);if(null!=n){let e=n.getHashTableHandleByName(a);if(null!=e)return e}let s=r.currentContextIds.find(e=>!!t[bo(a,e)]);return void 0!==s?t[bo(a,s)][i]:void 0}function bi(e,t,r){return t[bo(e,r.currentContextId)]}function bs(e,t){let[r,n,a]=bl(e,t);return[bo(r,t&&t.currentContextId),n,a]}function bo(e,t){return t?`${e}-${t}`:e}function bl(e,t){let r;if(""===e)return["",0,void 0];let n=null!=t&&null!=t.parseNodeNameCache;if(n){let r=t.parseNodeNameCache.get(e);if(null!=r)return r}let a=e.split(":");if(1===a.length)r=[e,0,void 0];else{let e=a[0],t=3===a.length?a[1]:void 0;r=[e,Number(a[a.length-1]),t]}return n&&t.parseNodeNameCache.set(e,r),r}function bu(e,t,r){let n=bn("pad",e,t,r);if("explicit"===n){n=bn("explicitPaddings",e,t,r);let a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=n[2*e],a[e][1]=n[2*e+1];return a}return n}function bd(e){return e.kept?e:iG(e)}var bh={};l(bh,"json",()=>bp);const bp=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bc={};l(bc,"json",()=>bf);const bf=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bm={};l(bm,"json",()=>bg);const bg=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var by={};l(by,"json",()=>bx);const bx=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var bb={};l(bb,"json",()=>bv);const bv=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var bw={};l(bw,"json",()=>bS);const bS=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bk={};l(bk,"json",()=>bC);const bC=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var bI={};l(bI,"json",()=>bT);const bT=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var b$={};l(b$,"json",()=>bN);const bN=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var bE={};l(bE,"json",()=>bR);const bR=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var bA={};l(bA,"json",()=>b_);const b_=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var bO={};l(bO,"json",()=>bF);const bF=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var bP={};l(bP,"json",()=>bD);const bD=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var bL={};l(bL,"json",()=>bM);const bM=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var bB={};l(bB,"json",()=>bz);const bz=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var bU={};l(bU,"json",()=>bW);const bW=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var bV={};l(bV,"json",()=>bG);const bG=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var bH={};l(bH,"json",()=>bj);const bj=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var bK={};l(bK,"json",()=>bq);const bq=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class bX{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[].concat(...[bh,bc,bm,by,bb,bw,bk,bI,b$,bE,bA,bO,bP,bL,bB,bU,bV,bH,bK].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){let r=e.node,n=[],a=[],i=[],s=r.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):(null==t.input||0===t.input.length)&&i.push(e[t.name]),e),{}),o=[],l=[],u={},d={};null!=t&&(u=this.mapSignatureEntries(t.inputs),d=this.mapSignatureEntries(t.outputs));let h=Object.keys(s);h.forEach(e=>{let t=s[e];t.inputNames.forEach((e,r)=>{let[n,,a]=bs(e),i=s[n];if(null!=i.outputs){let e=i.outputs.indexOf(a);if(-1!==e){let a=`${n}:${e}`;t.inputNames[r]=a}}t.inputs.push(i),i.children.push(t)})}),0===Object.keys(d).length?h.forEach(e=>{let t=s[e];0===t.children.length&&l.push(t)}):Object.keys(d).forEach(e=>{let[t]=bs(e),r=s[t];null!=r&&(r.signatureKey=d[e],l.push(r))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{let[t]=bs(e),r=s[t];r&&(r.signatureKey=u[e],o.push(r))}):o=n;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));let c={nodes:s,inputs:o,outputs:l,weights:a,placeholders:n,signature:t,functions:p};return i.length>0&&(c.initNodes=i),c}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,r)=>(t[e[r].name]=r,t),{})}mapNode(e){let t=br[e.op]||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});let r={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(r.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(r.attrParams=t.attrs.reduce((t,r)=>{let n,a=r.type;switch(r.type){case"string":void 0===(n=bQ(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=bQ(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"string[]":void 0===(n=b8(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b8(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"number":void 0===(n=bJ(e.attr,r.tfName,r.defaultValue||0))&&r.tfDeprecatedName&&(n=bJ(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"number[]":void 0===(n=b5(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b5(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"bool":void 0===(n=bZ(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=bZ(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"bool[]":void 0===(n=b9(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b9(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"shape":void 0===(n=b6(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b6(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"shape[]":void 0===(n=b7(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b7(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"dtype":void 0===(n=b2(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b2(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"dtype[]":void 0===(n=b3(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b3(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"func":void 0===(n=b1(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=b1(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"tensor":case"tensors":break;default:throw Error(`Unsupported param type: ${r.type} for op: ${e.op}`)}return t[r.name]={value:n,type:a},t},{})),r}mapFunction(e){let t=e.nodeDef,r=[],n={};null!=t&&(n=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&r.push(e[t.name]),e),{}));let a=[],i=[];e.signature.inputArg.forEach(e=>{let[t]=bs(e.name),r={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:b0(e.type),type:"dtype"}},children:[]};r.signatureKey=e.name,a.push(r),n[t]=r}),Object.keys(n).forEach(e=>{let t=n[e];t.inputNames.forEach((e,r)=>{let[a,,i]=bs(e),s=n[a];if(null!=s.outputs){let e=s.outputs.indexOf(i);if(-1!==e){let n=`${a}:${e}`;t.inputNames[r]=n}}t.inputs.push(s),s.children.push(t)})});let s=e.ret;e.signature.outputArg.forEach(e=>{let[t,r]=bs(s[e.name]),a=n[t];null!=a&&(a.defaultOutput=r,i.push(a))});let o=this.mapArgsToSignature(e);return{nodes:n,inputs:a,outputs:i,weights:r,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,r)=>(t[r.name]=this.mapArgToTensorInfo(r,e.ret),t),{})}}mapArgToTensorInfo(e,t){let r=e.name;return null!=t&&(r=t[r]),{name:r,dtype:e.type}}}function bY(e,t){let r=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){let t=eb.global;return void 0!==t.atob?t.atob(e):new aE(e,"base64").toString()}(e);return t?r:r.toLowerCase()}function bQ(e,t,r,n=!1){let a=e[t];return null!=a?bY(a.s,n):r}function bZ(e,t,r){let n=e[t];return n?n.b:r}function bJ(e,t,r){let n=e[t]||{},a=null!=n.i?n.i:null!=n.f?n.f:r;return"number"==typeof a?a:parseInt(a,10)}function b0(e){switch("string"==typeof e&&(e=Tq[e]),e){case Tq.DT_FLOAT:case Tq.DT_HALF:return"float32";case Tq.DT_INT32:case Tq.DT_INT64:case Tq.DT_INT8:case Tq.DT_UINT8:return"int32";case Tq.DT_BOOL:return"bool";case Tq.DT_DOUBLE:return"float32";case Tq.DT_STRING:return"string";case Tq.DT_COMPLEX64:case Tq.DT_COMPLEX128:return"complex64";default:return null}}function b1(e,t,r){let n=e[t];return n&&n.func?n.func.name:r}function b2(e,t,r){let n=e[t];return n&&n.type?b0(n.type):r}function b3(e,t,r){let n=e[t];return n&&n.list&&n.list.type?n.list.type.map(e=>b0(e)):r}function b4(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function b6(e,t,r){let n=e[t];return n&&n.shape?b4(n.shape):r}function b5(e,t,r){let n=e[t];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):r}function b8(e,t,r,n=!1){let a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>bY(e,n)):r}function b7(e,t,r){let n=e[t];return n&&n.list&&n.list.shape?n.list.shape.map(e=>b4(e)):r}function b9(e,t,r){let n=e[t];return n&&n.list&&n.list.b?n.list.b:r}class ve{constructor(e,t,r){this.node=e,this.tensorMap=t,this.context=r,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return ba(e,this.tensorMap,this.context)}getAttr(e,t){let r=this.node.rawAttrs[e];if(null!=r.tensor)return ba(e,this.tensorMap,this.context);if(null!=r.i||null!=r.f)return bJ(this.node.rawAttrs,e,t);if(null!=r.s)return bQ(this.node.rawAttrs,e,t);if(null!=r.b)return bZ(this.node.rawAttrs,e,t);if(null!=r.shape)return b6(this.node.rawAttrs,e,t);if(null!=r.type)return b2(this.node.rawAttrs,e,t);if(null!=r.list){if(null!=r.list.i||null!=r.list.f)return b5(this.node.rawAttrs,e,t);if(null!=r.list.s)return b8(this.node.rawAttrs,e,t);if(null!=r.list.shape)return b7(this.node.rawAttrs,e,t);if(null!=r.list.b)return b9(this.node.rawAttrs,e,t);if(null!=r.list.type)return b3(this.node.rawAttrs,e,t)}return t}}var vt={};f(vt,lT);const vr=(e,t,r,n=vt)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[n.add(bn("a",e,t,r),bn("b",e,t,r))];case"AddN":return[n.addN(bn("tensors",e,t,r))];case"FloorMod":case"Mod":return[n.mod(bn("a",e,t,r),bn("b",e,t,r))];case"Mul":return[n.mul(bn("a",e,t,r),bn("b",e,t,r))];case"RealDiv":case"Div":return[n.div(bn("a",e,t,r),bn("b",e,t,r))];case"DivNoNan":return[n.divNoNan(bn("a",e,t,r),bn("b",e,t,r))];case"FloorDiv":return[n.floorDiv(bn("a",e,t,r),bn("b",e,t,r))];case"Sub":return[n.sub(bn("a",e,t,r),bn("b",e,t,r))];case"Minimum":return[n.minimum(bn("a",e,t,r),bn("b",e,t,r))];case"Maximum":return[n.maximum(bn("a",e,t,r),bn("b",e,t,r))];case"Pow":return[n.pow(bn("a",e,t,r),bn("b",e,t,r))];case"SquaredDifference":return[n.squaredDifference(bn("a",e,t,r),bn("b",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vn=(e,t,r,n=vt)=>{switch(e.op){case"Abs":case"ComplexAbs":return[n.abs(bn("x",e,t,r))];case"Acos":return[n.acos(bn("x",e,t,r))];case"Acosh":return[n.acosh(bn("x",e,t,r))];case"Asin":return[n.asin(bn("x",e,t,r))];case"Asinh":return[n.asinh(bn("x",e,t,r))];case"Atan":return[n.atan(bn("x",e,t,r))];case"Atan2":return[n.atan2(bn("x",e,t,r),bn("y",e,t,r))];case"Atanh":return[n.atanh(bn("x",e,t,r))];case"Ceil":return[n.ceil(bn("x",e,t,r))];case"Complex":return[n.complex(bn("real",e,t,r),bn("imag",e,t,r))];case"Cos":return[n.cos(bn("x",e,t,r))];case"Cosh":return[n.cosh(bn("x",e,t,r))];case"Elu":return[n.elu(bn("x",e,t,r))];case"Erf":return[n.erf(bn("x",e,t,r))];case"Exp":return[n.exp(bn("x",e,t,r))];case"Expm1":return[n.expm1(bn("x",e,t,r))];case"Floor":return[n.floor(bn("x",e,t,r))];case"Log":return[n.log(bn("x",e,t,r))];case"Log1p":return[n.log1p(bn("x",e,t,r))];case"Imag":return[n.imag(bn("x",e,t,r))];case"Neg":return[n.neg(bn("x",e,t,r))];case"Reciprocal":return[n.reciprocal(bn("x",e,t,r))];case"Real":return[n.real(bn("x",e,t,r))];case"Relu":return[n.relu(bn("x",e,t,r))];case"Round":return[n.round(bn("x",e,t,r))];case"Selu":return[n.selu(bn("x",e,t,r))];case"Sigmoid":return[n.sigmoid(bn("x",e,t,r))];case"Sin":return[n.sin(bn("x",e,t,r))];case"Sign":return[n.sign(bn("x",e,t,r))];case"Sinh":return[n.sinh(bn("x",e,t,r))];case"Softplus":return[n.softplus(bn("x",e,t,r))];case"Sqrt":return[n.sqrt(bn("x",e,t,r))];case"Square":return[n.square(bn("x",e,t,r))];case"Tanh":return[n.tanh(bn("x",e,t,r))];case"Tan":return[n.tan(bn("x",e,t,r))];case"ClipByValue":return[n.clipByValue(bn("x",e,t,r),bn("clipValueMin",e,t,r),bn("clipValueMax",e,t,r))];case"Relu6":return[n.relu6(bn("x",e,t,r))];case"Rsqrt":return[n.rsqrt(ba(e.inputNames[0],t,r))];case"LeakyRelu":return[n.leakyRelu(bn("x",e,t,r),bn("alpha",e,t,r))];case"Prelu":return[n.prelu(bn("x",e,t,r),bn("alpha",e,t,r))];case"IsNan":return[n.isNaN(ba(e.inputNames[0],t,r))];case"IsInf":return[n.isInf(ba(e.inputNames[0],t,r))];case"IsFinite":return[n.isFinite(ba(e.inputNames[0],t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function va(e,t,r=""){if("number"!=typeof e&&"number"!=typeof t){r0.assert(e.length===t.length,()=>r+` Shapes ${e} and ${t} must match`);for(let n=0;n<e.length;n++){let a=e[n],i=t[n];r0.assert(a<0||i<0||a===i,()=>r+` Shapes ${e} and ${t} must match`)}}}function vi(e){return!("number"==typeof e||e.some(e=>e<0))}function vs(e,t,r){let n=vo(e,r),a=!vi(n);if(a&&0===t.length)throw Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${n}`);if(a&&t.forEach(e=>{n=vo(e.shape,n)}),!vi(n))throw Error(`Non-fully-defined elementShape: ${n}`);return n}function vo(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw Error(`Incompatible ranks during merge: ${e} vs. ${t}`);let r=[];for(let n=0;n<e.length;++n){let a=e[n],i=t[n];if(a>=0&&i>=0&&a!==i)throw Error(`Incompatible shape during merge: ${e} vs. ${t}`);r[n]=a>=0?a:i}return r}class vl{constructor(e,t,r,n,a,i,s){this.name=e,this.dtype=t,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=a,this.dynamicSize=i,this.clearAfterRead=s,this.tensors=[],this.closed_=!1,this.idTensor=i0(0),ag(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let r=this.tensors[e]||{};if(t.dtype!==this.dtype)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=t.shape),va(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),r.read)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(r.written)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);r.tensor=t,ag(t),r.written=!0,this.tensors[e]=r}writeMany(e,t){if(e.length!==t.length)throw Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,r)=>this.write(e,t[r]))}gather(e,t){if(t&&t!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ah([],[0].concat(this.elementShape));let r=this.readMany(e);return va(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),d5(r,0)}concat(e){if(e&&e!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ah([],[0].concat(this.elementShape));let t=[];for(let e=0;e<this.size();e++)t.push(e);let r=this.readMany(t);return va(this.elementShape,r[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${r[0].shape})`),lk(r,0)}scatter(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let r=Math.max(...e);if(!this.dynamicSize&&r>=this.maxSize)throw Error(`Max index must be < array size (${r}  vs. ${this.maxSize})`);this.writeMany(e,hu(t,0))}split(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let r=0,n=e.map(e=>r+=e);if(r!==t.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let a=0===r?0:t.size/r,i=[];af(()=>{t=sV(t,[1,r,a]);for(let r=0;r<e.length;++r){let s=[0,0===r?0:n[r-1],0],o=[1,e[r],a];i[r]=sV(lU(t,s,o),this.elementShape)}return i});let s=[];for(let t=0;t<e.length;t++)s[t]=t;this.writeMany(s,i)}}class vu{get id(){return this.idTensor.id}constructor(e,t,r,n=-1){this.tensors=e,this.elementShape=t,this.elementDtype=r,null!=e&&e.forEach(e=>{if(r!==e.dtype)throw Error(`Invalid data types; op elements ${r}, but list elements ${e.dtype}`);va(t,e.shape,"TensorList shape mismatch: "),ag(e)}),this.idTensor=i0(0),this.maxNumElements=n,ag(this.idTensor)}copy(){return new vu([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,r=-1){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==r&&this.tensors.length!==r)throw Error(`Operation expected a list with ${r} elements but got a list with ${this.tensors.length} elements.`);va(e,this.elementShape,"TensorList shape mismatch: ");let n=vs(this.elementShape,this.tensors,e);return af(()=>d5(this.tensors.map(e=>sV(e,n)),0))}popBack(e,t){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw Error("Trying to pop from an empty list.");let r=vs(this.elementShape,this.tensors,e),n=this.tensors.pop();return n.kept=!1,va(n.shape,e,"TensorList shape mismatch: "),sV(n,r)}pushBack(e){if(e.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(va(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw Error("Trying to push element into a full list.");ag(e),this.tensors.push(e)}resize(e){if(e<0)throw Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new vu([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let r=0;r<Math.min(this.tensors.length,e);++r)t.tensors[r]=this.tensors[r];return t}getItem(e,t,r){if(r!==this.elementDtype)throw Error(`Invalid data types; op elements ${r}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw Error(`element at index ${e} is null.`);va(this.tensors[e].shape,t,"TensorList shape mismatch: ");let n=vs(this.elementShape,this.tensors,t);return sV(this.tensors[e],n)}setItem(e,t){if(t.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);va(this.elementShape,t.shape,"TensorList shape mismatch: "),ag(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,r){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);va(this.elementShape,r,"TensorList shape mismatch: "),e=e.slice(0,this.size());let n=vs(this.elementShape,this.tensors,r);return 0===e.length?ah([],[0].concat(n)):af(()=>d5(e.map(e=>sV(this.tensors[e],n)),0))}concat(e,t){if(e&&e!==this.elementDtype)throw Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);va(this.elementShape,t,"TensorList shape mismatch: ");let r=vs(this.elementShape,this.tensors,t);return 0===this.size()?ah([],[0].concat(r)):af(()=>lk(this.tensors.map(e=>sV(e,r)),0))}}const vd=async(e,t,r)=>{switch(e.op){case"If":case"StatelessIf":{let n=bn("thenBranch",e,t,r),a=bn("elseBranch",e,t,r),i=bn("cond",e,t,r),s=bn("args",e,t,r);if((await i.data())[0])return r.functionMap[n].executeFunctionAsync(s,r.tensorArrayMap,r.tensorListMap);return r.functionMap[a].executeFunctionAsync(s,r.tensorArrayMap,r.tensorListMap)}case"While":case"StatelessWhile":{let n=bn("body",e,t,r),a=bn("cond",e,t,r),i=bn("args",e,t,r),s=await r.functionMap[a].executeFunctionAsync(i,r.tensorArrayMap,r.tensorListMap),o=i.map(e=>e.id),l=await s[0].data();s.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let u=i;for(;l[0];){let e=u,t=(u=await r.functionMap[n].executeFunctionAsync(u,r.tensorArrayMap,r.tensorListMap)).map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});let i=await r.functionMap[a].executeFunctionAsync(u,r.tensorArrayMap,r.tensorListMap);l=await i[0].data(),i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":return[bd(bn("pred",e,t,r))];case"Switch":{let n=bn("pred",e,t,r),a=bn("data",e,t,r);return a.kept||(a=bd(a)),(await n.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{let n=e.inputNames.find(e=>void 0!==ba(e,t,r));if(n)return[bd(ba(n,t,r))];return}case"Enter":{let n=bn("frameName",e,t,r),a=bn("tensor",e,t,r);return r.enterFrame(n),[bd(a)]}case"Exit":{let n=bn("tensor",e,t,r);return r.exitFrame(),[bd(n)]}case"NextIteration":{let n=bn("tensor",e,t,r);return r.nextIteration(),[bd(n)]}case"TensorArrayV3":{let n=bn("size",e,t,r),a=bn("dtype",e,t,r),i=bn("elementShape",e,t,r),s=bn("dynamicSize",e,t,r),o=bn("clearAfterRead",e,t,r),l=bn("identicalElementShapes",e,t,r),u=new vl(bn("name",e,t,r),a,n,i,l,s,o);return r.addTensorArray(u),[u.idTensor,i0(1)]}case"TensorArrayWriteV3":{let n=bn("tensorArrayId",e,t,r),a=bn("index",e,t,r),i=bn("tensor",e,t,r),s=r.getTensorArray(n.id);return s.write(a,i),[s.idTensor]}case"TensorArrayReadV3":{let n=bn("tensorArrayId",e,t,r),a=bn("index",e,t,r);return[r.getTensorArray(n.id).read(a)]}case"TensorArrayGatherV3":{let n=bn("tensorArrayId",e,t,r),a=bn("indices",e,t,r),i=bn("dtype",e,t,r);return[r.getTensorArray(n.id).gather(a,i)]}case"TensorArrayScatterV3":{let n=bn("tensorArrayId",e,t,r),a=bn("indices",e,t,r),i=bn("tensor",e,t,r),s=r.getTensorArray(n.id);return s.scatter(a,i),[s.idTensor]}case"TensorArrayConcatV3":{let n=bn("tensorArrayId",e,t,r),a=r.getTensorArray(n.id),i=bn("dtype",e,t,r);return[a.concat(i)]}case"TensorArraySplitV3":{let n=bn("tensorArrayId",e,t,r),a=bn("tensor",e,t,r),i=bn("lengths",e,t,r),s=r.getTensorArray(n.id);return s.split(i,a),[s.idTensor]}case"TensorArraySizeV3":{let n=bn("tensorArrayId",e,t,r);return[i0(r.getTensorArray(n.id).size(),"int32")]}case"TensorArrayCloseV3":{let n=bn("tensorArrayId",e,t,r),a=r.getTensorArray(n.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{let n=bn("tensorListId",e,t,r),a=bn("index",e,t,r),i=bn("tensor",e,t,r),s=r.getTensorList(n.id);return s.setItem(a,i),[s.idTensor]}case"TensorListGetItem":{let n=bn("tensorListId",e,t,r),a=bn("index",e,t,r),i=bn("elementShape",e,t,r),s=bn("elementDType",e,t,r);return[r.getTensorList(n.id).getItem(a,i,s)]}case"TensorListScatterV2":case"TensorListScatter":{let n=bn("indices",e,t,r),a=bn("tensor",e,t,r),i=function(e,t,r,n){if(t.length!==e.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let a=Math.max(...t);if(null!=n&&-1!==n&&a>=n)throw Error(`Max index must be < array size (${a}  vs. ${n})`);let i=new vu([],r,e.dtype,n),s=hu(e,0);return t.forEach((e,t)=>{i.setItem(e,s[t])}),i}(a,n,bn("elementShape",e,t,r),bn("numElements",e,t,r));return r.addTensorList(i),[i.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let n,a=bn("elementShape",e,t,r),i=bn("elementDType",e,t,r),s=bn("TensorListReserve"===e.op?"numElements":"maxNumElements",e,t,r),o=new vu([],a,i,"TensorListReserve"===e.op?-1:s);return r.addTensorList(o),[o.idTensor]}case"TensorListGather":{let n=bn("tensorListId",e,t,r),a=bn("indices",e,t,r),i=bn("elementShape",e,t,r),s=bn("elementDType",e,t,r);return[r.getTensorList(n.id).gather(a,s,i)]}case"TensorListStack":{let n=bn("tensorListId",e,t,r),a=bn("elementShape",e,t,r),i=bn("elementDType",e,t,r),s=bn("numElements",e,t,r);return[r.getTensorList(n.id).stack(a,i,s)]}case"TensorListFromTensor":{let n=bn("tensor",e,t,r),a=function(e,t,r){let n=e.dtype;if(e.shape.length<1)throw Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==r)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${r}`);return va(e.shape.slice(1),t,"TensorList shape mismatch: "),new vu(hu(e),t,n)}(n,bn("elementShape",e,t,r),bn("elementDType",e,t,r));return r.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let n=bn("tensorListId",e,t,r),a=r.getTensorList(n.id),i=bn("dtype",e,t,r),s=bn("elementShape",e,t,r);return[a.concat(i,s)]}case"TensorListPushBack":{let n=bn("tensorListId",e,t,r),a=bn("tensor",e,t,r),i=r.getTensorList(n.id);return i.pushBack(a),[i.idTensor]}case"TensorListPopBack":{let n=bn("tensorListId",e,t,r),a=bn("elementShape",e,t,r),i=bn("elementDType",e,t,r);return[r.getTensorList(n.id).popBack(a,i)]}case"TensorListSplit":{let n=bn("tensor",e,t,r),a=bn("elementShape",e,t,r),i=function(e,t,r){let n=0,a=t.map(e=>n+=e);if(n!==e.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${e.shape}`);let i=vo(e.shape.slice(1),r),s=0===n?0:e.size/n,o=af(()=>{let r=[];e=sV(e,[1,n,s]);for(let n=0;n<t.length;++n){let o=[0,0===n?0:a[n-1],0],l=[1,t[n],s];r[n]=sV(lU(e,o,l),i)}return e.dispose(),r}),l=new vu([],r,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(n,bn("lengths",e,t,r),a);return r.addTensorList(i),[i.idTensor]}case"TensorListLength":{let n=bn("tensorListId",e,t,r);return[i0(r.getTensorList(n.id).size(),"int32")]}case"TensorListResize":{let n=bn("tensorListId",e,t,r),a=bn("size",e,t,r),i=r.getTensorList(n.id).resize(a);return r.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function vh(e,t,r){let[n,a]=bn("fusedOps",e,t,r),i="biasadd"===n,s="prelu"===a,o=bn("numArgs",e,t,r);if(i){if(s&&2!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&i&&1!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if("fusedbatchnorm"===n)throw Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let l=bn("strides",e,t,r),u=bu(e,t,r),d=bn("dataFormat",e,t,r).toUpperCase(),h=bn("dilations",e,t,r),[p,c]=bn("args",e,t,r);return i||(c=p,p=void 0),{stride:l,pad:u,dataFormat:d,dilations:h,biasArg:p,preluArg:c,activationFunc:a,leakyreluAlpha:bn("leakyreluAlpha",e,t,r)}}const vp=(e,t,r,n=vt)=>{switch(e.op){case"Conv1D":{let a=bn("stride",e,t,r),i=bn("pad",e,t,r),s=bn("dataFormat",e,t,r).toUpperCase(),o=bn("dilation",e,t,r);return[n.conv1d(bn("x",e,t,r),bn("filter",e,t,r),a,i,s,o)]}case"Conv2D":{let a=bn("strides",e,t,r),i=bu(e,t,r),s=bn("dataFormat",e,t,r).toUpperCase(),o=bn("dilations",e,t,r);return[n.conv2d(bn("x",e,t,r),bn("filter",e,t,r),[a[1],a[2]],i,s,[o[1],o[2]])]}case"_FusedConv2D":{let{stride:a,pad:i,dataFormat:s,dilations:o,biasArg:l,preluArg:u,activationFunc:d,leakyreluAlpha:h}=vh(e,t,r);return[n.fused.conv2d({x:bn("x",e,t,r),filter:bn("filter",e,t,r),strides:[a[1],a[2]],pad:i,dataFormat:s,dilations:[o[1],o[2]],bias:l,activation:d,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{let{stride:a,pad:i,dataFormat:s,dilations:o,biasArg:l,preluArg:u,activationFunc:d,leakyreluAlpha:h}=vh(e,t,r);return[n.fused.depthwiseConv2d({x:bn("x",e,t,r),filter:bn("filter",e,t,r),strides:[a[1],a[2]],pad:i,dataFormat:s,dilations:[o[1],o[2]],bias:l,activation:d,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let a=bn("outputShape",e,t,r),i=bn("strides",e,t,r),s=bu(e,t,r);return[n.conv2dTranspose(bn("x",e,t,r),bn("filter",e,t,r),a,[i[1],i[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let a=bn("strides",e,t,r),i=bu(e,t,r),s=bn("dilations",e,t,r),o=bn("dataFormat",e,t,r).toUpperCase();return[n.depthwiseConv2d(bn("input",e,t,r),bn("filter",e,t,r),[a[1],a[2]],i,o,[s[1],s[2]])]}case"Conv3D":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("dataFormat",e,t,r).toUpperCase(),o=bn("dilations",e,t,r);return[n.conv3d(bn("x",e,t,r),bn("filter",e,t,r),[a[1],a[2],a[3]],i,s,[o[1],o[2],o[3]])]}case"AvgPool":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("kernelSize",e,t,r);return[n.avgPool(bn("x",e,t,r),[s[1],s[2]],[a[1],a[2]],i)]}case"MaxPool":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("kernelSize",e,t,r);return[n.maxPool(bn("x",e,t,r),[s[1],s[2]],[a[1],a[2]],i)]}case"MaxPoolWithArgmax":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("kernelSize",e,t,r),o=bn("includeBatchInIndex",e,t,r),{result:l,indexes:u}=n.maxPoolWithArgmax(bn("x",e,t,r),[s[1],s[2]],[a[1],a[2]],i,o);return[l,u]}case"AvgPool3D":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("kernelSize",e,t,r);return[n.avgPool3d(bn("x",e,t,r),[s[1],s[2],s[3]],[a[1],a[2],a[3]],i)]}case"MaxPool3D":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("kernelSize",e,t,r);return[n.maxPool3d(bn("x",e,t,r),[s[1],s[2],s[3]],[a[1],a[2],a[3]],i)]}case"Dilation2D":{let a=bn("strides",e,t,r),i=bn("pad",e,t,r),s=bn("dilations",e,t,r),o=a[1],l=a[2],u=s[1],d=s[2];return[n.dilation2d(bn("x",e,t,r),bn("filter",e,t,r),[o,l],i,[u,d],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},vc=(e,t,r,n=vt)=>{switch(e.op){case"Fill":{let a=bn("shape",e,t,r),i=bn("dtype",e,t,r),s=bn("value",e,t,r);return[n.fill(a,s,i)]}case"LinSpace":{let a=bn("start",e,t,r),i=bn("stop",e,t,r),s=bn("num",e,t,r);return[n.linspace(a,i,s)]}case"Multinomial":{let a=bn("logits",e,t,r),i=bn("numSamples",e,t,r),s=bn("seed",e,t,r);return[n.multinomial(a,i,s)]}case"OneHot":{let a=bn("indices",e,t,r),i=bn("depth",e,t,r),s=bn("onValue",e,t,r),o=bn("offValue",e,t,r),l=bn("dtype",e,t,r);return[n.oneHot(a,i,s,o,l)]}case"Ones":return[n.ones(bn("shape",e,t,r),bn("dtype",e,t,r))];case"OnesLike":return[n.onesLike(bn("x",e,t,r))];case"RandomStandardNormal":return[n.randomStandardNormal(bn("shape",e,t,r),bn("dtype",e,t,r),bn("seed",e,t,r))];case"RandomUniform":return[n.randomUniform(bn("shape",e,t,r),bn("minval",e,t,r),bn("maxval",e,t,r),bn("dtype",e,t,r))];case"RandomUniformInt":return[n.randomUniformInt(bn("shape",e,t,r),bn("minval",e,t,r),bn("maxval",e,t,r),bn("seed",e,t,r))];case"Range":{let a=bn("start",e,t,r),i=bn("stop",e,t,r),s=bn("step",e,t,r);return[n.range(a,i,s,bn("dtype",e,t,r))]}case"TruncatedNormal":{let a=bn("shape",e,t,r),i=bn("mean",e,t,r),s=bn("stdDev",e,t,r),o=bn("seed",e,t,r);return[n.truncatedNormal(a,i,s,bn("dtype",e,t,r),o)]}case"Zeros":return[n.zeros(bn("shape",e,t,r),bn("dtype",e,t,r))];case"ZerosLike":return[n.zerosLike(bn("x",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function vf(e,t,r){let n=bn("boxes",e,t,r),a=bn("scores",e,t,r),i=bn("maxOutputSize",e,t,r),s=bn("iouThreshold",e,t,r);return{boxes:n,scores:a,maxOutputSize:i,iouThreshold:s,scoreThreshold:bn("scoreThreshold",e,t,r),softNmsSigma:bn("softNmsSigma",e,t,r)}}const vm=async(e,t,r,n,a=vt)=>{switch(e.op){case"NonMaxSuppressionV5":{let{boxes:n,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=vf(e,t,r),d=await a.image.nonMaxSuppressionWithScoreAsync(n,i,s,o,l,u);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:n,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=vf(e,t,r),u=bn("padToMaxOutputSize",e,t,r),d=await a.image.nonMaxSuppressionPaddedAsync(n,i,s,o,l,u);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:n,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=vf(e,t,r);return[await a.image.nonMaxSuppressionAsync(n,i,s,o,l)]}case"Where":{let n=a.cast(bn("condition",e,t,r),"bool"),i=[await a.whereAsync(n)];return n.dispose(),i}case"ListDiff":return a.setdiff1dAsync(bn("x",e,t,r),bn("y",e,t,r));default:throw TypeError(`Node type ${e.op} is not implemented`)}},vg=(e,t,r,n=vt)=>{switch(e.op){case"LowerBound":{let a=bn("sortedSequence",e,t,r),i=bn("values",e,t,r);return[n.lowerBound(a,i)]}case"TopKV2":{let a=bn("x",e,t,r),i=bn("k",e,t,r),s=bn("sorted",e,t,r),o=n.topk(a,i,s);return[o.values,o.indices]}case"UpperBound":{let a=bn("sortedSequence",e,t,r),i=bn("values",e,t,r);return[n.upperBound(a,i)]}case"Unique":{let a=bn("x",e,t,r),i=n.unique(a);return[i.values,i.indices]}case"UniqueV2":{let a=bn("x",e,t,r),i=bn("axis",e,t,r),s=n.unique(a,i);return[s.values,s.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},vy=(e,t,r,n=vt)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":let a=bn("default",e,t,r);return[ba(e.name,t,r)||a];case"Placeholder":return[ba(e.name,t,r)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[bd(bn("x",e,t,r))];case"IdentityN":return bn("x",e,t,r).map(e=>bd(e));case"Shape":return[n.tensor1d(bn("x",e,t,r).shape,"int32")];case"ShapeN":return bn("x",e,t,r).map(e=>n.tensor1d(e.shape));case"Size":return[n.scalar(bn("x",e,t,r).size,"int32")];case"Rank":return[n.scalar(bn("x",e,t,r).rank,"int32")];case"NoOp":return[n.scalar(1)];case"Print":let i=bn("x",e,t,r),s=bn("data",e,t,r),o=bn("message",e,t,r),l=bn("summarize",e,t,r);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,l));return[i];default:throw TypeError(`Node type ${e.op} is not implemented`)}};class vx{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=i0(0),this.tensorMap=new Map,ag(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return i0(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let r=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),af(()=>{let e=hu(t),n=r.length,a=e.length;r0.assert(n===a,()=>`The number of elements doesn't match, keys has ${n} elements, the values has ${a} elements.`);for(let t=0;t<n;t++){let n=r[t],a=e[t];ag(a),this.tensorMap.set(n,a)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);let r=await e.data();return af(()=>{let e=[];for(let n=0;n<r.length;n++){let a=r[n],i=this.findWithDefault(a,t);e.push(i)}return d5(e)})}findWithDefault(e,t){let r=this.tensorMap.get(e);return null!=r?r:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const vb=async(e,t,r,n)=>{switch(e.op){case"HashTable":case"HashTableV2":{let a=n.getHashTableHandleByName(e.name);if(null!=a)return[a];{let a=new vx(bn("keyDType",e,t,r),bn("valueDType",e,t,r));return n.addHashTable(e.name,a),[a.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{let a=bn("tableHandle",e,t,r,n),i=bn("keys",e,t,r),s=bn("values",e,t,r),o=n.getHashTableById(a.id);return[await o.import(i,s)]}case"LookupTableFind":case"LookupTableFindV2":{let a=bn("tableHandle",e,t,r,n),i=bn("keys",e,t,r),s=bn("defaultValue",e,t,r),o=n.getHashTableById(a.id);return[await o.find(i,s)]}case"LookupTableSize":case"LookupTableSizeV2":{let a=bn("tableHandle",e,t,r,n);return[n.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},vv=(e,t,r,n=vt)=>{switch(e.op){case"ResizeBilinear":{let a=bn("images",e,t,r),i=bn("size",e,t,r),s=bn("alignCorners",e,t,r),o=bn("halfPixelCenters",e,t,r);return[n.image.resizeBilinear(a,[i[0],i[1]],s,o)]}case"ResizeNearestNeighbor":{let a=bn("images",e,t,r),i=bn("size",e,t,r),s=bn("alignCorners",e,t,r),o=bn("halfPixelCenters",e,t,r);return[n.image.resizeNearestNeighbor(a,[i[0],i[1]],s,o)]}case"CropAndResize":{let a=bn("image",e,t,r),i=bn("boxes",e,t,r),s=bn("boxInd",e,t,r),o=bn("cropSize",e,t,r),l=bn("method",e,t,r),u=bn("extrapolationValue",e,t,r);return[n.image.cropAndResize(a,i,s,o,l,u)]}case"ImageProjectiveTransformV3":{let a=bn("images",e,t,r),i=bn("transforms",e,t,r),s=bn("outputShape",e,t,r),o=bn("fillValue",e,t,r),l=bn("interpolation",e,t,r),u=bn("fillMode",e,t,r);return[n.image.transform(a,i,l.toLowerCase(),u.toLowerCase(),o,s)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},vw=(e,t,r,n=vt)=>{switch(e.op){case"Equal":return[n.equal(bn("a",e,t,r),bn("b",e,t,r))];case"NotEqual":return[n.notEqual(bn("a",e,t,r),bn("b",e,t,r))];case"Greater":return[n.greater(bn("a",e,t,r),bn("b",e,t,r))];case"GreaterEqual":return[n.greaterEqual(bn("a",e,t,r),bn("b",e,t,r))];case"Less":return[n.less(bn("a",e,t,r),bn("b",e,t,r))];case"LessEqual":return[n.lessEqual(bn("a",e,t,r),bn("b",e,t,r))];case"LogicalAnd":return[n.logicalAnd(bn("a",e,t,r),bn("b",e,t,r))];case"LogicalNot":return[n.logicalNot(bn("a",e,t,r))];case"LogicalOr":return[n.logicalOr(bn("a",e,t,r),bn("b",e,t,r))];case"Select":case"SelectV2":return[n.where(bn("condition",e,t,r),bn("a",e,t,r),bn("b",e,t,r))];case"BitwiseAnd":return[n.bitwiseAnd(bn("a",e,t,r),bn("b",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vS=(e,t,r,n=vt)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[n.matMul(bn("a",e,t,r),bn("b",e,t,r),bn("transposeA",e,t,r),bn("transposeB",e,t,r))];case"Einsum":return[n.einsum(bn("equation",e,t,r),...bn("tensors",e,t,r))];case"Transpose":return[n.transpose(bn("x",e,t,r),bn("perm",e,t,r))];case"_FusedMatMul":let[a,i]=bn("fusedOps",e,t,r),s="prelu"===i,o=bn("numArgs",e,t,r),l=bn("leakyreluAlpha",e,t,r);if("biasadd"===a){if(s&&2!==o)throw Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&1!==o)throw Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[u,d]=bn("args",e,t,r);return[n.fused.matMul({a:bn("a",e,t,r),b:bn("b",e,t,r),transposeA:bn("transposeA",e,t,r),transposeB:bn("transposeB",e,t,r),bias:u,activation:i,preluActivationWeights:d,leakyreluAlpha:l})];case"MatrixBandPart":return[n.linalg.bandPart(bn("a",e,t,r),bn("numLower",e,t,r),bn("numUpper",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vk=(e,t,r,n=vt)=>{switch(e.op){case"EuclideanNorm":return[n.euclideanNorm(bn("x",e,t,r),bn("axis",e,t,r),bn("keepDims",e,t,r))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[n.batchNorm(bn("x",e,t,r),bn("mean",e,t,r),bn("variance",e,t,r),bn("offset",e,t,r),bn("scale",e,t,r),bn("epsilon",e,t,r))];case"LRN":return[n.localResponseNormalization(bn("x",e,t,r),bn("radius",e,t,r),bn("bias",e,t,r),bn("alpha",e,t,r),bn("beta",e,t,r))];case"Softmax":return[n.softmax(bn("x",e,t,r))];case"LogSoftmax":return[n.logSoftmax(bn("x",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vC=(e,t,r,n=vt)=>{switch(e.op){case"RaggedGather":{let{outputNestedSplits:a,outputDenseValues:i}=n.raggedGather(bn("paramsNestedSplits",e,t,r),bn("paramsDenseValues",e,t,r),bn("indices",e,t,r),bn("outputRaggedRank",e,t,r));return a.concat(i)}case"RaggedRange":{let{rtNestedSplits:a,rtDenseValues:i}=n.raggedRange(bn("starts",e,t,r),bn("limits",e,t,r),bn("splits",e,t,r));return[a,i]}case"RaggedTensorToTensor":return[n.raggedTensorToTensor(bn("shape",e,t,r),bn("values",e,t,r),bn("defaultValue",e,t,r),bn("rowPartitionTensors",e,t,r),bn("rowPartitionTypes",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vI=(e,t,r,n=vt)=>{switch(e.op){case"Max":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.max(bn("x",e,t,r),a,i)]}case"Mean":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.mean(bn("x",e,t,r),a,i)]}case"Min":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.min(bn("x",e,t,r),a,i)]}case"Sum":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.sum(bn("x",e,t,r),a,i)]}case"All":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.all(bn("x",e,t,r),a,i)]}case"Any":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.any(bn("x",e,t,r),a,i)]}case"ArgMax":{let a=bn("axis",e,t,r);return[n.argMax(bn("x",e,t,r),a)]}case"ArgMin":{let a=bn("axis",e,t,r);return[n.argMin(bn("x",e,t,r),a)]}case"Prod":{let a=bn("axis",e,t,r),i=bn("keepDims",e,t,r);return[n.prod(bn("x",e,t,r),a,i)]}case"Cumprod":{let a=bn("axis",e,t,r),i=bn("exclusive",e,t,r),s=bn("reverse",e,t,r);return[n.cumprod(bn("x",e,t,r),a,i,s)]}case"Cumsum":{let a=bn("axis",e,t,r),i=bn("exclusive",e,t,r),s=bn("reverse",e,t,r);return[n.cumsum(bn("x",e,t,r),a,i,s)]}case"Bincount":let a=bn("x",e,t,r),i=bn("weights",e,t,r),s=bn("size",e,t,r);return[n.bincount(a,i,s)];case"DenseBincount":{let a=bn("x",e,t,r),i=bn("weights",e,t,r),s=bn("size",e,t,r),o=bn("binaryOutput",e,t,r);return[n.denseBincount(a,i,s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},vT=(e,t,r,n=vt)=>{switch(e.op){case"ConcatV2":case"Concat":{let a=bn("n",e,t,r),i=bn("axis",e,t,r),s=bn("tensors",e,t,r);return s=s.slice(0,a),[n.concat(s,i)]}case"Gather":{let a=bn("x",e,t,r),i=bn("indices",e,t,r);return[n.gather(a,n.cast(i,"int32"),0)]}case"GatherV2":{let a=bn("axis",e,t,r),i=bn("batchDims",e,t,r),s=bn("x",e,t,r),o=bn("indices",e,t,r);return[n.gather(s,n.cast(o,"int32"),a,i)]}case"Reverse":{let a=bn("dims",e,t,r),i=[];for(let e=0;e<a.length;e++)a[e]&&i.push(e);let s=bn("x",e,t,r);return[n.reverse(s,i)]}case"ReverseV2":{let a=bn("axis",e,t,r),i=bn("x",e,t,r);return[n.reverse(i,a)]}case"Slice":{let a=bn("begin",e,t,r),i=bn("size",e,t,r);return[n.slice(bn("x",e,t,r),a,i)]}case"StridedSlice":{let a=bn("begin",e,t,r),i=bn("end",e,t,r),s=bn("strides",e,t,r),o=bn("beginMask",e,t,r),l=bn("endMask",e,t,r),u=bn("ellipsisMask",e,t,r),d=bn("newAxisMask",e,t,r),h=bn("shrinkAxisMask",e,t,r),p=bn("x",e,t,r);return[n.stridedSlice(p,a,i,s,o,l,u,d,h)]}case"Pack":return af(()=>{let a=bn("axis",e,t,r),i=bn("tensors",e,t,r),s=i[0].shape,o=n.squeeze(i[0]).shape,l=i.map(e=>{let t=r0.arraysEqual(e.shape,s);if(!t&&!r0.arraysEqual(n.squeeze(e).shape,o))throw Error("the input tensors shape does not match");return t?e:n.reshape(e,s)});return[n.stack(l,a)]});case"Unpack":{let a=bn("axis",e,t,r),i=bn("tensor",e,t,r);return n.unstack(i,a)}case"Tile":{let a=bn("reps",e,t,r);return[n.tile(bn("x",e,t,r),a)]}case"Split":case"SplitV":{let a=bn("axis",e,t,r),i=bn("numOrSizeSplits",e,t,r),s=bn("x",e,t,r);return n.split(s,i,a)}case"ScatterNd":{let a=bn("indices",e,t,r),i=bn("values",e,t,r),s=bn("shape",e,t,r);return[n.scatterND(a,i,s)]}case"GatherNd":{let a=bn("x",e,t,r),i=bn("indices",e,t,r);return[n.gatherND(a,i)]}case"SparseToDense":{let a=bn("sparseIndices",e,t,r),i=bn("outputShape",e,t,r),s=bn("sparseValues",e,t,r),o=bn("defaultValue",e,t,r);return[n.sparseToDense(a,s,i,s.dtype===o.dtype?o:n.cast(o,s.dtype))]}case"TensorScatterUpdate":{let a=bn("indices",e,t,r),i=bn("values",e,t,r),s=bn("tensor",e,t,r);return[n.tensorScatterUpdate(s,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},v$=(e,t,r,n=vt)=>{switch(e.op){case"SparseFillEmptyRows":{let{outputIndices:a,outputValues:i,emptyRowIndicator:s,reverseIndexMap:o}=n.sparse.sparseFillEmptyRows(bn("indices",e,t,r),bn("values",e,t,r),bn("denseShape",e,t,r),bn("defaultValue",e,t,r));return[a,i,s,o]}case"SparseReshape":{let{outputIndices:a,outputShape:i}=n.sparse.sparseReshape(bn("inputIndices",e,t,r),bn("inputShape",e,t,r),bn("newShape",e,t,r));return[a,i]}case"SparseSegmentMean":return[n.sparse.sparseSegmentMean(bn("data",e,t,r),bn("indices",e,t,r),bn("segmentIds",e,t,r))];case"SparseSegmentSum":return[n.sparse.sparseSegmentSum(bn("data",e,t,r),bn("indices",e,t,r),bn("segmentIds",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vN=(e,t,r,n=vt)=>{switch(e.op){case"FFT":return[n.fft(bn("x",e,t,r))];case"IFFT":return[n.ifft(bn("x",e,t,r))];case"RFFT":return[n.rfft(bn("x",e,t,r))];case"IRFFT":return[n.irfft(bn("x",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vE=(e,t,r,n=vt)=>{switch(e.op){case"StaticRegexReplace":return[n.string.staticRegexReplace(bn("input",e,t,r),bn("pattern",e,t,r),bn("rewrite",e,t,r),bn("replaceGlobal",e,t,r))];case"StringNGrams":{let{nGrams:a,nGramsSplits:i}=n.string.stringNGrams(bn("data",e,t,r),bn("dataSplits",e,t,r),bn("separator",e,t,r),bn("nGramWidths",e,t,r),bn("leftPad",e,t,r),bn("rightPad",e,t,r),bn("padWidth",e,t,r),bn("preserveShortSequences",e,t,r));return[a,i]}case"StringSplit":{let{indices:a,values:i,shape:s}=n.string.stringSplit(bn("input",e,t,r),bn("delimiter",e,t,r),bn("skipEmpty",e,t,r));return[a,i,s]}case"StringToHashBucketFast":return[n.string.stringToHashBucketFast(bn("input",e,t,r),bn("numBuckets",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},vR=(e,t,r,n=vt)=>{switch(e.op){case"Cast":return[n.cast(bn("x",e,t,r),bn("dtype",e,t,r))];case"ExpandDims":{let a=bn("axis",e,t,r);return[n.expandDims(bn("x",e,t,r),a)]}case"Squeeze":{let a=bn("axis",e,t,r);return[n.squeeze(bn("x",e,t,r),a)]}case"Reshape":return[n.reshape(bn("x",e,t,r),bn("shape",e,t,r))];case"EnsureShape":return[n.ensureShape(bn("x",e,t,r),bn("shape",e,t,r))];case"MirrorPad":return[n.mirrorPad(bn("x",e,t,r),bn("padding",e,t,r),bn("mode",e,t,r))];case"PadV2":case"Pad":return[n.pad(bn("x",e,t,r),bn("padding",e,t,r),bn("constantValue",e,t,r))];case"SpaceToBatchND":{let a=bn("blockShape",e,t,r),i=bn("paddings",e,t,r);return[n.spaceToBatchND(bn("x",e,t,r),a,i)]}case"BatchToSpaceND":{let a=bn("blockShape",e,t,r),i=bn("crops",e,t,r);return[n.batchToSpaceND(bn("x",e,t,r),a,i)]}case"DepthToSpace":{let a=bn("blockSize",e,t,r),i=bn("dataFormat",e,t,r).toUpperCase();return[n.depthToSpace(bn("x",e,t,r),a,i)]}case"BroadcastTo":return[n.broadcastTo(bn("x",e,t,r),bn("shape",e,t,r))];case"BroadcastArgs":return[n.broadcastArgs(bn("s0",e,t,r),bn("s1",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function vA(e,t,r,n,a=af){let i=((e,t,r)=>{switch(e.category){case"arithmetic":return a(()=>vr(e,t,r));case"basic_math":return a(()=>vn(e,t,r));case"control":return vd(e,t,r);case"convolution":return a(()=>vp(e,t,r));case"creation":return a(()=>vc(e,t,r));case"dynamic":return vm(e,t,r);case"evaluation":return a(()=>vg(e,t,r));case"image":return a(()=>vv(e,t,r));case"graph":return a(()=>vy(e,t,r));case"logical":return a(()=>vw(e,t,r));case"matrices":return a(()=>vS(e,t,r));case"normalization":return a(()=>vk(e,t,r));case"ragged":return a(()=>vC(e,t,r));case"reduction":return a(()=>vI(e,t,r));case"slice_join":return a(()=>vT(e,t,r));case"sparse":return a(()=>v$(e,t,r));case"spectral":return a(()=>vN(e,t,r));case"string":return a(()=>vE(e,t,r));case"transformation":return a(()=>vR(e,t,r));case"hash_table":return vb(e,t,r,n);case"custom":let i=br[e.op];if(i&&i.customExecutor)return i.customExecutor(new ve(e,t,r));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,r);return r0.isPromise(i)?i.then(e=>[].concat(e)):[].concat(i)}class v_{constructor(e={},t={},r={},n={},a){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=r,this.functionMap=n,this.parseNodeNameCache=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let r=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(r))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function vO(e,t,r,n){let a=new Set,i=[],s=null,o=null,l=new Set,u=new Set(Object.keys(e).map(e=>bl(e)[0])),d=new Set((n=n||[]).map(e=>bl(e.name)[0])),h=[...t];for(;h.length>0;){var p,c;let e=h.pop();if((vM(e)||(p=e,vD.has(p.op))||(c=e,vL.has(c.op)))&&null==s&&(o=(s=e).children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),!(null!=r[e.name]||u.has(e.name)||d.has(e.name))){if(0===e.inputs.length){i.push(e.name);continue}e.inputs.forEach(e=>{l.has(e.name)||(l.add(e.name),h.push(e))})}}return{inputs:e,outputs:t,usedNodes:a,missingInputs:i,dynamicNode:s,syncInputs:o}}class vF extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const vP=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),vD=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),vL=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function vM(e){return vP.has(e.op)}class vB{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new vB(e.functions[t],this)})}getCompilationKey(e,t){let r=e.map(e=>e.name).sort(),n=t.map(e=>e.name).sort();return r.join(this.SEPARATOR)+"--"+n.join(this.SEPARATOR)}compile(e,t){let r=vO(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:a,syncInputs:i}=r;if(null!=a)throw Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let r=t.map(e=>e.name),a=Object.keys(e);throw Error(`Cannot compute the outputs [${r}] from the provided inputs [${a}]. Missing the following inputs: [${n}]`)}let s=function(e,t){let{usedNodes:r,inputs:n}=t,a=Object.keys(n).map(e=>bl(e)[0]).map(t=>e.nodes[t]),i=e.initNodes||[],s=e=>r.has("string"==typeof e?e:e.name);function o(e){return[...new Map(e.map(e=>[e.name,e])).values()]}let l=o([...a,...e.weights,...i]).filter(s),u=o([...l,...Object.values(e.nodes)]).filter(s),d=new Map(u.map(e=>[e.name,e])),h={};for(let e of u)for(let t of(h[e.name]=h[e.name]||0,e.children))s(t)||(h[t.name]=Number.POSITIVE_INFINITY),h[t.name]=(h[t.name]||0)+1;let p=Object.entries(h).filter(([,e])=>0===e).map(([e])=>e),c=[...p];for(;p.length>0;){let e=p.pop();for(let t of d.get(e).children.filter(s))0==--h[t.name]&&(c.push(t.name),p.push(t.name))}let f=function(e,t){let r=new Map(e.map(e=>[e.name,e])),n=t.map(e=>e.name),a=new Set(n);for(;n.length>0;){let e=n.pop();for(let t of r.get(e).children)!r.has(t.name)||a.has(t.name)||(a.add(t.name),n.push(t.name))}return e.filter(e=>a.has(e.name))}(c.map(e=>d.get(e)),l);return function(e,t){let r=new Map(e.map((e,t)=>[e.name,t])),n=new Set(t.map(e=>e.name)),a=e=>n.has("string"==typeof e?e:e.name),i=new Set(e.map(e=>e.name)),s=e=>i.has("string"==typeof e?e:e.name);for(let t of e){for(let e of t.children.filter(s)){if(!r.has(e.name))throw new vF(`Child ${e.name} of node ${t.name} is unreachable.`);if(r.get(t.name)>r.get(e.name))throw new vF(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!a(t))for(let e of t.inputs){if(!r.has(e.name))throw new vF(`Input ${e.name} of node ${t.name} is unreachable.`);if(r.get(e.name)>r.get(t.name))throw new vF(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}(this.graph,r),o=function(e){let t=new Map(e.map((e,t)=>[e.name,t])),r=Number.MAX_SAFE_INTEGER,n=e.map((e,t)=>vM(e)?r:t),a=e=>{let r=n[t.get(e.name)];return null==r?-1:r},i=e.map((e,t)=>e.children.map(a).reduce((e,t)=>Math.max(e,t),n[t])),s=new Map;for(let t=0;t<e.length;++t){let n=i[t];if(n===r)continue;let a=e[t],o=e[n];s.has(o.name)||s.set(o.name,[]),s.get(o.name).push(a)}return s}(s);return{orderedNodes:s,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;let t=e.clone();return ag(t),t}cloneTensorList(e){return e?e.map(e=>this.cloneAndKeepTensor(e)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.cloneTensorList(t)]))}execute(e,t){this.disposeIntermediateTensors();let r=Object.keys(e=this.mapInputs(e)).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let n=r.map(e=>this.graph.nodes[bl(e)[0]]),a=t.map(e=>bl(e)[0]),i=new Set(a),s=a.map(e=>this.graph.nodes[e]);0===s.length&&(s=this._outputs);let o=this.getCompilationKey(n,s),l=this.compiledMap.get(o);null==l&&(l=this.compile(e,s),this.compiledMap.set(o,l));try{this.keepIntermediateTensors=eb.getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}let u={},d={};return af(()=>{let r=new v_(this.weightMap,u,d,this.functionExecutorMap,this.parseNodeNameCache),n=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach(t=>{let[a,i]=bl(t,r),s=[];s[i]=e[t],n[a]=s,this.keepIntermediateTensors&&(this.clonedTensorsMap[a]=this.cloneTensorList(s))});let a=this.getFrozenTensorIds(n),{orderedNodes:s,nodeLiveUntilMap:o}=l;for(let e of s){if(n[e.name])continue;let t=vA(e,n,r,this._resourceManager);if(r0.isPromise(t))throw Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);n[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,n,r,a,i,o.get(e.name))}return null==this.parent&&r.dispose(a),t.map(e=>ba(e,n,r))})}getFrozenTensorIds(e){return new Set([].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id))))}checkTensorForDisposal(e,t,r,n,a,i,s){if(!(vM(t)||i.has(e))){for(let n of r[e])null!=n&&(s[n.id]=(s[n.id]||0)+t.children.length);for(let e of t.inputs){if(vM(e))continue;let t=bi(e.name,r,n);if(null!=t)for(let e of t){if(!e||e.kept||a.has(e.id))continue;let t=s[e.id];1===t?(e.dispose(),delete s[e.id]):null!=t&&s[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,r,n,a,i){if(!vM(e)&&null!=i){for(let e of i)if(!(vM(e)||a.has(e.name)))for(let a of bi(e.name,t,r))!a||a.kept||n.has(a.id)||a.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(let t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,r=!1,n={},a={}){this.disposeIntermediateTensors(),r||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=eb.getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}let i=new v_(this.weightMap,n,a,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));let s=await this.executeWithControlFlow(e,i,t,r),o=t.map(e=>ba(e,s,i)),l=new Set([...o.map(e=>e.id),...Object.keys(e).map(t=>e[t].id),...this.weightIds]);return Object.values(s).forEach(e=>{e.forEach(e=>{!e||e.isDisposed||l.has(e.id)||e.dispose()})}),null==this.parent&&i.dispose(l),o}async executeFunctionAsync(e,t,r){let n=e.reduce((e,t,r)=>(e[this.inputs[r].name]=t,e),{});return this._executeAsync(n,this.outputNodes,!0,t,r)}async executeWithControlFlow(e,t,r,n){let a=Object.keys(e),i=a.map(e=>this.graph.nodes[bl(e)[0]]),s=r.map(e=>bl(e)[0]),o=new Set(s),l=s.map(e=>this.graph.nodes[e]);0===l.length&&(l=this._outputs);let{usedNodes:u,missingInputs:d,dynamicNode:h,syncInputs:p}=vO(e,l,this.weightMap,this._initNodes),c=[...i,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),f=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{let[r,n]=bl(t),a=[];a[n]=e[t],f[r]=a});let m={},g=this.getFrozenTensorIds(f),y={};for(;c.length>0;){let e=this.processStack(i,c,t,f,y,g,o,m,u);await Promise.all(e)}null!=h||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let x=l.filter(e=>!vM(e)&&!ba(e.name,f,t)).map(e=>e.name);if(x.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),Error(`Cannot compute the outputs [${x}] from the provided inputs [${a}]. Consider providing the following inputs: [${d}]. ${e}`)}return f}processStack(e,t,r,n,a,i,s,o,l){let u=[];for(;t.length>0;){let e=t.pop();r.currentContext=e.contexts;let d="";if("Enter"===e.node.op&&bn("isConstant",e.node,n,r)&&([d]=bs(e.node.name,r)),null==n[e.node.name]){let h=vA(e.node,n,r,this._resourceManager);d||([d]=bs(e.node.name,r));let p=r.currentContext;r0.isPromise(h)?u.push(h.then(u=>(n[d]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(u)),r.currentContext=p,this.checkTensorForDisposal(d,e.node,n,r,i,s,o),this.processChildNodes(e.node,t,r,n,a,l),u))):(n[d]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(h)),this.checkTensorForDisposal(d,e.node,n,r,i,s,o),this.processChildNodes(e.node,t,r,n,a,l))}else this.processChildNodes(e.node,t,r,n,a,l)}return u}processChildNodes(e,t,r,n,a,i){e.children.forEach(e=>{let[s]=bs(e.name,r);!a[s]&&i.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!ba(e,n,r))&&(a[s]=!0,t.push({contexts:r.currentContext,node:e})):e.inputNames.every(e=>!!ba(e,n,r))&&(a[s]=!0,t.push({contexts:r.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{let r=e[t],[n]=bl(t),a=this.graph.nodes[n];if(a.attrParams.shape&&a.attrParams.shape.value){let e=a.attrParams.shape.value,t=e.length===r.shape.length&&r.shape.every((t,r)=>-1===e[r]||e[r]===t);r0.assert(t,()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${r.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&r0.assert(r.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${r.dtype}`)})}mapInputs(e){var t,r;let n={};for(let a in e){let i=null==(r=null==(t=this._signature)?void 0:t.inputs)?void 0:r[a];null!=i?n[i.name]=e[a]:n[a]=e[a]}return n}checkInputs(e){let t=Object.keys(e).filter(e=>{let[t]=bl(e);return null==this.graph.nodes[t]});if(t.length>0)throw Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{var t,r;let n=null==(r=null==(t=this._signature)?void 0:t.outputs)?void 0:r[e];return null!=n?n.name:e},{})}checkOutputs(e){e.forEach(e=>{let[t]=bl(e);if(!this.graph.nodes[t])throw Error(`The output '${e}' is not found in the graph`)})}}class vz{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class vU{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},r=pR){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=r,null==t&&(this.loadOptions={}),this.resourceManager=new vz}findIOHandler(){let e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{let t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let e=this.handler.load();return r0.isPromise(e)?e.then(e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e)):this.loadSync(e)}loadSync(e){let t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw Error("Model artifacts missing streamWeights function");let t=await ii(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;let r=this.artifacts.modelTopology,n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){let e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=n,this.version=`${r.versions.producer}.${r.versions.minConsumer}`,this.executor=new vB(bX.Instance.transformGraph(r,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){let t=bX.Instance.transformGraph(e.modelInitializer);this.initializer=new vB(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){let t=this.io.getSaveHandlers(e);if(0===t.length)throw Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){let t={};return(e instanceof nj?[e]:e).forEach((e,r)=>t[this.structuredOutputKeys[r]]=e),t}return e}predict(e,t){let r=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(r)}async predictAsync(e,t){let r=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(r)}normalizeInputs(e){var t;if(!(e instanceof nj)&&!Array.isArray(e)){let r=null==(t=this.signature)?void 0:t.inputs;if(null!=r)for(let t in r){let n=r[t];null!=n.resourceId&&(e[t]=this.resourceIdToCapturedInput[n.resourceId])}return e}e=Array.isArray(e)?e:[e];let r=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+r!==this.inputNodes.length)throw Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-r} non-resource placeholders, while there are ${e.length} input tensors provided.`);let n=0;return this.inputNodes.reduce((t,r)=>{var a,i,s;let o=null==(s=null==(i=null==(a=this.signature)?void 0:a.inputs)?void 0:i[r])?void 0:s.resourceId;return null!=o?t[r]=this.resourceIdToCapturedInput[o]:t[r]=e[n++],t},{})}normalizeOutputs(e){return Array.isArray(e=e||this.outputNodes)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){let t=this.initializerSignature.outputs,r=Object.keys(t);for(let n=0;n<r.length;n++){let a=t[r[n]];this.resourceIdToCapturedInput[a.resourceId]=e[n]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let r=this.executor.execute(e,t);return r.length>1?r:r[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let r=await this.executor.executeAsync(e,t);return r.length>1?r:r[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,r)=>(t[r]=[e[r]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&am(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function vW(e,t={},r=pR){var n;if(null==e)throw Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&((n=e).endsWith("/")||(n+="/"),e=`${n}model.json?tfjs-format=file`);let a=new vU(e,t,r);return await a.load(),a}var vV={};(function(){function e(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}var t,r="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,r){return e==Array.prototype||e==Object.prototype||(e[t]=r.value),e},n=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof c&&c];for(var t=0;t<e.length;++t){var r=e[t];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this);function a(e,t){if(t)e:{var a=n;e=e.split(".");for(var i=0;i<e.length-1;i++){var s=e[i];if(!(s in a))break e;a=a[s]}(t=t(i=a[e=e[e.length-1]]))!=i&&null!=t&&r(a,e,{configurable:!0,writable:!0,value:t})}}function i(t){var r="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return r?r.call(t):{next:e(t)}}function s(e){if(!(e instanceof Array)){e=i(e);for(var t,r=[];!(t=e.next()).done;)r.push(t.value);e=r}return e}a("Symbol",function(e){function t(e,t){this.h=e,r(this,"description",{configurable:!0,writable:!0,value:t})}if(e)return e;t.prototype.toString=function(){return this.h};var n="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",a=0;return function e(r){if(this instanceof e)throw TypeError("Symbol is not a constructor");return new t(n+(r||"")+"_"+a++,r)}}),a("Symbol.iterator",function(t){if(t)return t;t=Symbol("Symbol.iterator");for(var a="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),i=0;i<a.length;i++){var s=n[a[i]];"function"==typeof s&&"function"!=typeof s.prototype[t]&&r(s.prototype,t,{configurable:!0,writable:!0,value:function(){var t;return(t={next:t=e(this)})[Symbol.iterator]=function(){return this},t}})}return t});var o="function"==typeof Object.assign?Object.assign:function(e,t){for(var r=1;r<arguments.length;r++){var n=arguments[r];if(n)for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};a("Object.assign",function(e){return e||o});var l,u,d="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};if("function"==typeof Object.setPrototypeOf)u=Object.setPrototypeOf;else{e:{var h={};try{h.__proto__={a:!0},J=h.a;break e}catch(e){}J=!1}u=J?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw TypeError(e+" is not extensible");return e}:null}var p=u;function f(e,t){if(e.prototype=d(t.prototype),e.prototype.constructor=e,p)p(e,t);else for(var r in t)if("prototype"!=r)if(Object.defineProperties){var n=Object.getOwnPropertyDescriptor(t,r);n&&Object.defineProperty(e,r,n)}else e[r]=t[r];e.za=t.prototype}function m(){this.m=!1,this.j=null,this.i=void 0,this.h=1,this.v=this.s=0,this.l=null}function g(e){if(e.m)throw TypeError("Generator is already running");e.m=!0}function y(e,t){e.l={ma:t,na:!0},e.h=e.s||e.v}function x(e,t,r){return e.h=r,{value:t}}function b(e){this.h=new m,this.i=e}function v(e,t,r,n){try{var a=t.call(e.h.j,r);if(!(a instanceof Object))throw TypeError("Iterator result "+a+" is not an object");if(!a.done)return e.h.m=!1,a;var i=a.value}catch(t){return e.h.j=null,y(e.h,t),w(e)}return e.h.j=null,n.call(e.h,i),w(e)}function w(e){for(;e.h.h;)try{var t=e.i(e.h);if(t)return e.h.m=!1,{value:t.value,done:!1}}catch(t){e.h.i=void 0,y(e.h,t)}if(e.h.m=!1,e.h.l){if(t=e.h.l,e.h.l=null,t.na)throw t.ma;return{value:t.return,done:!0}}return{value:void 0,done:!0}}function S(e){this.next=function(t){return g(e.h),e.h.j?t=v(e,e.h.j.next,t,e.h.u):(e.h.u(t),t=w(e)),t},this.throw=function(t){return g(e.h),e.h.j?t=v(e,e.h.j.throw,t,e.h.u):(y(e.h,t),t=w(e)),t},this.return=function(t){var r;return g(e.h),(r=e.h.j)?v(e,"return"in r?r.return:function(e){return{value:e,done:!0}},t,e.h.return):(e.h.return(t),w(e))},this[Symbol.iterator]=function(){return this}}function k(e){var t=new S(new b(e));function r(e){return t.next(e)}function n(e){return t.throw(e)}return new Promise(function(e,a){!function t(i){i.done?e(i.value):Promise.resolve(i.value).then(r,n).then(t,a)}(t.next())})}function C(e){return e||Array.prototype.fill}m.prototype.u=function(e){this.i=e},m.prototype.return=function(e){this.l={return:e},this.h=this.v},a("Promise",function(e){function t(e){this.i=0,this.j=void 0,this.h=[],this.u=!1;var t=this.l();try{e(t.resolve,t.reject)}catch(e){t.reject(e)}}function r(){this.h=null}function a(e){return e instanceof t?e:new t(function(t){t(e)})}if(e)return e;r.prototype.i=function(e){if(null==this.h){this.h=[];var t=this;this.j(function(){t.m()})}this.h.push(e)};var s=n.setTimeout;r.prototype.j=function(e){s(e,0)},r.prototype.m=function(){for(;this.h&&this.h.length;){var e=this.h;this.h=[];for(var t=0;t<e.length;++t){var r=e[t];e[t]=null;try{r()}catch(e){this.l(e)}}}this.h=null},r.prototype.l=function(e){this.j(function(){throw e})},t.prototype.l=function(){function e(e){return function(n){r||(r=!0,e.call(t,n))}}var t=this,r=!1;return{resolve:e(this.I),reject:e(this.m)}},t.prototype.I=function(e){if(e===this)this.m(TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.L(e);else{switch(typeof e){case"object":var r=null!=e;break;case"function":r=!0;break;default:r=!1}r?this.F(e):this.s(e)}},t.prototype.F=function(e){var t=void 0;try{t=e.then}catch(e){this.m(e);return}"function"==typeof t?this.M(t,e):this.s(e)},t.prototype.m=function(e){this.v(2,e)},t.prototype.s=function(e){this.v(1,e)},t.prototype.v=function(e,t){if(0!=this.i)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.i);this.i=e,this.j=t,2===this.i&&this.K(),this.H()},t.prototype.K=function(){var e=this;s(function(){if(e.D()){var t=n.console;void 0!==t&&t.error(e.j)}},1)},t.prototype.D=function(){if(this.u)return!1;var e=n.CustomEvent,t=n.Event,r=n.dispatchEvent;return void 0===r||("function"==typeof e?e=new e("unhandledrejection",{cancelable:!0}):"function"==typeof t?e=new t("unhandledrejection",{cancelable:!0}):(e=n.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,e),e.promise=this,e.reason=this.j,r(e))},t.prototype.H=function(){if(null!=this.h){for(var e=0;e<this.h.length;++e)o.i(this.h[e]);this.h=null}};var o=new r;return t.prototype.L=function(e){var t=this.l();e.T(t.resolve,t.reject)},t.prototype.M=function(e,t){var r=this.l();try{e.call(t,r.resolve,r.reject)}catch(e){r.reject(e)}},t.prototype.then=function(e,r){function n(e,t){return"function"==typeof e?function(t){try{a(e(t))}catch(e){i(e)}}:t}var a,i,s=new t(function(e,t){a=e,i=t});return this.T(n(e,a),n(r,i)),s},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.T=function(e,t){function r(){switch(n.i){case 1:e(n.j);break;case 2:t(n.j);break;default:throw Error("Unexpected state: "+n.i)}}var n=this;null==this.h?o.i(r):this.h.push(r),this.u=!0},t.resolve=a,t.reject=function(e){return new t(function(t,r){r(e)})},t.race=function(e){return new t(function(t,r){for(var n=i(e),s=n.next();!s.done;s=n.next())a(s.value).T(t,r)})},t.all=function(e){var r=i(e),n=r.next();return n.done?a([]):new t(function(e,t){var i=[],s=0;do i.push(void 0),s++,a(n.value).T(function(t){return function(r){i[t]=r,0==--s&&e(i)}}(i.length-1),t),n=r.next();while(!n.done)})},t}),a("Array.prototype.keys",function(e){return e||function(){var e,t,r,n,a;return e=this,t=function(e){return e},e instanceof String&&(e+=""),r=0,n=!1,(a={next:function(){if(!n&&r<e.length){var a=r++;return{value:t(a,e[a]),done:!1}}return n=!0,{done:!0,value:void 0}}})[Symbol.iterator]=function(){return a},a}}),a("Array.prototype.fill",function(e){return e||function(e,t,r){var n=this.length||0;for(0>t&&(t=Math.max(0,n+t)),(null==r||r>n)&&(r=n),0>(r=Number(r))&&(r=Math.max(0,n+r)),t=Number(t||0);t<r;t++)this[t]=e;return this}}),a("Int8Array.prototype.fill",C),a("Uint8Array.prototype.fill",C),a("Uint8ClampedArray.prototype.fill",C),a("Int16Array.prototype.fill",C),a("Uint16Array.prototype.fill",C),a("Int32Array.prototype.fill",C),a("Uint32Array.prototype.fill",C),a("Float32Array.prototype.fill",C),a("Float64Array.prototype.fill",C),a("Object.is",function(e){return e||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}}),a("Array.prototype.includes",function(e){return e||function(e,t){var r=this;r instanceof String&&(r=String(r));var n=r.length;for(0>(t=t||0)&&(t=Math.max(t+n,0));t<n;t++){var a=r[t];if(a===e||Object.is(a,e))return!0}return!1}}),a("String.prototype.includes",function(e){return e||function(e,t){if(null==this)throw TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(e instanceof RegExp)throw TypeError("First argument to String.prototype.includes must not be a regular expression");return -1!==this.indexOf(e,t||0)}});var I=this||self;function T(e,t){e=e.split(".");var r,n=I;for((e[0]in n)||void 0===n.execScript||n.execScript("var "+e[0]);e.length&&(r=e.shift());)e.length||void 0===t?n=n[r]&&n[r]!==Object.prototype[r]?n[r]:n[r]={}:n[r]=t}function $(e){var t;return(t=I.navigator)&&(t=t.userAgent)||(t=""),-1!=t.indexOf(e)}var N=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var r=e.length,n=Array(r),a="string"==typeof e?e.split(""):e,i=0;i<r;i++)i in a&&(n[i]=t.call(void 0,a[i],i,e));return n},E={},R=null;function A(){if(!R){R={};for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),t=["+/=","+/","-_=","-_.","-_"],r=0;5>r;r++){var n=e.concat(t[r].split(""));E[r]=n;for(var a=0;a<n.length;a++){var i=n[a];void 0===R[i]&&(R[i]=a)}}}}var _="undefined"!=typeof Uint8Array,O=!($("Trident")||$("MSIE"))&&"function"==typeof I.btoa;function F(e){if(!O){var t;void 0===t&&(t=0),A(),t=E[t];for(var r=Array(Math.floor(e.length/3)),n=t[64]||"",a=0,i=0;a<e.length-2;a+=3){var s=e[a],o=e[a+1],l=e[a+2],u=t[s>>2];s=t[(3&s)<<4|o>>4],o=t[(15&o)<<2|l>>6],l=t[63&l],r[i++]=u+s+o+l}switch(u=0,l=n,e.length-a){case 2:l=t[(15&(u=e[a+1]))<<2]||n;case 1:e=e[a],r[i]=t[e>>2]+t[(3&e)<<4|u>>4]+l+n}return r.join("")}for(t="";10240<e.length;)t+=String.fromCharCode.apply(null,e.subarray(0,10240)),e=e.subarray(10240);return btoa(t+=String.fromCharCode.apply(null,e))}var P=RegExp("[-_.]","g");function D(e){switch(e){case"-":return"+";case"_":return"/";case".":return"=";default:return""}}function L(e){if(!O){var t,r,n,a,i;return(n=3*(r=(t=e).length)/4)%3?n=Math.floor(n):-1!="=.".indexOf(t[r-1])&&(n=-1!="=.".indexOf(t[r-2])?n-2:n-1),a=new Uint8Array(n),i=0,function(e,t){function r(t){for(;n<e.length;){var r=e.charAt(n++),a=R[r];if(null!=a)return a;if(!/^[\s\xa0]*$/.test(r))throw Error("Unknown base64 encoding at char: "+r)}return t}A();for(var n=0;;){var a=r(-1),i=r(0),s=r(64),o=r(64);if(64===o&&-1===a)break;t(a<<2|i>>4),64!=s&&(t(i<<4&240|s>>2),64!=o&&t(s<<6&192|o))}}(t,function(e){a[i++]=e}),i!==n?a.subarray(0,i):a}P.test(e)&&(e=e.replace(P,D)),e=atob(e);for(var s=new Uint8Array(e.length),o=0;o<e.length;o++)s[o]=e.charCodeAt(o);return s}function M(){return ee||(ee=new Uint8Array(0))}var B={},z="function"==typeof Uint8Array.prototype.slice,U=0,W=0;function V(e){var t=0>e,r=(e=Math.abs(e))>>>0;e=Math.floor((e-r)/0x100000000),t&&(t=(r=i(H(r,e))).next().value,e=r.next().value,r=t),U=r>>>0,W=e>>>0}var G="function"==typeof BigInt;function H(e,t){return t=~t,e?e=~e+1:t+=1,[e,t]}function j(e,t){this.i=e>>>0,this.h=t>>>0}function K(e){if(!e)return et||(et=new j(0,0));if(!/^-?\d+$/.test(e))return null;if(16>e.length)V(Number(e));else if(G)U=Number((e=BigInt(e))&BigInt(0xffffffff))>>>0,W=Number(e>>BigInt(32)&BigInt(0xffffffff));else{var t=+("-"===e[0]);W=U=0;for(var r=e.length,n=t,a=(r-t)%6+t;a<=r;n=a,a+=6)n=Number(e.slice(n,a)),W*=1e6,0x100000000<=(U=1e6*U+n)&&(W+=U/0x100000000|0,U%=0x100000000);t&&(e=(t=i(H(U,W))).next().value,t=t.next().value,U=e,W=t)}return new j(U,W)}function q(e,t){return Error("Invalid wire type: "+e+" (at position "+t+")")}function X(){return Error("Failed to read varint, encoding is invalid.")}function Y(e,t){return Error("Tried to read past the end of the data "+t+" > "+e)}function Q(){throw Error("Invalid UTF8")}function Z(e,t){return t=String.fromCharCode.apply(null,t),null==e?t:e+t}var J,ee,et,er,en,ea=void 0,ei="undefined"!=typeof TextDecoder,es="undefined"!=typeof TextEncoder;function eo(e){if(e!==B)throw Error("illegal external caller")}function el(e,t){if(eo(t),this.V=e,null!=e&&0===e.length)throw Error("ByteString should be constructed with non-empty values")}function eu(){return eF||(eF=new el(null,B))}function ed(e){eo(B);var t=e.V;return null==(t=null==t||_&&null!=t&&t instanceof Uint8Array?t:"string"==typeof t?L(t):null)?t:e.V=t}function eh(e,t){this.i=null,this.m=!1,this.h=this.j=this.l=0,ep(this,e,t)}function ep(e,t,r){e.S=void 0!==(r=void 0===r?{}:r).S&&r.S,t&&(e.i=(t=function(e){if("string"==typeof e)return{buffer:L(e),C:!1};if(Array.isArray(e))return{buffer:new Uint8Array(e),C:!1};if(e.constructor===Uint8Array)return{buffer:e,C:!1};if(e.constructor===ArrayBuffer)return{buffer:new Uint8Array(e),C:!1};if(e.constructor===el)return{buffer:ed(e)||M(),C:!0};if(e instanceof Uint8Array)return{buffer:new Uint8Array(e.buffer,e.byteOffset,e.byteLength),C:!1};throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers")}(t)).buffer,e.m=t.C,e.l=0,e.j=e.i.length,e.h=e.l)}function ec(e,t){if(e.h=t,t>e.j)throw Y(e.j,t)}function ef(e){var t=e.i,r=e.h,n=t[r++],a=127&n;if(128&n&&(a|=(127&(n=t[r++]))<<7,128&n&&(a|=(127&(n=t[r++]))<<14,128&n&&(a|=(127&(n=t[r++]))<<21,128&n&&(a|=(n=t[r++])<<28,128&n&&128&t[r++]&&128&t[r++]&&128&t[r++]&&128&t[r++]&&128&t[r++])))))throw X();return ec(e,r),a}function em(e,t){if(0>t)throw Error("Tried to read a negative byte length: "+t);var r=e.h,n=r+t;if(n>e.j)throw Y(t,e.j-r);return e.h=n,r}eh.prototype.reset=function(){this.h=this.l};var eg=[];function ey(){this.h=[]}function ex(e,t,r){for(;0<r||127<t;)e.h.push(127&t|128),t=(t>>>7|r<<25)>>>0,r>>>=7;e.h.push(t)}function eb(e,t){for(;127<t;)e.h.push(127&t|128),t>>>=7;e.h.push(t)}function ev(e,t){if(eg.length){var r=eg.pop();ep(r,e,t),e=r}else e=new eh(e,t);this.h=e,this.j=this.h.h,this.i=this.l=-1,this.setOptions(t)}function ew(e){var t=e.h;if(t.h==t.j)return!1;e.j=e.h.h;var r=ef(e.h)>>>0;if(t=r>>>3,!(0<=(r&=7)&&5>=r))throw q(r,e.j);if(1>t)throw Error("Invalid field number: "+t+" (at position "+e.j+")");return e.l=t,e.i=r,!0}ey.prototype.length=function(){return this.h.length},ey.prototype.end=function(){var e=this.h;return this.h=[],e},ev.prototype.setOptions=function(e){e=void 0===e?{}:e,this.ca=void 0!==e.ca&&e.ca},ev.prototype.reset=function(){this.h.reset(),this.j=this.h.h,this.i=this.l=-1};var eS=[];function ek(){this.j=[],this.i=0,this.h=new ey}function eC(e,t){0!==t.length&&(e.j.push(t),e.i+=t.length)}var eI="function"==typeof Symbol&&"symbol"==typeof Symbol()?Symbol():void 0;function eT(e,t){return eI?e[eI]|=t:void 0!==e.A?e.A|=t:(Object.defineProperties(e,{A:{value:t,configurable:!0,writable:!0,enumerable:!1}}),t)}function e$(e,t){eI?e[eI]&&(e[eI]&=~t):void 0!==e.A&&(e.A&=~t)}function eN(e){var t;return null==(t=eI?e[eI]:e.A)?0:t}function eE(e,t){eI?e[eI]=t:void 0!==e.A?e.A=t:Object.defineProperties(e,{A:{value:t,configurable:!0,writable:!0,enumerable:!1}})}function eR(e,t){eE(t,(0|e)&-51)}function eA(e,t){eE(t,(18|e)&-41)}var e_={};function eO(e){return null!==e&&"object"==typeof e&&!Array.isArray(e)&&e.constructor===Object}var eF,eP,eD=[];function eL(e){if(2&eN(e.o))throw Error("Cannot mutate an immutable Message")}function eM(e){var t=e.length;(t=t?e[t-1]:void 0)&&eO(t)?t.g=1:(t={},e.push((t.g=1,t)))}function eB(e){var t=e.i+e.G;return e.B||(e.B=e.o[t]={})}function ez(e,t){return -1===t?null:t>=e.i?e.B?e.B[t]:void 0:e.o[t+e.G]}function eU(e,t,r,n){eL(e),eW(e,t,r,n)}function eW(e,t,r,n){e.j&&(e.j=void 0),t>=e.i||n?eB(e)[t]=r:(e.o[t+e.G]=r,(e=e.B)&&t in e&&delete e[t])}function eV(e,t,r,n){var a=ez(e,t);Array.isArray(a)||(a=eP);var i=eN(a);if(1&i||eT(a,1),n)2&i||eT(a,2),1&r||Object.freeze(a);else{n=!(2&r);var s,o,l=2&i;1&r||!l?n&&16&i&&!l&&e$(a,16):(eT(o=Array.prototype.slice.call(a),1),eW(e,t,a=o))}return a}function eG(e,t){var r=ez(e,t),n=null==r?r:"number"==typeof r||"NaN"===r||"Infinity"===r||"-Infinity"===r?Number(r):void 0;return null!=n&&n!==r&&eW(e,t,n),n}function eH(e,t,r,n,a){e.h||(e.h={});var i=e.h[r],s=eV(e,r,3,a);if(!i){var o=s;i=[];var l=!!(16&eN(e.o));s=!!(2&eN(o));var u=o;!a&&s&&(o=Array.prototype.slice.call(o));for(var d=s,h=0;h<o.length;h++){var p=o[h],c=t,f=!1;if(void 0!==(p=Array.isArray(p)?new c(p):f?new c:void 0)){var m=f=eN(c=p.o);s&&(m|=2),l&&(m|=16),m!=f&&eE(c,m),c=m,d=d||!!(2&c),i.push(p)}}return e.h[r]=i,t=33|(l=eN(o)),l!=(t=d?-9&t:8|t)&&(Object.isFrozen(d=o)&&(d=Array.prototype.slice.call(d)),eE(d,t),o=d),u!==o&&eW(e,r,o),(a||n&&s)&&eT(i,2),n&&Object.freeze(i),i}return a||(a=Object.isFrozen(i),n&&!a?Object.freeze(i):!n&&a&&(i=Array.prototype.slice.call(i),e.h[r]=i)),i}function ej(e,t,r){var n=!!(2&eN(e.o));if(t=eH(e,t,r,n,n),e=eV(e,r,3,n),!(n||8&eN(e))){for(n=0;n<t.length;n++){if(2&eN((r=t[n]).o)){var a=e2(r,!1);a.j=r}else a=r;r!==a&&(t[n]=a,e[n]=a.o)}eT(e,8)}return t}function eK(e,t,r){if(null!=r&&"number"!=typeof r)throw Error("Value of float/double field must be a number|null|undefined, found "+typeof r+": "+r);eU(e,t,r)}function eq(e,t,r,n,a){eL(e);var i=eH(e,r,t,!1,!1);return r=null!=n?n:new r,e=eV(e,t,2,!1),void 0!=a?(i.splice(a,0,r),e.splice(a,0,r.o)):(i.push(r),e.push(r.o)),r.C()&&e$(e,8),r}function eX(e,t){return null==e?t:e}function eY(e,t,r){return r=void 0===r?0:r,eX(eG(e,t),r)}function eQ(e,t,r,n){var a=eN(e);n=n?!!(16&a):void 0,e=Array.prototype.slice.call(e);for(var i=0;i<e.length;i++)e[i]=function e(t,r,n,a){if(null!=t){if(Array.isArray(t))t=eQ(t,r,n,void 0!==a);else if(eO(t)){var i,s={};for(i in t)s[i]=e(t[i],r,n,a);t=s}else t=r(t,a);return t}}(e[i],t,r,n);return r(a,e),e}function eZ(e){return e.ja===e_?e.toJSON():function(e){switch(typeof e){case"number":return isFinite(e)?e:String(e);case"object":if(e)if(Array.isArray(e)){if(0!=(128&eN(e)))return eM(e=Array.prototype.slice.call(e)),e}else{if(_&&null!=e&&e instanceof Uint8Array)return F(e);if(e instanceof el){var t=e.V;return null==t?"":"string"==typeof t?t:e.V=F(t)}}}return e}(e)}function eJ(e,t){128&e&&eM(t)}function e0(e,t,r,n,a,i,s){if(e=e.h&&e.h[r]){var o;if(2&(n=eN(e))?n=e:(eA(n,i=N(e,e1)),Object.freeze(i),n=i),eL(t),s=null==n?eP:(eT(o=[],1),o),null!=n){for(e=0,i=!!n.length;e<n.length;e++){var l=n[e];i=i&&!(2&eN(l.o)),s[e]=l.o}i=8*!!i|1,((e=eN(s))&i)!==i&&(Object.isFrozen(s)&&(s=Array.prototype.slice.call(s)),eE(s,e|i)),t.h||(t.h={}),t.h[r]=n}else t.h&&(t.h[r]=void 0);eW(t,r,s,a)}else eU(t,r,function e(t,r,n){if(n=void 0===n?eA:n,null!=t){if(_&&t instanceof Uint8Array)return t.length?new el(new Uint8Array(t),B):eu();if(Array.isArray(t)){var a=eN(t);return 2&a||(r&&!(32&a)&&(16&a||0===a)?eE(t,2|a):4&(r=eN(t=eQ(t,e,4&a?eA:n,!0)))&&2&r&&Object.freeze(t)),t}return t.ja===e_?e1(t):t}}(n,i,s),a)}function e1(e){return 2&eN(e.o)||eT((e=e2(e,!0)).o,2),e}function e2(e,r){var n=e.o,a=[];eT(a,16);var i=e.constructor.h;if(i&&a.push(i),i=e.B){a.length=n.length,a.fill(void 0,a.length,n.length);var s={};a[a.length-1]=s}0!=(128&eN(n))&&eM(a),r=r||e.C()?eA:eR,s=e.constructor,t=a,a=new s(a),t=void 0,e.R&&(a.R=e.R.slice()),s=!!(16&eN(n));for(var o=i?n.length-1:n.length,l=0;l<o;l++)e0(e,a,l-e.G,n[l],!1,s,r);if(i)for(var u in i)e0(e,a,+u,i[u],!0,s,r);return a}function e3(e,r,n){null==e&&(e=t),t=void 0;var a,i=this.constructor.i||0,s=0<i,o=this.constructor.h,l=!1;if(null==e){var u=48,d=!0;s&&(i=0,u|=128),eE(e=o?[o]:[],u)}else{if(!Array.isArray(e)||o&&o!==e[0])throw Error();var h=u=eT(e,0);if((d=0!=(16&h))&&((l=0!=(32&h))||(h|=32)),s){if(128&h)i=0;else if(0<e.length){var p=e[e.length-1];if(eO(p)&&"g"in p){i=0,h|=128,delete p.g;var c,f=!0;for(c in p){f=!1;break}f&&e.pop()}}}else if(128&h)throw Error();u!==h&&eE(e,h)}this.G=(o?0:-1)-i,this.h=void 0,this.o=e;e:{if(i=(o=this.o.length)-1,o&&eO(o=this.o[i])){this.B=o,this.i=i-this.G;break e}void 0!==r&&-1<r?(this.i=Math.max(r,i+1-this.G),this.B=void 0):this.i=Number.MAX_VALUE}if(!s&&this.B&&"g"in this.B)throw Error('Unexpected "g" flag in sparse object of message that is not a group type.');if(n)for(r=d&&!l&&!0,s=this.i,d=0;d<n.length;d++)(l=n[d])<s?(l+=this.G,(i=e[l])?e4(i,r):e[l]=eP):(a||(a=eB(this)),(i=a[l])?e4(i,r):a[l]=eP)}function e4(e,t){if(Array.isArray(e)){var r=eN(e),n=1;!t||2&r||(n|=16),(r&n)!==n&&eE(e,r|n)}}function e6(e,t,r){if(r){var n,a={};for(n in r){var i=r[n],s=i.ra;s||(a.J=i.xa||i.oa.W,i.ia?(a.aa=tr(i.ia),s=function(e){return function(t,r,n){return e.J(t,r,n,e.aa)}}(a)):i.ka?(a.Z=tn(i.da.P,i.ka),s=function(e){return function(t,r,n){return e.J(t,r,n,e.Z)}}(a)):s=a.J,i.ra=s),s(t,e,i.da),a={J:a.J,aa:a.aa,Z:a.Z}}}var o=e;if(o=o.R){eC(t,t.h.end());for(var l=0;l<o.length;l++)eC(t,ed(o[l])||M())}}eE(eD,23),eP=Object.freeze(eD),e3.prototype.toJSON=function(){return eQ(this.o,eZ,eJ)},e3.prototype.C=function(){return!!(2&eN(this.o))},e3.prototype.ja=e_,e3.prototype.toString=function(){return this.o.toString()};var e5=Symbol();function e8(e,t,r){return e[e5]||(e[e5]=function(e,n){return t(e,n,r)})}function e7(e){var t=e[e5];if(!t){var r=tm(e);t=function(e,t){return tg(e,t,r)},e[e5]=t}return t}function e9(e,t){var r=e[t];return"function"==typeof r&&0===r.length&&(r=r(),e[t]=r),Array.isArray(r)&&(td in r||ta in r||0<r.length&&"function"==typeof r[0])?r:void 0}function te(e,t,r,n,a,i){t.P=e[0];var s=1;if(e.length>s&&"number"!=typeof e[s]){var o=e[s++];r(t,o)}for(;s<e.length;){r=e[s++];for(var l=s+1;l<e.length&&"number"!=typeof e[l];)l++;switch(o=e[s++],l-=s){case 0:n(t,r,o);break;case 1:(l=e9(e,s))?(s++,a(t,r,o,l)):n(t,r,o,e[s++]);break;case 2:a(t,r,o,l=e9(e,l=s++),e[s++]);break;case 3:i(t,r,o,e[s++],e[s++],e[s++]);break;case 4:i(t,r,o,e[s++],e[s++],e[s++],e[s++]);break;default:throw Error("unexpected number of binary field arguments: "+l)}}return t}var tt=Symbol();function tr(e){var t=e[tt];if(!t){var r=tu(e);t=function(e,t){return ty(e,t,r)},e[tt]=t}return t}function tn(e,t){var r=e[tt];return r||(r=function(e,r){return e6(e,r,t)},e[tt]=r),r}var ta=Symbol();function ti(e,t){e.push(t)}function ts(e,t,r){e.push(t,r.W)}function to(e,t,r,n){var a=tr(n),i=tu(n).P,s=r.W;e.push(t,function(e,t,r){return s(e,t,r,i,a)})}function tl(e,t,r,n,a,i){var s=tn(n,i),o=r.W;e.push(t,function(e,t,r){return o(e,t,r,n,s)})}function tu(e){var t=e[ta];return t||(t=te(e,e[ta]=[],ti,ts,to,tl),td in e&&ta in e&&(e.length=0)),t}var td=Symbol();function th(e,t){e[0]=t}function tp(e,t,r,n){var a=r.U;e[t]=n?function(e,t,r){return a(e,t,r,n)}:a}function tc(e,t,r,n,a){var i=r.U,s=e7(n),o=tm(n).P;e[t]=function(e,t,r){return i(e,t,r,o,s,a)}}function tf(e,t,r,n,a,i,s){var o=r.U,l=e8(n,a,i);e[t]=function(e,t,r){return o(e,t,r,n,l,s)}}function tm(e){var t=e[td];return t||(t=te(e,e[td]={},th,tp,tc,tf),td in e&&ta in e&&(e.length=0)),t}function tg(e,t,r){for(;ew(t)&&4!=t.i;){var n=t.l,a=r[n];if(!a){var i=r[0];i&&(i=i[n])&&(a=r[n]=function(e){var t,r=(t=e.ia)?e7(t):(t=e.wa)?e8(e.da.P,t,e.ka):void 0,n=e.da,a=e.oa.U;return r?function(e,t){return a(e,t,n,r)}:function(e,t){return a(e,t,n)}}(i))}if(!a||!a(t,e,n)){a=t,n=e,i=a.j,function e(t){switch(t.i){case 0:if(0!=t.i)e(t);else e:{t=t.h;for(var r=t.h,n=r+10,a=t.i;r<n;)if(0==(128&a[r++])){ec(t,r);break e}throw X()}break;case 1:ec(t=t.h,t.h+8);break;case 2:2!=t.i?e(t):(r=ef(t.h)>>>0,ec(t=t.h,t.h+r));break;case 5:ec(t=t.h,t.h+4);break;case 3:for(r=t.l;;){if(!ew(t))throw Error("Unmatched start-group tag: stream EOF");if(4==t.i){if(t.l!=r)throw Error("Unmatched end-group tag");break}e(t)}break;default:throw q(t.i,t.j)}}(a);var s=a;if(!s.ca){if(a=s.h.h-i,s.h.h=i,s=s.h,0==a)a=eu();else{if(i=em(s,a),s.S&&s.m)a=s.i.subarray(i,i+a);else{s=s.i;var o=i;a=o===(a=i+a)?M():z?s.slice(o,a):new Uint8Array(s.subarray(o,a))}a=0==a.length?eu():new el(a,B)}(i=n.R)?i.push(a):n.R=[a]}}}return e}function ty(e,t,r){for(var n=r.length,a=1==n%2,i=+!!a;i<n;i+=2)(0,r[i+1])(t,e,r[i]);e6(e,t,a?r[0]:void 0)}function tx(e,t){return{U:e,W:t}}var tb=tx(function(e,t,r){if(5!==e.i)return!1;var n=(e=e.h).i,a=e.h,i=n[a],s=n[a+1],o=n[a+2];return n=n[a+3],ec(e,e.h+4),e=2*((s=(0|i|s<<8|o<<16|n<<24)>>>0)>>31)+1,i=s>>>23&255,s&=8388607,eU(t,r,255==i?s?NaN:1/0*e:0==i?1401298464324817e-60*e*s:e*Math.pow(2,i-150)*(s+8388608)),!0},function(e,t,r){if(null!=(t=eG(t,r))){eb(e.h,8*r+5),e=e.h;var n=+t;0===n?0<1/n?U=W=0:(W=0,U=0x80000000):isNaN(n)?(W=0,U=0x7fffffff):34028234663852886e22<(n=(r=0>n?-0x80000000:0)?-n:n)?(W=0,U=(0x7f800000|r)>>>0):11754943508222875e-54>n?(W=0,U=(r|(n=Math.round(n/1401298464324817e-60)))>>>0):(t=Math.floor(Math.log(n)/Math.LN2),n*=Math.pow(2,-t),0x1000000<=(n=Math.round(8388608*n))&&++t,W=0,U=(r|t+127<<23|8388607&n)>>>0),r=U,e.h.push(r>>>0&255),e.h.push(r>>>8&255),e.h.push(r>>>16&255),e.h.push(r>>>24&255)}}),tv=tx(function(e,t,r){if(0!==e.i)return!1;var n=e.h,a=0,i=e=0,s=n.i,o=n.h;do{var l=s[o++];a|=(127&l)<<i,i+=7}while(32>i&&128&l)for(32<i&&(e|=(127&l)>>4),i=3;32>i&&128&l;i+=7)e|=(127&(l=s[o++]))<<i;if(ec(n,o),128>l)n=a>>>0,(e=0x80000000&(l=e>>>0))&&(l=~l>>>0,0==(n=~n+1>>>0)&&(l=l+1>>>0)),n=0x100000000*l+(n>>>0);else throw X();return eU(t,r,e?-n:n),!0},function(e,t,r){null!=(t=ez(t,r))&&("string"==typeof t&&K(t),null!=t&&(eb(e.h,8*r),"number"==typeof t?(e=e.h,V(t),ex(e,U,W)):(r=K(t),ex(e.h,r.i,r.h))))}),tw=tx(function(e,t,r){return 0===e.i&&(eU(t,r,ef(e.h)),!0)},function(e,t,r){if(null!=(t=ez(t,r))&&null!=t)if(eb(e.h,8*r),e=e.h,0<=(r=t))eb(e,r);else{for(t=0;9>t;t++)e.h.push(127&r|128),r>>=7;e.h.push(1)}}),tS=tx(function(e,t,r){if(2!==e.i)return!1;var n=ef(e.h)>>>0,a=em(e=e.h,n);if(e=e.i,ei){var i,s=e;(i=er)||(i=er=new TextDecoder("utf-8",{fatal:!0})),e=a+n,s=0===a&&e===s.length?s:s.subarray(a,e);try{var o=i.decode(s)}catch(e){if(void 0===ea){try{i.decode(new Uint8Array([128]))}catch(e){}try{i.decode(new Uint8Array([97])),ea=!0}catch(e){ea=!1}}throw ea||(er=void 0),e}}else{n=(o=a)+n,a=[];for(var l,u,d=null;o<n;)128>(l=e[o++])?a.push(l):224>l?o>=n?Q():(u=e[o++],194>l||128!=(192&u)?(o--,Q()):a.push((31&l)<<6|63&u)):240>l?o>=n-1?Q():128!=(192&(u=e[o++]))||224===l&&160>u||237===l&&160<=u||128!=(192&(s=e[o++]))?(o--,Q()):a.push((15&l)<<12|(63&u)<<6|63&s):244>=l?o>=n-2?Q():128!=(192&(u=e[o++]))||0!=(l<<28)+(u-144)>>30||128!=(192&(s=e[o++]))||128!=(192&(i=e[o++]))?(o--,Q()):(l=((7&l)<<18|(63&u)<<12|(63&s)<<6|63&i)-65536,a.push((l>>10&1023)+55296,(1023&l)+56320)):Q(),8192<=a.length&&(d=Z(d,a),a.length=0);o=Z(d,a)}return eU(t,r,o),!0},function(e,t,r){if(null!=(t=ez(t,r))){if(es){0;t=(en||(en=new TextEncoder)).encode(t)}else{for(var n=0,a=new Uint8Array(3*t.length),i=0;i<t.length;i++){var s=t.charCodeAt(i);if(128>s)a[n++]=s;else{if(2048>s)a[n++]=s>>6|192;else{if(55296<=s&&57343>=s){if(56319>=s&&i<t.length){var o=t.charCodeAt(++i);if(56320<=o&&57343>=o){s=1024*(s-55296)+o-56320+65536,a[n++]=s>>18|240,a[n++]=s>>12&63|128,a[n++]=s>>6&63|128,a[n++]=63&s|128;continue}i--}0;s=65533}a[n++]=s>>12|224,a[n++]=s>>6&63|128}a[n++]=63&s|128}}t=n===a.length?a:a.subarray(0,n)}eb(e.h,8*r+2),eb(e.h,t.length),eC(e,e.h.end()),eC(e,t)}}),tk=tx(function(e,t,r,n,a){if(2!==e.i)return!1;t=eq(t,r,n),r=e.h.j,n=ef(e.h)>>>0;var i=e.h.h+n,s=i-r;if(0>=s&&(e.h.j=i,a(t,e,void 0,void 0,void 0),s=i-e.h.h),s)throw Error("Message parsing ended unexpectedly. Expected to read "+(n+" bytes, instead read ")+(n-s)+" bytes, either the data ended unexpectedly or the message misreported its own length");return e.h.h=i,e.h.j=r,!0},function(e,t,r,n,a){if(null!=(t=ej(t,n,r)))for(n=0;n<t.length;n++){var i=e;eb(i.h,8*r+2);var s=i.h.end();eC(i,s),s.push(i.i),i=s,a(t[n],e),s=e;var o=i.pop();for(o=s.i+s.h.length()-o;127<o;)i.push(127&o|128),o>>>=7,s.i++;i.push(o),s.i++}});function tC(e){return function(t,r){e:{if(eS.length){var n=eS.pop();n.setOptions(r),ep(n.h,t,r),t=n}else t=new ev(t,r);try{var a=tm(e),i=tg(new a.P,t,a);break e}finally{(a=t.h).i=null,a.m=!1,a.l=0,a.j=0,a.h=0,a.S=!1,t.l=-1,t.i=-1,100>eS.length&&eS.push(t)}}return i}}function tI(e){return function(){var t=new ek;ty(this,t,tu(e)),eC(t,t.h.end());for(var r=new Uint8Array(t.i),n=t.j,a=n.length,i=0,s=0;s<a;s++){var o=n[s];r.set(o,i),i+=o.length}return t.j=[r],r}}function tT(e){e3.call(this,e)}f(tT,e3);var t$=[tT,1,tw,2,tb,3,tS,4,tS];function tN(e){e3.call(this,e,-1,tE)}tT.prototype.l=tI(t$),f(tN,e3),tN.prototype.addClassification=function(e,t){return eq(this,1,tT,e,t),this};var tE=[1],tR=tC([tN,1,tk,t$]);function tA(e){e3.call(this,e)}f(tA,e3);var t_=[tA,1,tb,2,tb,3,tb,4,tb,5,tb];function tO(e){e3.call(this,e,-1,tF)}tA.prototype.l=tI(t_),f(tO,e3);var tF=[1],tP=tC([tO,1,tk,t_]);function tD(e){e3.call(this,e)}f(tD,e3);var tL=[tD,1,tb,2,tb,3,tb,4,tb,5,tb,6,tv],tM=tC(tL);function tB(e,t,r){if(r=e.createShader(0===r?e.VERTEX_SHADER:e.FRAGMENT_SHADER),e.shaderSource(r,t),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+e.getShaderInfoLog(r));return r}function tz(e){return{x:eY(e,1),y:eY(e,2),z:eY(e,3),visibility:null!=eG(e,4)?eY(e,4):void 0}}function tU(e){return ej(tP(e),tA,1).map(tz)}function tW(e,t){this.i=e,this.h=t,this.m=0}function tV(e,t,r){return(function(e,t){var r=e.h;if(void 0===e.s){var n=tB(r,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),a=tB(r,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),i=r.createProgram();if(r.attachShader(i,n),r.attachShader(i,a),r.linkProgram(i),!r.getProgramParameter(i,r.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+r.getProgramInfoLog(i));n=e.s=i,r.useProgram(n),a=r.getUniformLocation(n,"sampler0"),e.l={O:r.getAttribLocation(n,"aVertex"),N:r.getAttribLocation(n,"aTex"),ya:a},e.v=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,e.v),r.enableVertexAttribArray(e.l.O),r.vertexAttribPointer(e.l.O,2,r.FLOAT,!1,0,0),r.bufferData(r.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),r.STATIC_DRAW),r.bindBuffer(r.ARRAY_BUFFER,null),e.u=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,e.u),r.enableVertexAttribArray(e.l.N),r.vertexAttribPointer(e.l.N,2,r.FLOAT,!1,0,0),r.bufferData(r.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),r.STATIC_DRAW),r.bindBuffer(r.ARRAY_BUFFER,null),r.uniform1i(a,0)}n=e.l,r.useProgram(e.s),r.canvas.width=t.width,r.canvas.height=t.height,r.viewport(0,0,t.width,t.height),r.activeTexture(r.TEXTURE0),e.i.bindTexture2d(t.glName),r.enableVertexAttribArray(n.O),r.bindBuffer(r.ARRAY_BUFFER,e.v),r.vertexAttribPointer(n.O,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(n.N),r.bindBuffer(r.ARRAY_BUFFER,e.u),r.vertexAttribPointer(n.N,2,r.FLOAT,!1,0,0),r.bindFramebuffer(r.DRAW_FRAMEBUFFER?r.DRAW_FRAMEBUFFER:r.FRAMEBUFFER,null),r.clearColor(0,0,0,0),r.clear(r.COLOR_BUFFER_BIT),r.colorMask(!0,!0,!0,!0),r.drawArrays(r.TRIANGLE_FAN,0,4),r.disableVertexAttribArray(n.O),r.disableVertexAttribArray(n.N),r.bindBuffer(r.ARRAY_BUFFER,null),e.i.bindTexture2d(0)}(e,t),"function"==typeof e.h.canvas.transferToImageBitmap)?Promise.resolve(e.h.canvas.transferToImageBitmap()):r?Promise.resolve(e.h.canvas):"function"==typeof createImageBitmap?createImageBitmap(e.h.canvas):(void 0===e.j&&(e.j=document.createElement("canvas")),new Promise(function(t){e.j.height=e.h.canvas.height,e.j.width=e.h.canvas.width,e.j.getContext("2d",{}).drawImage(e.h.canvas,0,0,e.h.canvas.width,e.h.canvas.height),t(e.j)}))}function tG(e){this.h=e}tD.prototype.l=tI(tL);var tH=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function tj(e,t){return t+e}function tK(e){if(this.h=e,this.listeners={},this.l={},this.L={},this.s={},this.v={},this.M=this.u=this.ga=!0,this.I=Promise.resolve(),this.fa="",this.D={},this.locateFile=e&&e.locateFile||tj,"object"==typeof window)var t=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else if("undefined"!=typeof location)t=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/";else throw Error("solutions can only be loaded on a web page or in a web worker");if(this.ha=t,e.options){t=i(Object.keys(e.options));for(var r=t.next();!r.done;r=t.next()){r=r.value;var n=e.options[r].default;void 0!==n&&(this.l[r]="function"==typeof n?n():n)}}}function tq(e,t){var r;return k(function(n){return t in e.L?n.return(e.L[t]):(r=fetch(e.locateFile(t,"")).then(function(e){return e.arrayBuffer()}),e.L[t]=r,n.return(r))})}function tX(e){switch(void 0===e&&(e=0),e){case 1:return"pose_landmark_full.tflite";case 2:return"pose_landmark_heavy.tflite";default:return"pose_landmark_lite.tflite"}}function tY(e){var t=this;e=e||{},this.h=new tK({locateFile:e.locateFile,files:function(e){return[{url:"pose_solution_packed_assets_loader.js"},{simd:!1,url:"pose_solution_wasm_bin.js"},{simd:!0,url:"pose_solution_simd_wasm_bin.js"},{data:!0,url:tX(e.modelComplexity)}]},graph:{url:"pose_web.binarypb"},listeners:[{wants:["pose_landmarks","world_landmarks","segmentation_mask","image_transformed"],outs:{image:{type:"texture",stream:"image_transformed"},poseLandmarks:{type:"proto",stream:"pose_landmarks",transform:tU},poseWorldLandmarks:{type:"proto",stream:"world_landmarks",transform:tU},segmentationMask:{type:"texture",stream:"segmentation_mask"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"object"==typeof window&&void 0!==window.navigator&&("iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},modelComplexity:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorModelComplexity",fieldName:"int_value"},onChange:function(e){var r,n,a;return k(function(i){return 1==i.h?(n="third_party/mediapipe/modules/pose_landmark/"+(r=tX(e)),x(i,tq(t.h,r),2)):(a=i.i,t.h.overrideFile(n,a),i.return(!0))})}},smoothLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothLandmarks",fieldName:"bool_value"}},enableSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorEnableSegmentation",fieldName:"bool_value"}},smoothSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothSegmentation",fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator",fieldName:"threshold"}}}})}(l=tK.prototype).close=function(){return this.j&&this.j.delete(),Promise.resolve()},l.reset=function(){var e=this;return k(function(t){e.j&&(e.j.reset(),e.s={},e.v={}),t.h=0})},l.setOptions=function(e,t){var r=this;if(t=t||this.h.options){for(var n=[],a=[],s={},o=i(Object.keys(e)),l=o.next();!l.done;s={X:s.X,Y:s.Y},l=o.next())if(!((l=l.value)in this.l&&this.l[l]===e[l])){this.l[l]=e[l];var u=t[l];void 0!==u&&(u.onChange&&(s.X=u.onChange,s.Y=e[l],n.push(function(e){return function(){return k(function(t){if(1==t.h)return x(t,e.X(e.Y),2);!0===t.i&&(r.u=!0),t.h=0})}}(s))),u.graphOptionXref&&(l=Object.assign({},{calculatorName:"",calculatorIndex:0},u.graphOptionXref,{valueNumber:1===u.type?e[l]:0,valueBoolean:0===u.type&&e[l],valueString:2===u.type?e[l]:""}),a.push(l)))}(0!==n.length||0!==a.length)&&(this.u=!0,this.H=(void 0===this.H?[]:this.H).concat(a),this.F=(void 0===this.F?[]:this.F).concat(n))}},l.initialize=function(){var e=this;return k(function(t){var r,n,a,o,l,u,d,h,p,c,f,m,g,y,b,v,w,S,C,I,T,$,N,E;return 1==t.h?x(t,k(function(t){switch(t.h){case 1:if(!e.ga)return t.return();return r=void 0===e.h.files?[]:"function"==typeof e.h.files?e.h.files(e.l):e.h.files,x(t,k(function(e){switch(e.h){case 1:return e.s=2,x(e,WebAssembly.instantiate(tH),4);case 4:e.h=3,e.s=0;break;case 2:return e.s=0,e.l=null,e.return(!1);case 3:return e.return(!0)}}),2);case 2:if(n=t.i,"object"==typeof window){var i,m;return i={locateFile:e.locateFile},window.createMediapipeSolutionsWasm=i,m={locateFile:e.locateFile},window.createMediapipeSolutionsPackedAssets=m,u=r.filter(function(e){return void 0!==e.data}),d=r.filter(function(e){return void 0===e.data}),h=Promise.all(u.map(function(t){var r=tq(e,t.url);if(void 0!==t.path){var n=t.path;r=r.then(function(t){return e.overrideFile(n,t),Promise.resolve(t)})}return r})),p=Promise.all(d.map(function(t){var r,a;return void 0===t.simd||t.simd&&n||!t.simd&&!n?(r=e.locateFile(t.url,e.ha),(a=document.createElement("script")).setAttribute("src",r),a.setAttribute("crossorigin","anonymous"),new Promise(function(e){a.addEventListener("load",function(){e()},!1),a.addEventListener("error",function(){e()},!1),document.body.appendChild(a)})):Promise.resolve()})).then(function(){var t,r,n;return k(function(a){if(1==a.h)return t=window.createMediapipeSolutionsWasm,r=window.createMediapipeSolutionsPackedAssets,n=e,x(a,t(r),2);n.i=a.i,a.h=0})}),c=k(function(t){return e.h.graph&&e.h.graph.url?t=x(t,tq(e,e.h.graph.url),0):(t.h=0,t=void 0),t}),x(t,Promise.all([p,h,c]),7)}if("function"!=typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return a=r.filter(function(e){return void 0===e.simd||e.simd&&n||!e.simd&&!n}).map(function(t){return e.locateFile(t.url,e.ha)}),importScripts.apply(null,s(a)),o=e,x(t,createMediapipeSolutionsWasm(Module),6);case 6:o.i=t.i,e.m=new OffscreenCanvas(1,1),e.i.canvas=e.m,l=e.i.GL.createContext(e.m,{antialias:!1,alpha:!1,va:"undefined"!=typeof WebGL2RenderingContext?2:1}),e.i.GL.makeContextCurrent(l),t.h=4;break;case 7:if(e.m=document.createElement("canvas"),!(f=e.m.getContext("webgl2",{}))&&!(f=e.m.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),t.return();e.K=f,e.i.canvas=e.m,e.i.createContext(e.m,!0,!0,{});case 4:e.j=new e.i.SolutionWasm,e.ga=!1,t.h=0}}),2):3!=t.h?x(t,k(function(t){if(1==t.h){if(e.h.graph&&e.h.graph.url&&e.fa===e.h.graph.url)return t.return();if(e.u=!0,!e.h.graph||!e.h.graph.url){t.h=2;return}return e.fa=e.h.graph.url,x(t,tq(e,e.h.graph.url),3)}for(2!=t.h&&(m=t.i,e.j.loadGraph(m)),y=(g=i(Object.keys(e.D))).next();!y.done;y=g.next())b=y.value,e.j.overrideFile(b,e.D[b]);if(e.D={},e.h.listeners)for(w=(v=i(e.h.listeners)).next();!w.done;w=v.next())!function(e,t){for(var r=t.name||"$",n=[].concat(s(t.wants)),a=new e.i.StringList,o=i(t.wants),l=o.next();!l.done;l=o.next())a.push_back(l.value);o=e.i.PacketListener.implement({onResults:function(a){for(var s,o,l,u,d,h,p,c,f,m,g,y,b,v,w={},S=0;S<t.wants.length;++S)w[n[S]]=a.get(S);var C=e.listeners[r];C&&(e.I=(s=t.outs,k(function(t){switch(t.h){case 1:if(!s)return t.return(w);for(o={},l=0,d=(u=i(Object.keys(s))).next();!d.done;d=u.next())"string"!=typeof(h=s[d.value])&&"texture"===h.type&&void 0!==w[h.stream]&&++l;1<l&&(e.M=!1),d=(p=i(Object.keys(s))).next();case 2:if(d.done){t.h=4;break}if("string"==typeof(f=s[c=d.value]))return b=o,v=c,x(t,function(e,t,r){var n;return k(function(a){return"number"==typeof r||r instanceof Uint8Array||r instanceof e.i.Uint8BlobList?a.return(r):r instanceof e.i.Texture2dDataOut?((n=e.v[t])||(n=new tW(e.i,e.K),e.v[t]=n),a.return(tV(n,r,e.M))):a.return(void 0)})}(e,c,w[f]),14);if(m=w[f.stream],"detection_list"===f.type){if(m){for(var r=m.getRectList(),n=m.getLandmarksList(),a=m.getClassificationsList(),S=[],C=0;C<r.size();++C){var I=tM(r.get(C)),T=eY(I,1),$=eY(I,2),N=eY(I,3),E=eY(I,4),R=eY(I,5,0),A=void 0;A=void 0===A?0:A,I={la:{sa:T,ta:$,height:N,width:E,rotation:R,pa:eX(ez(I,6),A)},ea:tU(n.get(C)),ba:ej(tR(a.get(C)),tT,1).map(function(e){var t=ez(e,1);return{index:null==t?0:t,qa:eY(e,2),label:null!=ez(e,3)?eX(ez(e,3),""):void 0,displayName:null!=ez(e,4)?eX(ez(e,4),""):void 0}})},S.push(I)}r=S}else r=[];o[c]=r,t.h=7;break}if("proto_list"===f.type){if(m){for(n=0,r=Array(m.size());n<m.size();n++)r[n]=m.get(n);m.delete()}else r=[];o[c]=r,t.h=7;break}if(void 0===m){t.h=3;break}if("float_list"===f.type||"proto"===f.type){o[c]=m,t.h=7;break}if("texture"!==f.type)throw Error("Unknown output config type: '"+f.type+"'");return(g=e.v[c])||(g=new tW(e.i,e.K),e.v[c]=g),x(t,tV(g,m,e.M),13);case 13:y=t.i,o[c]=y;case 7:f.transform&&o[c]&&(o[c]=f.transform(o[c])),t.h=3;break;case 14:b[v]=t.i;case 3:d=p.next(),t.h=2;break;case 4:return t.return(o)}})).then(function(r){r=C(r);for(var a=0;a<t.wants.length;++a){var i=w[n[a]];"object"==typeof i&&i.hasOwnProperty&&i.hasOwnProperty("delete")&&i.delete()}r&&(e.I=r)}))}}),e.j.attachMultiListener(a,o),a.delete()}(e,w.value);S=e.l,e.l={},e.setOptions(S),t.h=0}),3):x(t,k(function(t){switch(t.h){case 1:if(!e.u)return t.return();if(!e.F){t.h=2;break}I=(C=i(e.F)).next();case 3:if(I.done){t.h=5;break}return x(t,(0,I.value)(),4);case 4:I=C.next(),t.h=3;break;case 5:e.F=void 0;case 2:if(e.H){for(T=new e.i.GraphOptionChangeRequestList,N=($=i(e.H)).next();!N.done;N=$.next())E=N.value,T.push_back(E);e.j.changeOptions(T),T.delete(),e.H=void 0}e.u=!1,t.h=0}}),0)})},l.overrideFile=function(e,t){this.j?this.j.overrideFile(e,t):this.D[e]=t},l.clearOverriddenFiles=function(){this.D={},this.j&&this.j.clearOverriddenFiles()},l.send=function(e,t){var r,n,a,s,o,l,u,d,h,p=this;return k(function(c){switch(c.h){case 1:if(!p.h.inputs)return c.return();return r=1e3*(null==t?performance.now():t),x(c,p.I,2);case 2:return x(c,p.initialize(),3);case 3:for(n=new p.i.PacketDataList,s=(a=i(Object.keys(e))).next();!s.done;s=a.next())if(o=s.value,l=p.h.inputs[o]){e:{var f=e[o];switch(l.type){case"video":var m=p.s[l.stream];if(m||(m=new tW(p.i,p.K),p.s[l.stream]=m),0===m.m&&(m.m=m.i.createTexture()),"undefined"!=typeof HTMLVideoElement&&f instanceof HTMLVideoElement)var g=f.videoWidth,y=f.videoHeight;else"undefined"!=typeof HTMLImageElement&&f instanceof HTMLImageElement?(g=f.naturalWidth,y=f.naturalHeight):(g=f.width,y=f.height);y={glName:m.m,width:g,height:y},(g=m.h).canvas.width=y.width,g.canvas.height=y.height,g.activeTexture(g.TEXTURE0),m.i.bindTexture2d(m.m),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,f),m.i.bindTexture2d(0),m=y;break e;case"detections":for((m=p.s[l.stream])||(m=new tG(p.i),p.s[l.stream]=m),m.data||(m.data=new m.h.DetectionListData),m.data.reset(f.length),y=0;y<f.length;++y){g=f[y];var b=m.data,v=b.setBoundingBox,w=y,S=g.la,k=new tD;if(eK(k,1,S.sa),eK(k,2,S.ta),eK(k,3,S.height),eK(k,4,S.width),eK(k,5,S.rotation),eU(k,6,S.pa),S=k.l(),v.call(b,w,S),g.ea)for(b=0;b<g.ea.length;++b){k=g.ea[b],w=(v=m.data).addNormalizedLandmark,S=y,k=Object.assign({},k,{visibility:k.visibility?k.visibility:0});var C=new tA;eK(C,1,k.x),eK(C,2,k.y),eK(C,3,k.z),k.visibility&&eK(C,4,k.visibility),k=C.l(),w.call(v,S,k)}if(g.ba)for(b=0;b<g.ba.length;++b)w=(v=m.data).addClassification,S=y,k=g.ba[b],eK(C=new tT,2,k.qa),k.index&&eU(C,1,k.index),k.label&&eU(C,3,k.label),k.displayName&&eU(C,4,k.displayName),k=C.l(),w.call(v,S,k)}m=m.data;break e;default:m={}}}switch(u=m,d=l.stream,l.type){case"video":n.pushTexture2d(Object.assign({},u,{stream:d,timestamp:r}));break;case"detections":(h=u).stream=d,h.timestamp=r,n.pushDetectionList(h);break;default:throw Error("Unknown input config type: '"+l.type+"'")}}return p.j.send(n),x(c,p.I,4);case 4:n.delete(),c.h=0}})},l.onResults=function(e,t){this.listeners[t||"$"]=e},T("Solution",tK),T("OptionType",{BOOL:0,NUMBER:1,ua:2,0:"BOOL",1:"NUMBER",2:"STRING"}),(l=tY.prototype).reset=function(){this.h.reset()},l.close=function(){return this.h.close(),Promise.resolve()},l.onResults=function(e){this.h.onResults(e)},l.initialize=function(){var e=this;return k(function(t){return x(t,e.h.initialize(),0)})},l.send=function(e,t){var r=this;return k(function(n){return x(n,r.h.send(e,t),0)})},l.setOptions=function(e){this.h.setOptions(e)},T("Pose",tY),T("POSE_CONNECTIONS",[[0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]]),T("POSE_LANDMARKS",{NOSE:0,LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,LEFT_EAR:7,RIGHT_EAR:8,LEFT_RIGHT:9,RIGHT_LEFT:10,LEFT_SHOULDER:11,RIGHT_SHOULDER:12,LEFT_ELBOW:13,RIGHT_ELBOW:14,LEFT_WRIST:15,RIGHT_WRIST:16,LEFT_PINKY:17,RIGHT_PINKY:18,LEFT_INDEX:19,RIGHT_INDEX:20,LEFT_THUMB:21,RIGHT_THUMB:22,LEFT_HIP:23,RIGHT_HIP:24,LEFT_KNEE:25,RIGHT_KNEE:26,LEFT_ANKLE:27,RIGHT_ANKLE:28,LEFT_HEEL:29,RIGHT_HEEL:30,LEFT_FOOT_INDEX:31,RIGHT_FOOT_INDEX:32}),T("POSE_LANDMARKS_LEFT",{LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,LEFT_EAR:7,LEFT_RIGHT:9,LEFT_SHOULDER:11,LEFT_ELBOW:13,LEFT_WRIST:15,LEFT_PINKY:17,LEFT_INDEX:19,LEFT_THUMB:21,LEFT_HIP:23,LEFT_KNEE:25,LEFT_ANKLE:27,LEFT_HEEL:29,LEFT_FOOT_INDEX:31}),T("POSE_LANDMARKS_RIGHT",{RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,RIGHT_EAR:8,RIGHT_LEFT:10,RIGHT_SHOULDER:12,RIGHT_ELBOW:14,RIGHT_WRIST:16,RIGHT_PINKY:18,RIGHT_INDEX:20,RIGHT_THUMB:22,RIGHT_HIP:24,RIGHT_KNEE:26,RIGHT_ANKLE:28,RIGHT_HEEL:30,RIGHT_FOOT_INDEX:32}),T("POSE_LANDMARKS_NEUTRAL",{NOSE:0}),T("VERSION","0.5.1675469404")}).call(vV);const vG=eb;vG.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15),vG.registerFlag("WEBGPU_CPU_FORWARD",()=>!0),vG.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1),vG.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0),vG.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1),vG.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3),vG.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1),vG.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0),vG.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1),vG.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1),vG.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1),vG.registerFlag("WEBGPU_PRINT_SHADER",()=>""),vG.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);class vH{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));else if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class vj{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,r=!1,n=!0){var a,i;let s,o=(a=e,i=t,`${a}_${i}`);return n?(this.freeBuffers.has(o)||this.freeBuffers.set(o,[]),this.freeBuffers.get(o).length>0?(s=this.freeBuffers.get(o).pop(),this.numFreeBuffers--):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:r}),this.numBytesAllocated+=e)):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:r}),this.numBytesAllocated+=e),this.usedBuffers.has(o)||this.usedBuffers.set(o,[]),this.usedBuffers.get(o).push(s),this.numUsedBuffers++,this.numBytesUsed+=e,s}releaseBuffer(e,t=!0){var r,n;if(0===this.freeBuffers.size)return;let a=e.size,i=(r=a,n=e.usage,`${r}_${n}`),s=this.usedBuffers.get(i),o=s.indexOf(e);if(o<0)throw Error("Cannot find the buffer in buffer manager");s[o]=s[s.length-1],s.pop(),this.numUsedBuffers--,this.numBytesUsed-=a,t?(this.freeBuffers.get(i).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=a)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}class vK{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,r,n){let a=e*t*vX(r),i=vq(e,t,r,n);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=a,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;let e=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(e),e}this.numBytesAllocated+=a;let s=this.device.createTexture({size:[e,t],format:r,usage:n});return this.usedTextures.get(i).push(s),s}releaseTexture(e){if(0===this.freeTextures.size)return;let t=e.width,r=e.height,n=e.format,a=vq(t,r,n,e.usage);this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.freeTextures.get(a).push(e),this.numFreeTextures++,this.numUsedTextures--;let i=this.usedTextures.get(a),s=i.indexOf(e);if(s<0)throw Error("Cannot release a texture that was never provided by this texture manager");i.splice(s,1);let o=t*r*vX(n);this.numBytesUsed-=o}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function vq(e,t,r,n){return`${e}_${t}_${r}_${n}`}function vX(e){if("rgba8unorm"===e)return 16;throw Error(`${e} is not supported!`)}const vY=(e,t,r)=>"int32"===r?`atomicAdd(${e}, bitcast<i32>(${t}));`:`
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${t});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;(TE=TY||(TY={}))[TE.FROM_PIXELS=0]="FROM_PIXELS",TE[TE.DRAW=1]="DRAW";const vQ=(e,t,r,n,a)=>{let i=function(e,t,r){var n;let a,i,s=[],o=r.workgroupSize[0]*r.workgroupSize[1]*r.workgroupSize[2];if(r.outputComponent=r.outputComponent?r.outputComponent:1,s.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${v5(r)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${o}u +
                localIndex);
        `}
      }
    `),null!=r.pixelsOpType){let n=r.pixelsOpType===TY.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${v8(t.dtype,r.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${v8(e[0].dtype,r.outputComponent)}>;`,a=3===t.shape.length?"vec2<i32>":"i32";s.push(`
        struct Uniform {
          outShapeStrides : ${a},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${n}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);let i=v7(r);return[v3,s.join("\n"),v6(t.shape),r.getUserCode(),v2(i,r)].join("\n")}let l="struct Uniforms { NAN : f32, INFINITY : f32, ";r.variableNames.forEach((t,r)=>{let n=vJ(e[r].shape.length);l+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${n}, `,i=vJ(e[r].shape.length-1),l+=`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides: ${i}, `});let u=vJ(t.shape.length);l+=`outShape : ${u}, `,i=vJ(t.shape.length-1),l+=`
         outShapeStrides: ${i}, `,r.size&&(l+="size : i32, "),r.uniforms&&(l+=r.uniforms),l+="};",l=n=(n=(n=l).replace(/(\w+)\s*:\s*vec(5|6)/g,e=>"@align(16) "+e)).replace(/vec(5|6)\s*,\s*(\w+)/g,(e,t,r)=>`vec${t}, @align(16) ${r}`),s.push(l),r.atomic?s.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):s.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${v8(t.dtype,r.outputComponent)}>;
    `),r.variableNames.forEach((t,n)=>{s.push(`
      @group(0) @binding(${1+n}) var<storage, read> ${t}: array<${r.variableComponents?v8(e[n].dtype,r.variableComponents[n]):v8(e[n].dtype,r.outputComponent)}>;
        `)}),""!==l&&s.push(`
      @group(0) @binding(${1+r.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let d=function(e,t){let{x:r,y:n=[],z:a=[]}=t,i=e.length,s=r.length+n.length+a.length;if(s!==i)return"";if(r.length===i){let e=vJ(i);return`fn getOutputCoords() -> ${e}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `}let o="",l=[r,n,a];for(let e=0;e<l.length;e++){let t=l[e];if(0!==t.length)if(1===t.length)o+=`let d${t[0]} = i32(globalId[${e}]);`;else{let r=function(e,t){if(Math.max(...e)>5)throw Error("Cannot symbolically compute strides for rank > 6 tensor.");let r=e.length,n=e.map(e=>`${t}.${"xyzwuv"[e]}`),a=Array(r-1);a[r-2]=n[r-1];for(let e=r-3;e>=0;--e)a[e]=`(${a[e+1]} * ${n[e+1]})`;return a}(t,"uniforms.outShape");o+=`var index${e} = i32(globalId[${e}]);`;for(let n=0;n<r.length;n++)o+=`let d${t[n]} = index${e} / ${r[n]};`,n===r.length-1?o+=`let d${t[n+1]} = index${e} - d${t[n]} * ${r[n]};`:o+=`index${e} = index${e} - d${t[n]} * ${r[n]};`}}let u=[];for(let e=0;e<s;e++)u.push(`d${e}`);let d=vJ(s),h=`fn getOutputCoords() -> ${d} {
  ${o}
`;return 0===u.length?h+=`return ${d}(0); }`:h+=`return ${d}(${u.join(",")}); }`,h}(t.shape,r.dispatchLayout),h=[v3,s.join("\n")+v4,v6(t.shape),d,function(e){let t="";switch(e){case 0:case 1:t+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:t+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:t+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:t+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:t+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:t+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:r0.assert(!1,()=>`Unsupported ${e}D shape`)}return t}(t.shape.length)];r.atomic||h.push(function(e,t,r){let n=e.length,a=v8(t,r),i=`fn setOutputAtIndex(flatIndex : i32, value : ${vZ(r)}) {
      result[flatIndex] = ${a}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${vZ(r,"i32")}) {
      result[flatIndex] = ${a}(value);
    }
    `;if(n>=2){let e=["d0","d1","d2","d3","d4","d5"].slice(0,n),t=vJ(n);i+=`
      fn setOutputAtCoords(${e.map(e=>`${e} : i32`).join(", ")}, value : ${vZ(r)}) {
        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));
        setOutputAtIndex(flatIndex${1===r?"":` / ${r}`}, value);
      }
      fn setOutputAtCoordsI32(${e.map(e=>`${e} : i32`).join(", ")}, value : ${vZ(r,"i32")}) {
        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));
        setOutputAtIndexI32(flatIndex${1===r?"":` / ${r}`}, value);
      }
    `}return i}(t.shape,t.dtype,r.outputComponent)),r.variableNames.forEach((t,r)=>{h.push(`${v6(e[r].shape,t)}`)});let p=e.map((e,n)=>{var a,i,s,o;let l;return a=e,i=t.shape,s=r.variableComponents?r.variableComponents[n]:r.outputComponent,o=r.dispatchLayout.x.length===t.shape.length,l=function(e,t){let r=e.name,n=e.shape.length,a=vJ(n),i="get"+r.charAt(0).toUpperCase()+r.slice(1),s=["d0","d1","d2","d3","d4","d5"].slice(0,n),o=s.map(e=>`${e} : i32`).join(", ");if(n<1)return`
      fn ${i}() -> ${vZ(t)} {
        return ${vZ(t)}(${r}[0]);
      }
    `;let l=`uniforms.${r.charAt(0).toLowerCase()+r.slice(1)}Shape`,u=`${n}D`;return 0===n&&(u="1D"),`
    fn ${i}(${o}) -> ${vZ(t)} {
      return ${vZ(t)}(${r}[getIndexFromCoords${u}(${a}(${s.join(",")}),
        ${l})${1===t?"":` / ${t}`}]);
    }
   `}(a,s),a.shape.length<=i.length&&(l+=function(e,t,r,n){let a=e.name,i=a.charAt(0).toUpperCase()+a.slice(1),s="get"+i+"ByOutput",o=e.shape.length,l=t.length,u=vJ(l);if(r0.arraysEqual(e.shape,t)&&n)return`
    fn ${s}Index(globalIndex : i32) -> ${vZ(r)} {
      return ${vZ(r)}(${a}[globalIndex]);
    }

    fn ${s}Coords(coords : ${u}) -> ${vZ(r)} {
      return ${vZ(r)}(${a}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}${1===r?"":` / ${r}`}]);
    }
    `;let d=sl.getBroadcastDims(e.shape,t),h=l-o,p="";if(0===o)return`
    fn ${s}Index(globalIndex : i32) -> ${vZ(r)}{
      return get${i}();
    }

    fn ${s}Coords(coords : ${u}) -> ${vZ(r)}{
      return get${i}();
    }
  `;p=l<2&&d.length>=1?"coords = 0;":d.map(e=>`coords.${v0(e+h)} = 0;`).join("\n");let c="";if(l<2&&o>0)c="coords";else if(l>1){let t=vJ(o),r=e.shape.map((e,t)=>`coords.${v0(t+h)}`).join(", ");c=`${t}(${r})`}else c="coords";let f=`uniforms.${a.charAt(0).toLowerCase()+a.slice(1)}Shape`,m=`${o}D`;return`
  fn ${s}Index(globalIndex : i32) -> ${vZ(r)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${p}
    return ${vZ(r)}(${a}[getIndexFromCoords${m}(${c}, ${f})${1===r?"":` / ${r}`}]);
  }

  fn ${s}Coords(coordsIn : ${u}) -> ${vZ(r)} {
    var coords = coordsIn;
    ${p}
    return ${vZ(r)}(${a}[getIndexFromCoords${m}(${c}, ${f})${1===r?"":` / ${r}`}]);
  }
`}(a,i,s,o)),l}).join("\n");h.push(p),h.push(r.getUserCode());let c=v7(r);return h.push(v2(c,r)),h.join("\n")}(r,{dtype:n.dtype,shape:n.shape},t),s=e.createShaderModule({code:i,label:t.constructor.name}),o=eb.get("WEBGPU_PRINT_SHADER");if(""!==o){let e=(o=o.toLowerCase()).split(",");("all"===o||e.some(e=>t.shaderKey.toLowerCase().includes(e)))&&(console.group(t.shaderKey),console.debug(i),console.groupEnd())}return a?e.createComputePipelineAsync({compute:{module:s,entryPoint:"_start"},label:t.constructor.name,layout:"auto"}):e.createComputePipeline({compute:{module:s,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})},vZ=(e,t="f32")=>{switch(e){case 1:return`${t}`;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw Error(`${e}-component ${t} is not supported.`)}};function vJ(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";else if(6===e)return"vec6";else throw Error(`GPU for rank ${e} is not yet supported`)}function v0(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";else if(5===e)return"v";else throw Error(`Index ${e} is not yet supported`)}function v1(...e){let t;switch(e.length){case 0:t=`
        fn main()
      `;break;case 1:t=`
        fn main(${e[0]} : i32)
      `;break;default:throw Error("Unreachable")}return t}function v2(e,t){var r;return`
     ${r=t,`
  @compute @workgroup_size(${r.workgroupSize[0]}, ${r.workgroupSize[1]}, ${r.workgroupSize[2]})
`}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${e?"main(getGlobalIndex());":"main();"};
      }
    `}const v3=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`,v4=`
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;function v6(e,t=""){let r,n=e.length,a=""!==t?`get${t.charAt(0).toUpperCase()+t.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",i=""!==t?`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides`:"outShapeStrides";if(n<=1)return`fn ${a}(index : i32) -> i32 { return index; }`;let s=r0.computeStrides(e),o=vJ(n),l=[];for(let e=0;e<n;e++)l.push(`d${e}`);return 1===s.length?`    fn ${a}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${i}; let d1 = index - d0 * uniforms.${i};
      return vec2<i32>(d0, d1);
    }`:(r="var index2 = index;"+s.map((e,t)=>{let r=`let ${l[t]} = index2 / uniforms.${i}.${v0(t)}`,n=t===s.length-1?`let ${l[t+1]} = index2 - ${l[t]} * uniforms.${i}.${v0(t)}`:`index2 = index2 - ${l[t]} * uniforms.${i}.${v0(t)}`;return`${r}; ${n};`}).join(""),`
    fn ${a}(index : i32) -> ${o} {
      ${r}
      return ${o}(${l.join(",")});
    }
  `)}function v5(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function v8(e,t=1){if("float32"===e)return vZ(t,"f32");if("int32"===e||"bool"===e)return vZ(t,"i32");throw Error(`type ${e} is not supported.`)}function v7(e){return!(e.dispatchLayout.hasOwnProperty("y")&&0!==e.dispatchLayout.y.length||e.dispatchLayout.hasOwnProperty("z")&&0!==e.dispatchLayout.z.length)}var v9={};l(v9,"tilesFitEvenlyIntoShape",()=>wt),l(v9,"computeDispatch",()=>wr),l(v9,"computeWorkgroupInfoForMatMul",()=>wn),l(v9,"computeWorkgroupSizeForConv2d",()=>wa),l(v9,"computeWorkPerThreadForConv2d",()=>wi),l(v9,"flatDispatchLayout",()=>ws),l(v9,"GPUBytesPerElement",()=>wo),l(v9,"isWebGPUSupported",()=>wl),l(v9,"assertNotComplex",()=>wu),l(v9,"MatMulProgramType",()=>TQ);const we=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t};function wt(e,t){if(e.length!==t.length)throw Error(`Cannot compute whether rank ${e.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every((t,r)=>t%e[r]==0)}function wr(e,t,r=[1,1,1],n=[1,1,1]){let[a,i,s]=[Math.ceil(we(e.x.map(e=>t[e]))/(r[0]*n[0])),e.y?Math.ceil(we(e.y.map(e=>t[e]))/(r[1]*n[1])):1,e.z?Math.ceil(we(e.z.map(e=>t[e]))/(r[2]*n[2])):1];return[a,i,s]}function wn(e,t,r,n=!1){let a=[8,8,1],i=[4,4,1];return!n&&(e<=8&&(i[1]=1),t<=16&&r<=16&&(a[0]=4)),{workgroupSize:a,elementsPerThread:i}}function wa(e,t,r=!1){if(r)return[8,8,1];let n=we(e.x.map(e=>t[e])),a=we(e.y.map(e=>t[e]));return n<=4?[4,16,1]:a<=4?[16,4,1]:[16,16,1]}function wi(e,t,r=!1){if(r)return[4,4,1];let n=we(e.x.map(e=>t[e])),a=we(e.y.map(e=>t[e]));return n<=4?[1,2,1]:a<=4?[2,1,1]:[2,2,1]}function ws(e){return{x:e.map((e,t)=>t)}}function wo(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw Error(`Unknown dtype ${e}`)}function wl(){return!!("undefined"!=typeof globalThis&&globalThis.navigator&&globalThis.navigator.gpu)}function wu(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r0.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGPU backend.`)})}(TR=TQ||(TQ={}))[TR.MatMulReduceProgram=0]="MatMulReduceProgram",TR[TR.MatMulSplitKProgram=1]="MatMulSplitKProgram",TR[TR.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",TR[TR.MatMulPackedProgram=3]="MatMulPackedProgram",TR[TR.MatMulMax=4]="MatMulMax";const wd=eb.getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),wh=(e,t)=>{let r=e.limits.maxComputeWorkgroupsPerDimension,n=t.dispatchLayout,a=t.dispatch;if(a.every(e=>e<=r))return a;r0.assert(a[0]>r&&void 0===n.y&&void 0===n.z,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let i=Math.ceil(Math.sqrt(a[0]));return i>r?(i=Math.ceil(Math.cbrt(a[0])),r0.assert(i<=r,()=>"Total dispatch size exceeds WebGPU maximum."),[i,i,i]):[i,i,1]};class wp extends v{nextDataId(){return wp.nextDataId++}constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!wl())throw Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new vH(t),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new vj(this.device),this.textureManager=new vK(this.device),this.tensorMap=new b(this,n5),eb.getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;let r=this.tensorMap.get(e);return t?r.refCount=0:r.refCount--,!(r.refCount>0)&&((null!=r.complexTensorInfos&&(this.disposeData(r.complexTensorInfos.real.dataId),this.disposeData(r.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e))?this.tensorDataPendingDisposal.push(e):(this.releaseResource(e),this.tensorMap.delete(e)),!0)}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){let t=this.tensorMap.get(e);if(t&&t.resource){if(t.external){t.resource=null;return}t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource),t.resource=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){let t=this.tensorMap.get(e);t.refCount++}decRef(e){if(this.tensorMap.has(e)){let t=this.tensorMap.get(e);t.refCount--}}write(e,t,r){if("complex64"===r&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:r,shape:t,values:e,refCount:1}),n}move(e,t,r,n,a){if("complex64"===n)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:n,shape:r,values:t,refCount:a})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(e){throw Error(e.message)}Object.keys(this.pipelineCache).map((t,r)=>{this.pipelineCache[t]=e[r]})}async getBufferData(e){if(eb.getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;let t=e.size,r=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,r,0,t),this.submitQueue(),await r.mapAsync(GPUMapMode.READ);let n=r.getMappedRange().slice(0);return r.unmap(),null!=r&&this.bufferManager.releaseBuffer(r),eb.getBool("WEBGPU_USE_PROFILE_TOOL")&&(r0.assert(void 0!==this.dummyContext,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(e,t){let r=this.tensorMap.get(e);return r.values=t,r.values}readSync(e){let t=this.tensorMap.get(e),{values:r,complexTensorInfos:n}=t;if(null!=r||"string"===t.dtype)return r;if("complex64"===t.dtype){let t=this.readSync(n.real.dataId),r=this.readSync(n.imag.dataId),a=r0.convertBackendValuesAndArrayBuffer(sl.mergeRealAndImagArrays(t,r).buffer,"float32");return this.convertAndCacheOnCPU(e,a),a}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));let a=["opaque","premultiplied"],i=t.resource,s=i.size;r0.assert(s%4==0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");let o=s/4,l=new ArrayBuffer(s),u=a.map(e=>new OffscreenCanvas(256,256)),d=new OffscreenCanvas(256,256);this.endComputePassEncoder(),u.map((e,t)=>{let r=e.getContext("webgpu");return r.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:a[t]}),r.getCurrentTexture()}).map((e,t)=>{let r=(r,n,s)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:i,bytesPerRow:1024,offset:s},{texture:e},{width:r,height:n}),this.submitQueue();let o=d.getContext("2d",{willReadFrequently:!0});o.clearRect(0,0,r,n),o.drawImage(u[t],0,0);let h=o.getImageData(0,0,r,n).data,p=a[t],c=new Uint8ClampedArray(l,s,r*n*4);for(let e=0;e<c.length;e+=4)if("premultiplied"===p)c[e+3]=h[e+3];else{let t=h[e];c[e]=h[e+2],c[e+1]=h[e+1],c[e+2]=t}},n=Math.floor(o/65536),s=256,h=256,p=0;for(let e=0;e<n;e++)r(s,h,p),p+=262144;let c=o%65536;(h=Math.floor(c/256))>0&&(r(s,h,p),p+=1024*h),(s=c%256)>0&&r(s,1,p)});let h=r0.convertBackendValuesAndArrayBuffer(l,t.dtype);return this.convertAndCacheOnCPU(e,h),h}async read(e){let t;if(!this.tensorMap.has(e))throw Error(`Tensor ${e} was not registered!`);let r=this.tensorMap.get(e),{values:n}=r;if(null!=n)return n;if("complex64"===r.dtype){let e=await Promise.all([this.read(r.complexTensorInfos.real.dataId),this.read(r.complexTensorInfos.imag.dataId)]),n=e[0],a=e[1];t=sl.mergeRealAndImagArrays(n,a)}else{let e=await this.getBufferData(r.resource);t=r0.convertBackendValuesAndArrayBuffer(e,r.dtype)}return this.convertAndCacheOnCPU(e,t),t}copyBuffer(e){let t=e.size,r=e.usage,n=this.bufferManager.acquireBuffer(t,r);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,t),this.submitQueue(),n}createTensorFromGPUData(e,t,r){let n=e.buffer;if("complex64"===r)throw Error("Cannot write to a complex64 dtype. ");let a={id:this.nextDataId()};this.tensorMap.set(a,{dtype:r,shape:t,values:null,refCount:1,external:e.zeroCopy});let i=this.tensorMap.get(a),s=wo(i.dtype)*r0.sizeFromShape(i.shape);if(e.buffer.size<s)throw Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${s})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(n=this.copyBuffer(n)),i.resource=n,n5.makeTensorFromDataId(a,t,r,this)}readToGPU(e){let{values:t,dtype:r,shape:n,resource:a}=this.tensorMap.get(e);if("complex64"===r)throw Error("Does not support reading buffer for complex64 dtype.");if(null==a)if(null!=t)throw Error("Data is not on GPU but on CPU.");else throw Error("There is no data on GPU or CPU.");let i=a.size,s=a.usage,o=this.bufferManager.acquireBuffer(i,s);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,o,0,i),this.submitQueue();let l=this.makeTensorInfo(n,r),u=n5.makeTensorFromTensorInfo(l);return this.tensorMap.get(l.dataId).resource=o,{tensorRef:u,buffer:o}}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let r=t.map(e=>r0.decodeString(e));return iW(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return iW(e.shape,e.dtype,t)}async time(e){this.supportTimestampQuery||this.hasTimestampQueryWarned||(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);let t=this.activeTimers,r=[],n=!1;null==this.programTimersStack?(this.programTimersStack=r,n=!0):this.activeTimers.push(r),this.activeTimers=r,e();let a=r0.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=r0.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,n&&(this.programTimersStack=null);let s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},o=await Promise.all(a);return s.kernelMs=r0.sum(o),s.getExtraProfileInfo=()=>o.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,s}makeTensorInfo(e,t,r){return"string"===t&&null!=r&&r.length>0&&r0.isString(r[0])&&(r=r.map(e=>r0.encodeString(e))),{dataId:this.write(r,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;let t=this.tensorMap.get(e.dataId).resource;return t instanceof GPUBuffer?{buffer:t}:t instanceof GPUTexture?t.createView():t}uploadToGPU(e){let t,r=this.tensorMap.get(e);if(null!=r.resource)return;let n=wo(r.dtype)*r0.sizeFromShape(r.shape),a=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(r.values){if("unmapped"===(t=this.bufferManager.acquireBuffer(n,a,!0)).mapState){let e=this.bufferManager.acquireBuffer(n,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),a=e.getMappedRange();"int32"===r.dtype||"bool"===r.dtype?new Int32Array(a).set(r.values):new Float32Array(a).set(r.values),e.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,t,0,n),this.stagingPendingDisposal.push(e)}else{let e=t.getMappedRange();"int32"===r.dtype||"bool"===r.dtype?new Int32Array(e).set(r.values):new Float32Array(e).set(r.values),t.unmap()}r.values=null}else t=this.bufferManager.acquireBuffer(n,a);r.resource=t}makeUniforms(e){let t=0,r=0,n=[],a=1;e.forEach(e=>{let i;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:i=4;break;case 2:i=8;break;case 3:case 4:case 5:case 6:i=16;break;default:r0.assert(!1,()=>`Unsupported ${e.data.length}D shape`)}(5===r||6===r)&&(i=16),i>a&&(a=i),t=Math.ceil(t/i)*i,r=e.data.length,n.push(t),t+=4*e.data.length});let i=new ArrayBuffer(t=Math.ceil(t/a)*a);e.forEach((e,t)=>{let r=n[t];"int32"===e.type?new Int32Array(i,r,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(i,r,e.data.length).set(e.data):new Float32Array(i,r,e.data.length).set(e.data)});let s=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(s,0,i,0,t),this.uniformPendingDisposal.push(s),{offset:0,size:t,buffer:s}}runWebGPUProgram(e,t,r,n,a){if(a||(a=this.makeTensorInfo(e.outputShape,r)),0===r0.sizeFromShape(a.shape))return this.tensorMap.get(a.dataId).values=r0.getTypedArrayFromDType(a.dtype,0),a;this.uploadToGPU(a.dataId),e.dispatch=wh(this.device,e);let i=t.map((t,r)=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[r]}});e.shaderKey=function(e,t,r){let n=e.shaderKey;if(null!=e.pixelsOpType)return n;let a=[],i=[];t.forEach(e=>{a.push(e.shape),i.push(e.dtype)}),a.push(r.shape),i.push(r.dtype);let s=t.map(e=>sl.getBroadcastDims(e.shape,r.shape)),o=t.map(e=>r0.arraysEqual(e.shape,r.shape)).join("_"),l=s.map(e=>e.join("_")).join(";"),u=v5(e)?"flatDispatch":"";return n+("_"+(e.workgroupSize?e.workgroupSize.join(","):"")+a.map(e=>e.length).join(",")+i.join(",")+e.variableNames.join(",")+l+o+u)}(e,i,a);let s=eb.getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=vQ(this.device,e,i,a,s)),e.pipeline=this.pipelineCache[e.shaderKey],s||this.recordAndSubmit(e,a,t,n),a}recordAndSubmit(e,t,r,n){if(e.pipeline instanceof Promise)throw Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let a=[],i=[],s="int32";if(null==e.pixelsOpType){a.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]});let e="int32";(i=r.concat(t).map(e=>e.shape)).map(t=>{a.push({type:e,data:t});let r=r0.computeStrides(t);a.push({type:e,data:r})})}else{let e=r0.computeStrides(t.shape);a.push({type:s,data:e})}if(e.size){let t=r0.sizeFromShape(e.outputShape);a.push({type:s,data:[e.outputComponent?t/e.outputComponent:t]})}n&&(a=[...a,...n]);let o=[this.tensorToBinding(t),...r.map(e=>this.tensorToBinding(e)),this.makeUniforms(a)];r.forEach(e=>{this.commandQueueOwnedIds.add(e.dataId)}),this.commandQueueOwnedIds.add(t.dataId);let l=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:o.map((e,t)=>({binding:t,resource:e}))}),u=null!=this.activeTimers;this.ensureCommandEncoderReady();let d={};u&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),d.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1},this.computePassEncoder=this.commandEncoder.beginComputePass(d)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(d)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,l),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(u||eb.get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===TY.DRAW)&&(this.endComputePassEncoder(),u?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;null==this.queryResolveBuffer&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);let e=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,8*this.querySetCount),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);let t=new BigUint64Array(e.getMappedRange()),r=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),r}shouldExecuteOnCPU(e,t=wd){return eb.getBool("WEBGPU_CPU_FORWARD")&&e.every(e=>null==this.tensorMap.get(e.dataId).resource&&r0.sizeFromShape(e.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}wp.nextDataId=0,wl()&&ab("webgpu",async()=>{let e={powerPreference:eb.get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(e),r={},n=[];t.features.has("timestamp-query")&&n.push("timestamp-query"),t.features.has("bgra8unorm-storage")&&n.push(["bgra8unorm-storage"]),r.requiredFeatures=n;let a=t.limits;return r.requiredLimits={maxComputeWorkgroupStorageSize:a.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:a.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:a.maxStorageBufferBindingSize,maxBufferSize:a.maxBufferSize,maxComputeWorkgroupSizeX:a.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:a.maxComputeInvocationsPerWorkgroup},new wp(await t.requestDevice(r),"info"in t?t.info:"requestAdapterInfo"in t?await t.requestAdapterInfo():void 0)},3),(TA=TZ||(TZ={}))[TA.ADD=0]="ADD",TA[TA.ATAN2=1]="ATAN2",TA[TA.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",TA[TA.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",TA[TA.DIV=4]="DIV",TA[TA.ELU_DER=5]="ELU_DER",TA[TA.EQUAL=6]="EQUAL",TA[TA.FLOOR_DIV=7]="FLOOR_DIV",TA[TA.GREATER=8]="GREATER",TA[TA.GREATER_EQUAL=9]="GREATER_EQUAL",TA[TA.LESS=10]="LESS",TA[TA.LESS_EQUAL=11]="LESS_EQUAL",TA[TA.LOGICAL_AND=12]="LOGICAL_AND",TA[TA.LOGICAL_OR=13]="LOGICAL_OR",TA[TA.MAX=14]="MAX",TA[TA.MIN=15]="MIN",TA[TA.MOD=16]="MOD",TA[TA.MUL=17]="MUL",TA[TA.NOT_EQUAL=18]="NOT_EQUAL",TA[TA.POW=19]="POW",TA[TA.PRELU=20]="PRELU",TA[TA.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",TA[TA.SUB=22]="SUB";const wc=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`,wf=`
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`,wm=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`,wg=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`,wy=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`,wx=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`,wb=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,wv=`return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`,ww=`
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`,wS=`
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`,wk=`
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`,wC=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`,wI=`
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`,wT=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`,w$=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;function wN(e,t){let r;do{let n,a,i;switch(e){case TZ.ATAN2:r="let resultTemp = atan2(a, b);";break;case TZ.MAX:r="let resultTemp = max(a, b);";break;case TZ.MIN:r="let resultTemp = min(a, b);";break;case TZ.MOD:r=t?wS:ww;break;case TZ.NOT_EQUAL:r=t?wC:wk;break;case TZ.POW:r=t?wT:wI;break;default:continue}return t?(n="isnanVec4",a="vec4<f32>",i="vec4<bool>"):(n="isnan",a="f32",i="bool"),`
      let aIsNaN = ${n}(a);
      let aPostLegalization = select(a, ${a}(42), aIsNaN);
      let bIsNaN = ${n}(b);
      let bPostLegalization = select(b, ${a}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${r}
        return select(
            resultTemp, ${a}(valueForNaN),
            ${i}(isNaN) | aIsNaN | bIsNaN);
      }
    `}while(!1)switch(e){case TZ.ADD:r="let resultTemp = a + b;";break;case TZ.COMPLEX_MULTIPLY_IMAG:r="let resultTemp = areal * bimag + aimag * breal;";break;case TZ.COMPLEX_MULTIPLY_REAL:r="let resultTemp = areal * breal - aimag * bimag;";break;case TZ.DIV:r="let resultTemp = a / b;";break;case TZ.ELU_DER:r="let resultTemp = select(a * (b + 1.0), a, b >= b - b);";break;case TZ.EQUAL:r=wc;break;case TZ.FLOOR_DIV:r=wf;break;case TZ.GREATER:r=wm;break;case TZ.GREATER_EQUAL:r=wg;break;case TZ.LESS:r=wy;break;case TZ.LESS_EQUAL:r=wx;break;case TZ.LOGICAL_AND:return t?wb:"return f32(a >= 1.0 && b >= 1.0);";case TZ.LOGICAL_OR:return t?wv:"return f32(a >= 1.0 || b >= 1.0);";case TZ.MUL:r="let resultTemp = a * b;";break;case TZ.PRELU:return t?w$:"if (a < 0.0) { return b * a; }  return a;";case TZ.SQUARED_DIFFERENCE:r="let resultTemp = (a - b) * (a - b);";break;case TZ.SUB:r="let resultTemp = a - b;"}return`
    ${r}
    return resultTemp;
  `}(T_=TJ||(TJ={}))[T_.ABS=0]="ABS",T_[T_.ACOS=1]="ACOS",T_[T_.ACOSH=2]="ACOSH",T_[T_.ASIN=3]="ASIN",T_[T_.ASINH=4]="ASINH",T_[T_.ATAN=5]="ATAN",T_[T_.ATANH=6]="ATANH",T_[T_.CEIL=7]="CEIL",T_[T_.COS=8]="COS",T_[T_.COSH=9]="COSH",T_[T_.ELU=10]="ELU",T_[T_.ERF=11]="ERF",T_[T_.EXP=12]="EXP",T_[T_.EXPM1=13]="EXPM1",T_[T_.FLOOR=14]="FLOOR",T_[T_.IS_FINITE=15]="IS_FINITE",T_[T_.IS_INF=16]="IS_INF",T_[T_.IS_NAN=17]="IS_NAN",T_[T_.LINEAR=18]="LINEAR",T_[T_.LOG=19]="LOG",T_[T_.LOG1P=20]="LOG1P",T_[T_.LOGICAL_NOT=21]="LOGICAL_NOT",T_[T_.NEG=22]="NEG",T_[T_.RELU=23]="RELU",T_[T_.RELU6=24]="RELU6",T_[T_.LEAKYRELU=25]="LEAKYRELU",T_[T_.RECIPROCAL=26]="RECIPROCAL",T_[T_.ROUND=27]="ROUND",T_[T_.RSQRT=28]="RSQRT",T_[T_.SELU=29]="SELU",T_[T_.SIGMOID=30]="SIGMOID",T_[T_.SIGN=31]="SIGN",T_[T_.SIN=32]="SIN",T_[T_.SINH=33]="SINH",T_[T_.SOFTPLUS=34]="SOFTPLUS",T_[T_.SQRT=35]="SQRT",T_[T_.SQUARE=36]="SQUARE",T_[T_.STEP=37]="STEP",T_[T_.TAN=38]="TAN",T_[T_.TANH=39]="TANH",T_[T_.TO_INT=40]="TO_INT";const wE=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`,wR=`
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`,wA=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`,w_=`
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`,wO=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`,wF=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,wP=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,wD=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${sl.ERF_P};
  let a1 = ${sl.ERF_A1};
  let a2 = ${sl.ERF_A2};
  let a3 = ${sl.ERF_A3};
  let a4 = ${sl.ERF_A4};
  let a5 = ${sl.ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`,wL=`if (a < 0.0) { return uniforms.NAN; }
  return log(a);`,wM=`
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`,wB=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,wz=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,wU=`
  if (a >= 0.0) {
    return ${sl.SELU_SCALE} * a;
  } else {
    return ${sl.SELU_SCALEALPHA} * (exp(a) - 1.0);
  }
`,wW=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,wV=`
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`,wG=`
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`,wH=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`;function wj(e,t){switch(e){case TJ.ABS:return"return abs(a);";case TJ.ACOS:return wE;case TJ.ACOSH:return wR;case TJ.ASIN:return wA;case TJ.ASINH:return"return asinh(a);";case TJ.ATAN:return w_;case TJ.ATANH:return wO;case TJ.COS:return"return cos(a);";case TJ.COSH:return wF;case TJ.CEIL:return"return ceil(a);";case TJ.ELU:return t?wP:"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case TJ.ERF:return wD;case TJ.EXP:return"return exp(a);";case TJ.EXPM1:return"return exp(a) - 1.0;";case TJ.FLOOR:return"return floor(a);";case TJ.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case TJ.IS_INF:return"return f32(isinf(a));";case TJ.IS_NAN:return"return f32(isnan(a));";case TJ.LINEAR:return"return a;";case TJ.LOG:return wL;case TJ.LOG1P:return wM;case TJ.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case TJ.NEG:return"return -a;";case TJ.LEAKYRELU:return t?wB:"if (a < 0.0) { return uniforms.alpha * a; } return a;";case TJ.RECIPROCAL:return"return 1.0 / a;";case TJ.RELU:return t?wz:"return select(a, 0.0, a < 0.0);";case TJ.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case TJ.ROUND:return"return round(a);";case TJ.RSQRT:return"return inverseSqrt(a);";case TJ.SELU:return wU;case TJ.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case TJ.SIGN:return"return sign(a);";case TJ.SIN:return"return sin(a);";case TJ.SINH:return wW;case TJ.SOFTPLUS:return wV;case TJ.SQRT:return"return sqrt(a);";case TJ.SQUARE:return"return a * a;";case TJ.STEP:return wG;case TJ.TAN:return"return tan(a);";case TJ.TANH:return wH;case TJ.TO_INT:return"return f32(i32((a)));";default:throw Error(`BinaryType ${e} is not implemented!`)}}function wK(e,t=!1,r=!1,n=3){if(null===e)return"";let a="";if("linear"===e)a=wj(TJ.LINEAR);else if("relu"===e)a=wj(TJ.RELU,r);else if("elu"===e)a=wj(TJ.ELU,r);else if("relu6"===e)a=wj(TJ.RELU6,r);else if("prelu"===e)a=wN(TZ.PRELU,r);else if("sigmoid"===e)a=wj(TJ.SIGMOID,r);else if("leakyrelu"===e)a=wj(TJ.LEAKYRELU,r);else throw Error(`Activation ${e} has not been implemented for the WebGPU backend.`);let i=vZ(r?4:1),s="";return t?`
      fn activation(a : ${i}, coords : vec${n}<i32>) -> ${i} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${a}
      }`:`
      fn activation(a : ${i}, coords : vec${n}<i32>) -> ${i} {
        ${a}
      }`}function wq(e,t){return`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      ${t?"value = activation(value, coords);":""}
      `}function wX(e,t,r=!1,n=!1,a=!1,i=1){r0.assert(e&&1===i||!e,()=>`transposeA ${e} is not compatible with component size ${i}`);let s=`
      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}

    `;return`
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${vZ(i)} {
    var value = ${vZ(i)}(0.0);
    ${r&&a?s:`
    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${s}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${vZ(i)} {
    var value = ${vZ(i)}(0.0);
    ${t?"value = getB(batch, col, row);":"value = getB(batch, row, col);"}
    return value;
  }
  `}function wY(e,t,r,n,a=!1,i=!1,s=!1,o=1){return`
  ${wX(r,n,a,i,s,o)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${vZ(o)}) {
    ${a&&i?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${wq(e,t)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}const wQ=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${t});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${t});
        `,wZ=(e,t,r,n)=>{if(e)return`
      for (var k = 0; k < ${n}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${r}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;{let e="",a="";for(let r=0;r<t;r++)e+=`let BCached${r} = mm_Bsub[k * ${t} + ${r}][tileCol];`,a+=`acc[i] = fma(BCached${r}, vec4<f32>(ACached[${r}]), acc[i]);`;return`
      for (var k = 0; k < ${n/t}; k++) {
        ${e}
        for (var i = 0; i < ${r}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${a}
        }
      }`}};function wJ(e,t,r=!1,n=32,a=!1,i=32,s=!1){let o=t[1]*e[1],l=t[0]*e[0],u=r?o:n,d=r?n:o,h=u/t[0],p=n/t[1],c=e[1],f=e[0];return r0.assert((r&&4===h&&4===e[1]||!r&&(3===h||4===h))&&u%t[0]==0&&n%t[1]==0&&4===e[0],()=>`If transposeA ${r} is true, innerElementSize ${h} and workPerThread[1] ${e[1]} must be 4.
          Otherwise, innerElementSize ${h} must be 3 or 4.
      tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}. tileInner ${n} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${h}<f32>, ${u/h}>, ${d}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${l/e[0]}>, ${n}>;

  ${v1()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${c};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${c};
    let globalCol = i32(globalId.x) * ${f};
    let batch = ${a?"0":"i32(globalId.z)"};
    let batchA = ${a||!s?"batch":"batch % uniforms.aShape[0]"};
    let batchB = ${a||!s?"batch":"batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${o};

    let numTiles = ${a?`${Math.ceil(i/n)}`:`(uniforms.dimInner - 1) / ${n} + 1`};
    var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

    var acc: array<vec4<f32>, ${c}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${p};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${c}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${wQ(r,h)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${p}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${n};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${wZ(r,h,c,n)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${c}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}const w0=e=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,w1=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function w2(e,t,r=!1,n=32,a=!1,i=32,s=!1,o=!1){let l=e[1]*t[1],u=e[0]*t[0],d=r?l:n,h=r?n:l;r0.assert(h%t[1]==0&&d%t[0]==0&&n%t[1]==0,()=>`tileAHight ${h} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}, tileInner ${n} must be divisible by workgroupSize[1]${t[1]}`);let p=h/t[1],c=d/t[0],f=n/t[1],m=e[1],g=e[0],y=s?`
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${l};
      let globalColStart = i32(workgroupId.x) * ${u};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${h}; inputRow = inputRow + ${t[1]}) {
          for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {
            ${w0(r)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${t[1]}) {
              for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${n};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${g}>;
        for (var k = 0; k < ${n}; k++) {
          for (var inner = 0; inner < ${g}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
          }
          for (var innerRow = 0; innerRow < ${m}; innerRow++) {
            let ACached = ${r?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
            for (var innerCol = 0; innerCol < ${g}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${t[1]};
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${t[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      `:`
  let tileRow = i32(localId.y) * ${m};
  let tileCol = i32(localId.x) * ${g};

  let globalRow = i32(globalId.y) * ${m};
  let globalCol = i32(globalId.x) * ${g};
  let globalRowStart = i32(workgroupId.y) * ${l};

  let tileRowA = i32(localId.y) * ${p};
  let tileColA = i32(localId.x) * ${c};
  let tileRowB = i32(localId.y) * ${f};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${p}; innerRow++) {
      for (var innerCol = 0; innerCol < ${c}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${w0(r)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${f}; innerRow++) {
      for (var innerCol = 0; innerCol < ${g}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${n};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${g}>;
    for (var k = 0; k < ${n}; k++) {
      for (var inner = 0; inner < ${g}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        ${w1(r)}
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${m}; innerRow++) {
    for (var innerCol = 0; innerCol < ${g}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;return`
    var<workgroup> mm_Asub : array<array<f32, ${d}>, ${h}>;
    var<workgroup> mm_Bsub : array<array<f32, ${u}>, ${n}>;

    ${v1()} {
      let batch = ${a?"0":"i32(globalId.z)"};
      let batchA = ${a||!o?"batch":"batch % uniforms.aShape[0]"};
      let batchB = ${a||!o?"batch":"batch % uniforms.bShape[0]"};
      let numTiles = ${a?`${Math.ceil(i/n)}`:`(uniforms.dimInner - 1) / ${n} + 1`};
      var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

      var acc : array<array<f32, ${g}>, ${m}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${y}
    }
  `}const w3=e=>e?`
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  `:`
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `;class w4{constructor(e,t,r=!1,n=!1,a=null,i=null,s=null,o=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};let l=r?e[1]:e[2];if(this.isVec4=(l%4==0&&!r||t[1]%4==0&&r)&&t[2]%4==0&&!n,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===t[1]&&!r,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{let e=wn(t[1],l,t[2],r);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);let u=null!=a,d=null!=s;u&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=o,this.transposeA=r,this.transposeB=n,this.addBias=u,this.activation=i,this.hasPreluActivationWeights=d,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],l),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${r}_${n}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,r){let n=this.workgroupSize[1]*this.elementsPerThread[1],a=this.workgroupSize[0]*this.elementsPerThread[0];return!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=a,[e%n==0,t%a==0,r%this.tileInner==0]}getUserCode(){return`
      ${wK(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${wY(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?wJ(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function(e,t=!1){r0.assert(1===e[1]&&1===e[2],()=>`A linear work group size is required. But got ${e}.`);let r=4*e[0];return`
    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;

    ${v1()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${r} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${r} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${w3(t)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${r/4}; k++) {
          let rowB = t * ${r} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}(this.workgroupSize,this.transposeA):w2(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}
    `}}class w6{constructor(e,t=!1,r=!1,n=null,a=null,i=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize);let s=null!=n,o=null!=i;s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=r,this.addBias=s,this.activation=a,this.hasPreluActivationWeights=o,this.shaderKey=`matMulReduce_${this.activation}_${t}_${r}`}getUserCode(){var e;return`
      ${wK(this.activation,this.hasPreluActivationWeights)}
      ${wY(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${e=this.workgroupSize[0],`
    var<workgroup> sumValues : array<f32, ${e}>;
    ${v1()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${e}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${e/2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}
    `}}class w5{constructor(e,t,r,n=!1,a=!1,i=null,s=null,o=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=r,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(r[2]/this.workgroupSize[0]),Math.ceil(r[1]/this.workgroupSize[1]),r[0]];let l=null!=i;l&&this.variableNames.push("bias");let u=null!=o;u&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=a,this.addBias=l,this.activation=s,this.hasPreluActivationWeights=u,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${a}`}getUserCode(){return`
      ${wK(this.activation,this.hasPreluActivationWeights)}
      ${wY(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${function(e){let t=e[1],r=e[0],n=t>r?t:r;return`
  var<workgroup> mm_Asub : array<array<f32, ${n}>, ${t}>;
  var<workgroup> mm_Bsub : array<array<f32, ${r}>, ${n}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${v1()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${n} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${n};
    globalRowB = globalRowB + ${n};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${n};
      globalRowB = globalRowB + ${n};

      for (var k = 0; k < ${n}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}(this.workgroupSize)}
    `}}class w8{constructor(e,t,r=!1,n=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,r0.assert(1===e[0],()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};let a=(r&&this.outputShape[1]%4==0||!r&&t%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=a?4:1,!a&&(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=wr(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=r,this.transposeB=n,this.shaderKey=`matMulSplitK_${r}_${n}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){let e=this.outputComponent;return`
      ${wX(!1,this.transposeB,!1,!1,!1,e)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${vZ(e)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${e}; i = i + 1) {
            ${vY("&result[flatIndex + i]",`${e>1?"value[i]":"value"}`,"float32")}
          }
        }
      }
      ${4===e?wJ(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):w2(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}}class w7{constructor(e,t=null,r=null,n=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=n,this.activation=r,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${r}`}getUserCode(){return`
    ${wK(this.activation,this.hasPreluActivationWeights)}
    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${wq(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}}class w9{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}}function Se(e){let{backend:t,attrs:r}=e,{shape:n,value:a}=r,{dtype:i}=r;if("string"===(i=i||r0.inferDtype(a))){let e=r0.getArrayFromDType(i,r0.sizeFromShape(n));return e.fill(a),t.makeTensorInfo(n,i,e)}{let e=new w9(n);return t.runWebGPUProgram(e,[],i,[{type:"float32",data:[a]}])}}function St(e){let{inputs:t,attrs:r}=e,{x:n}=t,{shape:a}=r,i=r0.sizeFromShape(n.shape),s=r0.inferFromImplicitShape(a,i),o=r0.sizeFromShape(s);return r0.assert(i===o,()=>`The new shape (${s}) has ${o} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.backend.incRef(n.dataId),{dataId:n.dataId,shape:s,dtype:n.dtype}}function Sr({a:e,b:t,transposeA:r,transposeB:n,backend:a,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:l=null}){let u,d,h=e.shape.length,p=t.shape.length,c=r?e.shape[h-2]:e.shape[h-1],f=n?t.shape[p-1]:t.shape[p-2],m=r?e.shape[h-1]:e.shape[h-2],g=n?t.shape[p-2]:t.shape[p-1],y=e.shape.slice(0,-2),x=t.shape.slice(0,-2),b=r0.sizeFromShape(y),v=r0.sizeFromShape(x),w=se.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([m,g]);r0.assert(c===f,()=>`Error in matMul: inner shapes (${c}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${r} and transposeB=${n} must match.`);let S=r?[b,c,m]:[b,m,c],k=n?[v,g,f]:[v,f,g],C=St({inputs:{x:e},backend:a,attrs:{shape:S}}),I=St({inputs:{x:t},backend:a,attrs:{shape:k}}),T=[C,I],$=Math.max(b,v),N=[C,I],E=[{type:"int32",data:[m]},{type:"int32",data:[g]},{type:"int32",data:[c]}],R=[$,m,g],A=eb.get("WEBGPU_MATMUL_PROGRAM_TYPE");if(A<0){let e=eb.getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),t=e>0?e:a.thresholdToIncreaseWorkgroups,r=$*Math.ceil(m/32)*Math.ceil(g/32);A=r<=t||m<=8&&r<=2*t?$*m*g<=128?TQ.MatMulReduceProgram:1===$&&f>=2e3?TQ.MatMulSplitKProgram:TQ.MatMulSmallOutputSizeProgram:TQ.MatMulPackedProgram}switch(A){case TQ.MatMulReduceProgram:u=new w6(R,r,n,i,l,s);break;case TQ.MatMulSplitKProgram:if(d=Se({backend:a,attrs:{shape:R,value:0,dtype:e.dtype}}),u=new w8(R,f,r,n),i||l){let t=new w7((d=a.runWebGPUProgram(u,N,e.dtype,E,d)).shape,i,l,s),r=null,n=[d];i&&n.push(i),s&&n.push(s),"leakyrelu"===l&&(r=[{type:"float32",data:[o]}],t.uniforms+=" alpha : f32,");let h=a.runWebGPUProgram(t,n,d.dtype,r);T.push(d);let p=St({inputs:{x:h},backend:a,attrs:{shape:w}});for(let e of(T.push(h),T))a.disposeData(e.dataId);return p}break;case TQ.MatMulSmallOutputSizeProgram:u=new w5(S,k,R,r,n,i,l,s);break;case TQ.MatMulPackedProgram:u=new w4(S,R,r,n,i,l,s,a.adapterInfo.isIntel());break;default:throw Error(`Unsupported MatMulProgramType ${A}.`)}i&&N.push(i),s&&N.push(s),"leakyrelu"===l&&(E.push({type:"float32",data:[o]}),u.uniforms+=" alpha : f32,");let _=St({inputs:{x:d=a.runWebGPUProgram(u,N,e.dtype,E,d)},backend:a,attrs:{shape:w}});for(let e of(T.push(d),T))a.disposeData(e.dataId);return _}class Sn{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=sl.assertAndGetBroadcastShape(t,r),this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){let e=wN(this.op,!1);return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${e}
      }

      ${v1("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}}class Sa{constructor(e,t,r){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=sl.assertAndGetBroadcastShape(t,r),this.dispatchLayout=ws(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&r.length>1&&t[0]<128,this.useSharedMemoryWithB=r.length<=1&&t.length>1&&r[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?r[0]:t[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{let n=t.length>0&&t[t.length-1]%4==0,a=r.length>0&&r[r.length-1]%4==0;n&&a?(this.outputComponent=4,this.variableComponents=[4,4]):n&&(r0.isScalarShape(r)||1===r[r.length-1])||a&&(r0.isScalarShape(t)||1===t[t.length-1])?(this.outputComponent=4,this.variableComponents=n?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e,t=4===this.outputComponent?"vec4<f32>":"f32",r=`
    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {
      ${wN(this.op,4===this.outputComponent)}
    };
    `;if("shared"===this.type){let t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",n=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);
          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];
          let b = getBByOutputIndex(index);`;e=`
        ${r}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${v1("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${n}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `}else e=`
       ${r}
       ${v1("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${t}(getAByOutputCoords(coords));
           let b = ${t}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;return e}}function Si(e){let{inputs:t}=e,{x:r}=t;return e.backend.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function Ss(e){let{inputs:t,backend:r}=e,{real:n,imag:a}=t,i=r.makeTensorInfo(n.shape,"complex64"),s=r.tensorMap.get(i.dataId);return s.complexTensorInfos={real:Si({inputs:{x:n},backend:r}),imag:Si({inputs:{x:a},backend:r})},i}class So{constructor(e,t,r=""){this.variableNames=["A"],this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==r&&(this.uniforms=r),this.shaderKey=`unary_${t}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${wj(this.op,!1)}
      }
      ${v1("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}}function Sl({opType:e,cpuKernelImpl:t,dtype:r}){return({inputs:n,backend:a})=>{let{x:i}=n,s=r||i.dtype;if(a.shouldExecuteOnCPU([i])&&null!=t){let e=t(a.tensorMap.get(i.dataId).values,s);return a.makeTensorInfo(i.shape,s,e)}let o=new So(i.shape,e);return a.runWebGPUProgram(o,[i],s)}}function Su({opType:e,cpuKernelImpl:t,supportsComplex:r=!1,dtype:n}){return({inputs:a,backend:i})=>{let{a:s,b:o}=a;if(r&&"complex64"===s.dtype){let t,r,n=i.tensorMap.get(s.dataId),a=i.tensorMap.get(o.dataId);if(e!==TZ.MUL)[t,r]=[[n.complexTensorInfos.real,a.complexTensorInfos.real],[n.complexTensorInfos.imag,a.complexTensorInfos.imag]].map(t=>{let[r,n]=t,a={dataId:r.dataId,dtype:r.dtype,shape:s.shape},l={dataId:n.dataId,dtype:n.dtype,shape:o.shape},u=new Sa(e,s.shape,o.shape);return i.runWebGPUProgram(u,[a,l],nY(r.dtype,n.dtype))});else{let e=new Sn(TZ.COMPLEX_MULTIPLY_REAL,s.shape,o.shape),l=new Sn(TZ.COMPLEX_MULTIPLY_IMAG,s.shape,o.shape),u=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:s.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape}];t=i.runWebGPUProgram(e,u,"float32"),r=i.runWebGPUProgram(l,u,"float32")}let l=Ss({inputs:{real:t,imag:r},backend:i});return i.disposeData(t.dataId),i.disposeData(r.dataId),l}let l=n||nY(s.dtype,o.dtype);if(("string"===s.dtype||"string"===o.dtype||i.shouldExecuteOnCPU([s,o]))&&null!=t){let e=i.tensorMap.get(s.dataId).values,r=i.tensorMap.get(o.dataId).values,n="string"===s.dtype?sl.fromUint8ToStringArray(e):e,a="string"===s.dtype?sl.fromUint8ToStringArray(r):r,[u,d]=t(s.shape,o.shape,n,a,l);return i.makeTensorInfo(d,l,u)}let u=new Sa(e,s.shape,o.shape);return i.runWebGPUProgram(u,[s,o],l)}}const{addImpl:Sd,castImpl:Sh,ceilImpl:Sp,concatImpl:Sc,equalImpl:Sf,expImpl:Sm,expm1Impl:Sg,floorImpl:Sy,floorDivImpl:Sx,gatherNdImpl:Sb,gatherV2Impl:Sv,greaterEqualImpl:Sw,greaterImpl:SS,lessEqualImpl:Sk,lessImpl:SC,logImpl:SI,maxImpl:ST,maximumImpl:S$,minimumImpl:SN,multiplyImpl:SE,negImpl:SR,notEqualImpl:SA,prodImpl:S_,rangeImpl:SO,rsqrtImpl:SF,scatterImpl:SP,simpleAbsImpl:SD,sliceImpl:SL,stridedSliceImpl:SM,stringNGramsImpl:SB,subImpl:Sz,tileImpl:SU,topKImpl:SW,transposeImpl:SV,uniqueImpl:SG}=cX,SH=Sl({opType:TJ.ABS,cpuKernelImpl:SD}),Sj=Sl({opType:TJ.ACOS}),SK=Sl({opType:TJ.ACOSH}),Sq=Su({opType:TZ.ADD,cpuKernelImpl:Sd,supportsComplex:!0});class SX{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((e,t)=>`T${t}`),this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let e=[];this.variableNames.forEach(t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)});let t=this.variableNames.map(e=>`v${e}`).join(" + ");return`
      ${v1("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join("\n        ")}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `}}class SY{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];this.outputShape=r,this.dispatchLayout={x:[0],y:[1]},this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){r0.assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);let e=this.workgroupSize[0];return`
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;
      ${v1()} {
        var x = i32(workgroupId.x) * ${e} + i32(localId.x);
        var y = i32(workgroupId.y) * ${e} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${e} + i32(localId.x);
        y = i32(workgroupId.x) * ${e} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}}class SQ{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];this.outputShape=r,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){let e=vJ(this.outputShape.length),t=SZ(this.newDim);return`
      ${v1("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `}}function SZ(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let r=Array(t);for(let t=0;t<e.length;t++)r[e[t]]=`coords.${v0(t)}`;return r.join()}function SJ(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{perm:i}=n,s=Array(a.shape.length);for(let e=0;e<s.length;e++)s[e]=a.shape[i[e]];if(r.shouldExecuteOnCPU([a])){let e=SV(r.tensorMap.get(a.dataId).values,a.shape,a.dtype,i,s);return r.makeTensorInfo(s,a.dtype,e)}if(2===a.shape.length&&r0.arraysEqual(i,[1,0])){let e=new SY(a.shape,i);return r.runWebGPUProgram(e,[a],a.dtype)}let o=new SQ(a.shape,i);return r.runWebGPUProgram(o,[a],a.dtype)}class S0{constructor(e,t,r){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];let[n]=sl.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===n.length?[1]:n,e.inSize>=32768&&r>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey=`reduce_${t}`}getUserCode(){let e="",t="0.0",r=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)
           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");let n="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);",a=`
         var<workgroup> xBestValues : array<f32, ${r}>;
       `;return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${a}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${v1("index")} {
         let outputIndex = index / ${r};
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${r}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${r}) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${r}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${n}
        }
       }
     `}}const S1={mean:"float32",all:"bool",any:"bool"};function S2(e,t,r,n,a){let i,s=e.shape.length,o=[],l=r0.parseAxisParam(t,e.shape),u=l,d=sl.getAxesPermutation(u,s),h=e;null!=d&&(h=SJ({inputs:{x:e},attrs:{perm:d},backend:a}),u=sl.getInnerMostAxes(u.length,s),o.push(h)),sl.assertAxesAreInnerMostDims(n,u,s);let[p,c]=sl.computeOutAndReduceShapes(h.shape,u),f=p;if(r&&(f=sl.expandShapeToKeepDim(p,l)),("max"===n||"prod"===n)&&a.shouldExecuteOnCPU([h])){let t=a.tensorMap.get(h.dataId).values;switch(n){case"max":let r=ST(t,r0.sizeFromShape(c),f,e.dtype);i=a.makeTensorInfo(f,e.dtype,r);break;case"prod":let{outVals:s,outShape:o,outDtype:l}=S_(h.shape,h.dtype,t,u);i=a.makeTensorInfo(o,l,s);break;default:throw Error(`${n} CPU implementation is not yet supported.`)}}else{let t=r0.sizeFromShape(c),r=r0.sizeFromShape(h.shape)/t,s=S1[n]||nQ(e.dtype),l=new S0({windowSize:t,inSize:t,batchSize:r,outSize:1},n,a.device.limits.maxComputeWorkgroupSizeX),u=a.runWebGPUProgram(l,[h],s,[{type:"int32",data:[t]}]);o.push(u),i=St({inputs:{x:u},attrs:{shape:f},backend:a})}return o.forEach(e=>a.disposeData(e.dataId)),i}class S3{constructor(e,t,r){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0,this.op="min"===r?"<":">";let[n,a]=sl.computeOutAndReduceShapes(e,[t]);this.outputShape=0===n.length?[1]:n,this.dispatchLayout=ws(this.outputShape),32>r0.sizeFromShape(a)?(this.type="plain",this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=wr(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":`uniforms.xShape.${v0(this.inputShape.length-1)}`,r=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${v0(t)},`;return e};if("shared"!==this.type)return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${r()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${r()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `;{let n=`
      var<workgroup> xBestIndices : array<i32, ${e}>;
      var<workgroup> xBestValues : array<f32, ${e}>;
    `;return`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${n}

      ${v1("index")} {
        let outputIndex = index / ${e};
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${e}) {
          let candidate = getX(${r()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${e}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `}}}const S4=Sl({opType:TJ.ASIN}),S6=Sl({opType:TJ.ASINH}),S5=Sl({opType:TJ.ATAN}),S8=Su({opType:TZ.ATAN2}),S7=Sl({opType:TJ.ATANH});class S9{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}}class ke{constructor(e,t,r=!1,n=!1,a=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&r)throw Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=r,this.flattenPositions=n,this.includeBatchIndex=a,this.shaderKey=`pool2D_${t}_${r}_${n}_${a}`}getUserCode(){let e;if("avg"===this.poolType)e="resultValue = resultValue + value; count = count + 1.0;";else if(this.computePositions){let t=this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC";e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${t};
      }`}else e="resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${e}
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}}class kt{constructor(e,t,r=!1,n=!1,a=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&r)throw Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=r,this.flattenPositions=n,this.includeBatchIndex=a,this.shaderKey=`pool3D_${t}_${r}_${n}_${a}`}getUserCode(){let e;if("avg"===this.poolType)e="resultValue += value; count += 1.0;";else if(this.computePositions){let t=this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC";e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${t};
      }`}else e="resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${e}
              }
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}}function kr(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reductionIndices:i,keepDims:s}=n;return S2(a,i,s,"max",r)}function kn(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{keepDims:i,axis:s}=n;return S2(a,s,i,"mean",r)}function ka(e,t,r,n){let a;if(1===t.filterWidth&&1===t.filterHeight&&r0.arraysEqual(t.inShape,t.outShape))return Si({inputs:{x:e},backend:n});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&1===t.batchSize&&"VALID"===t.padInfo.type){let a,i=e.shape.length,s=St({inputs:{x:e},backend:n,attrs:{shape:[e.shape[i-3]*e.shape[i-2],e.shape[i-1]]}});"avg"===r?a=kn({inputs:{x:s},backend:n,attrs:{axis:0,keepDims:!1}}):(r0.assert("max"===r,()=>`Invalid pool type ${r}`),a=kr({inputs:{x:s},backend:n,attrs:{reductionIndices:0,keepDims:!1}}));let o=St({inputs:{x:a},backend:n,attrs:{shape:t.outShape}});return n.disposeData(s.dataId),n.disposeData(a.dataId),o}let i=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return 1===t.filterHeight&&1===t.filterWidth?a=new S9(t):("avg"===r?a=new ke(t,"avg"):(r0.assert("max"===r,()=>`Invalid pool type ${r}`),a=new ke(t,"max")),i.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),n.runWebGPUProgram(a,[e],e.dtype,i)}class ki{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class ks{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class ko{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${vJ(e.length)}, `,this.shaderKey="slice"}getUserCode(){let e,t=vJ(this.rank),r=function(e){if(1===e)return"sourceLoc";if(e<=6)return kl.slice(0,e).map(e=>`sourceLoc.${e}`).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);return e=1===this.start.length?this.outputShape.map((e,t)=>"sourceLoc = uniforms.start + coords;"):this.outputShape.map((e,t)=>`sourceLoc.${kl[t]} = uniforms.start.${v0(t)} + coords.${kl[t]};`),`
      ${v1("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${t};
          let coords = getCoordsFromIndex(index);
          ${e.join("\n")}
          setOutputAtIndex(index, getSource(${r}));
        }
      }
    `}}const kl=["x","y","z","w","u","v"];function ku(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{begin:i,size:s}=n,[o,l]=s6.parseSliceParams(a,i,s);if(s6.assertParamsValid(a,o,l),r.shouldExecuteOnCPU([a])||"string"===a.dtype){let e=SL(r.tensorMap.get(a.dataId).values,o,l,a.shape,a.dtype);return r.makeTensorInfo(l,a.dtype,e)}if(0===r0.sizeFromShape(l))return r.makeTensorInfo(l,a.dtype,[]);let u=new ko(o,l),d=[{type:"int32",data:o}];return r.runWebGPUProgram(u,[a],a.dtype,d)}const kd=`
  fn bincount_write(index: i32, value: f32) {
    ${vY("&result[index]","value","float32")}
  }
`,kh=`
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`;class kp{constructor(e,t,r=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=r,r&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`
    ${this.binaryOutput?kh:kd}
  ${v1("index")} {
    ${1===this.rank?`if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};
        bincount_write(indexVal, value);
      }
    }`:`let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `}}class kc{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`
  ${v1("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `}}const kf=Su({opType:TZ.NOT_EQUAL,dtype:"bool",cpuKernelImpl:SA});function km(e){let{inputs:t,backend:r}=e,{input:n}=t;return Si({inputs:{x:r.tensorMap.get(n.dataId).complexTensorInfos.real},backend:r})}const kg=Sl({opType:TJ.CEIL,cpuKernelImpl:Sp});class ky{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${v1("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `}}class kx{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${v1("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}}class kb{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `}}function kv(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}class kw{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=sl.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`),this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){let e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);let t=this.offsetLength,r=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${r})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${v1("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join("\n        ")}
          }
        }
      }
    `}}function kS(e){let{inputs:t,backend:r}=e,{input:n}=t;return Si({inputs:{x:r.tensorMap.get(n.dataId).complexTensorInfos.imag},backend:r})}function kk(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n,i=r0.parseAxisParam(a,t[0].shape)[0],s=t.map(e=>e.shape);sl.assertParamsConsistent(s,i);let o=sl.computeOutShape(t.map(e=>e.shape),i);if(0===r0.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>r0.sizeFromShape(e.shape)>0);return 1===l.length?Si({inputs:{x:l[0]},backend:r}):function e(t,r,n){let a=t[0].dtype;if("complex64"===a){let a=t.map(e=>km({inputs:{input:e},backend:n})),i=t.map(e=>kS({inputs:{input:e},backend:n})),s=e(a,r,n),o=e(i,r,n),l=Ss({inputs:{real:s,imag:o},backend:n});return a.forEach(e=>n.disposeData(e.dataId)),i.forEach(e=>n.disposeData(e.dataId)),n.disposeData(s.dataId),n.disposeData(o.dataId),l}let i=n.shouldExecuteOnCPU(t);if("string"===a&&(i=!0),i){let e=t.map(e=>{let t=r0.sizeFromShape(e.shape.slice(r));return St({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),i=e.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),s=Sc(i,sl.computeOutShape(e.map(e=>e.shape),1),a,1===e[0].shape[0]),o=sl.computeOutShape(t.map(e=>e.shape),r),l=n.makeTensorInfo(o,a,s);return e.forEach(e=>n.disposeData(e.dataId)),l}let s=n.device.limits.maxStorageBuffersPerShaderStage-1;if(t.length>s){let a=[];for(let i=0;i<t.length;i+=s){let o=t.slice(i,i+s);a.push(e(o,r,n))}let i=e(a,r,n);for(let e of a)n.disposeData(e.dataId);return i}let{tensors2D:o,outShape:l}=function(e,t,r){let n=sl.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>St({inputs:{x:e},backend:r,attrs:{shape:[r0.sizeFromShape(e.shape.slice(0,t)),r0.sizeFromShape(e.shape.slice(t))]}})),outShape:n}}(t,r,n),u=o.map(e=>e.shape),d=new kw(u),h=[],p=Array(u.length-1);if(p.length>0){p[0]=u[0][1],h.push({type:"int32",data:[p[0]]});for(let e=1;e<p.length;e++)p[e]=p[e-1]+u[e][1],h.push({type:"int32",data:[p[e]]})}let c=n.runWebGPUProgram(d,o,o[0].dtype,h);o.forEach(e=>n.disposeData(e.dataId));let f=St({inputs:{x:c},backend:n,attrs:{shape:l}});return n.disposeData(c.dataId),f}(l,i,r)}class kC{constructor(e,t,r,n,a=!1,i=null,s=!1,o=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=wa(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=wi(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),a&&(this.variableNames.push("bias"),this.variableComponents.push(4)),s&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],a&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=o,this.addBias=a,this.activation=i,this.hasPreluActivationWeights=s,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=r%this.tileBOuter==0,this.fitInner=n%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){let e=this.isVec4?wJ(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):w2(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${function(e,t,r,n,a=!1,i=null,s=!1,o=4,l=4,u=4){let d=e?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,h=e?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,p=e?"row":"col",c=e?"col":"row",f=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${p} / outWidth;
      let outCol = ${p} % outWidth;

      let WRow = ${c} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${c} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${c} % inChannels;
      var resData = ${vZ(o)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${e?"uniforms.xShape[1]":"uniforms.xShape[2]"} && xCol >= 0 && xCol < ${e?"uniforms.xShape[2]":"uniforms.xShape[3]"}) {
        ${d}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${(e=>{switch(e){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw Error(`innerElementSize ${e} is not supported.`)}})(o)}
      }
      return resData;`,m=e?t&&n?`
      ${f}`:`
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${f}
      }
      return ${vZ(o)}(0.0);`:n&&r?`
      ${f}`:`
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${f}
      }
      return ${vZ(o)}(0.0);`,g=`${(e=>{switch(e){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw Error(`innerElementSize ${e} is not supported.`)}})(l)}`,y=vZ(u),x=e?vZ(o):vZ(l),b=e?vZ(l):vZ(o);return`
      ${wK(i,s,4===u,4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${x} {
        ${e?m:g}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${b} {
        ${e?g:m}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${y}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${h}
        ${wq(a,i)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}
    ${e}
  `}}class kI{constructor(e,t=!1,r=null,n=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=r,this.hasPreluActivationWeights=n,t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`
       ${wK(this.activation,this.hasPreluActivationWeights,!1,4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${wq(this.addBias,this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${v1("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}
         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}
         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `}}class kT{constructor(e,t){this.variableNames=["x"],this.uniforms=`pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,r=this.isChannelsLast?"coords[1]":"coords[2]",n=this.isChannelsLast?"coords[2]":"coords[1]",a=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`
    ${v1("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${r};
        let col = ${n};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {
            value = ${a};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `}}function k$(e,t){let r=e.length;return r>=3?t?[...e.slice(0,-3),e[r-3]*e[r-2],e[r-1]]:[...e.slice(0,-3),e[r-3],e[r-2]*e[r-1]]:!t&&1===r&&e[0]>1?[e[0],1]:null}function kN({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u=null!=a,d=null!=i,h="channelsLast"===r.dataFormat,p=h&&r.filterHeight===r.inHeight&&r.filterWidth===r.inWidth&&"VALID"===r.padInfo.type,c=eb.getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!c&&(p||1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type)))return function({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u,d="channelsLast"===r.dataFormat,h=d&&r.filterHeight===r.inHeight&&r.filterWidth===r.inWidth&&"VALID"===r.padInfo.type,p=[];if(h){let a=r.inHeight*r.inWidth*r.inChannels;l=St({inputs:{x:e},backend:n,attrs:{shape:[1,r.batchSize,a]}}),u=St({inputs:{x:t},backend:n,attrs:{shape:[1,a,r.outChannels]}})}else l=St({inputs:{x:e},backend:n,attrs:{shape:d?[r.batchSize,r.inHeight*r.inWidth,r.inChannels]:[r.batchSize,r.inChannels,r.inHeight*r.inWidth]}}),u=St({inputs:{x:t},backend:n,attrs:{shape:[1,r.inChannels,r.outChannels]}});if(p.push(l),p.push(u),null!=i){let e=k$(i.shape,d);null!=e&&(i=St({inputs:{x:i},backend:n,attrs:{shape:e}}),p.push(i))}if(null!=a){let e=k$(a.shape,d);null!=e&&(a=St({inputs:{x:a},backend:n,attrs:{shape:e}}),p.push(a))}let c=Sr({a:d?l:u,b:d?u:l,transposeA:!d,transposeB:!1,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),f=St({inputs:{x:c},backend:n,attrs:{shape:r.outShape}});for(let e of(p.push(c),p))n.disposeData(e.dataId);return f}({x:e,filter:t,convInfo:r,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s});let f=eb.getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=f>-1?f:n.thresholdToIncreaseWorkgroups,g=r.batchSize*Math.ceil(r.outHeight*r.outWidth/32)*Math.ceil(r.outChannels/32);if(eb.getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||g<=m)return function({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:d,strideWidth:h,strideHeight:p,padInfo:c,outWidth:f,outHeight:m,dilationWidth:g,dilationHeight:y,dataFormat:x}=r,b="channelsLast"===x,v=l*u*d,w=m*f,S=new kT(b?[r.batchSize,w,v]:[r.batchSize,v,w],b),k=[{type:"int32",data:[c.top,c.left]},{type:"int32",data:[p,h]},{type:"int32",data:[y,g]},{type:"int32",data:[f]},{type:"int32",data:[d*l]},{type:"int32",data:[d]}],C=n.runWebGPUProgram(S,[e],e.dtype,k),I=[];I.push(C);let T=St({inputs:{x:t},backend:n,attrs:{shape:[1,v,-1]}});if(I.push(T),null!=i){let e=k$(i.shape,b);null!=e&&(i=St({inputs:{x:i},backend:n,attrs:{shape:e}}),I.push(i))}if(null!=a){let e=k$(a.shape,b);null!=e&&(a=St({inputs:{x:a},backend:n,attrs:{shape:e}}),I.push(a))}let $=Sr({a:b?C:T,b:b?T:C,transposeA:!b,transposeB:!1,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),N=St({inputs:{x:$},backend:n,attrs:{shape:r.outShape}});for(let e of(I.push($),I))n.disposeData(e.dataId);return N}({x:e,filter:t,convInfo:r,backend:n,bias:a,preluActivationWeights:i,leakyreluAlpha:s,activation:o});let y=[r.padInfo.top,r.padInfo.left],x=[{type:"int32",data:[r.filterHeight,r.filterWidth]},{type:"int32",data:[...y]},{type:"int32",data:[r.strideHeight,r.strideWidth]},{type:"int32",data:[r.dilationHeight,r.dilationWidth]}];if(c)l=new kI(r,u,o,d);else{let e=h?r.outHeight*r.outWidth:r.outChannels,t=h?r.outChannels:r.outHeight*r.outWidth,a=r.filterHeight*r.filterWidth*r.inChannels;x.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[a]}),l=new kC(r,e,t,a,u,o,d,n.adapterInfo.isIntel())}let b=[],v=[e,t];u&&(h||1!==a.shape.length||b.push(a=St({inputs:{x:a},backend:n,attrs:{shape:[a.shape[0],1,1]}})),v.push(a)),d&&(h||1!==i.shape.length||b.push(i=St({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}})),v.push(i)),"leakyrelu"===o&&(x.push({type:"float32",data:[s]}),l.uniforms+=" alpha : f32,");let w=n.runWebGPUProgram(l,v,e.dtype,x);for(let e of b)n.disposeData(e.dataId);return w}class kE{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=this.isChannelsLast&&e.outChannels%4==0&&e.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,r=this.isChannelsLast?3:1,n=`
    ${v1()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;return this.isVec4?`
    ${n}
    `:`
    ${v1("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${r}];

        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class kR{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`
    ${v1("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class kA{constructor(e){this.variableNames=["x","dy"],this.uniforms=`pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`
    ${v1("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class k_{constructor(e){this.variableNames=["dy","W"],this.uniforms=`filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`
    ${v1("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class kO{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,r0.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=wa(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=wi(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let e=this.isVec4?wJ(this.elementsPerThread,this.workgroupSize):w2(this.elementsPerThread,this.workgroupSize);return`
    ${function(e=4){let t=`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${vZ(e)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${vZ(e)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];`,r=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${t}
      }
      return ${vZ(e)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${vZ(e)} {
    ${r}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${vZ(e)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw Error(`innerElementSize ${e} is not supported.`)}})(e)}
    }
    return ${vZ(e)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${vZ(e)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;
    }
  }`}(this.isVec4?4:1)}
    ${e}
    `}}class kF{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`}}const kP=Sl({opType:TJ.COS}),kD=Sl({opType:TJ.COSH});class kL{constructor(e,t,r,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;let[a]=t;this.outputShape=[a,r[0],r[1],e],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId=+("bilinear"===n),this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[r,n,a]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[i,s,o]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`
    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${r});
        let width_ratio = f32(${i});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${s};
        let in_y = ${a};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${o};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}}(TO=T0||(T0={})).Prod="*",TO.Sum="+";class kM{constructor(e,t,r,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=r,this.reverse=n,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let e=this.outputShape.length,t=this.op===T0.Prod?"1.0":"0.0",r=this.exclusive?t:`getX(${kB(e,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],a="",i="";return this.exclusive?(a=this.reverse?`end != ${n-1}`:"end != 0",i=this.reverse?"end + 1":"end - 1"):(a=this.reverse?`end + pow2 < ${n}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`
      ${v1("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${kz(e,"coords",this.op)};
         var val = ${r};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${a}) {
           let idx = ${i};
           ${kz(e,"coords",this.op)} = idx;
           val ${this.op}= getX(${kB(e,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}}function kB(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function kz(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function kU(e,t,r,n,a,i){let s=t.shape.length,o=sl.getAxesPermutation([n],s),l=t;null!=o&&(l=SJ({inputs:{x:t},backend:r,attrs:{perm:o}}));let u=sl.getInnerMostAxes(1,s)[0];if(u!==s-1)throw Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${n}`);let d=l.shape[u],h=Si({inputs:{x:l},backend:r});for(let t=0;t<=Math.ceil(Math.log2(d))-1;t++){let n=new kM(e,l.shape,!1,i),a=h,s=[{type:"float32",data:[t]}];h=r.runWebGPUProgram(n,[h],h.dtype,s),r.disposeData(a.dataId)}if(a){let t=new kM(e,l.shape,a,i),n=h;h=r.runWebGPUProgram(t,[h],h.dtype,[{type:"float32",data:[0]}]),r.disposeData(n.dataId)}if(null!=o){let e=SJ({inputs:{x:h},backend:r,attrs:{perm:sl.getUndoAxesPermutation(o)}});return r.disposeData(h.dataId),r.disposeData(l.dataId),e}return h}class kW{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class kV{constructor(e,t,r,n=!1,a=null,i=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),n&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=a,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=r,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],r=this.workgroupSize[1]+this.filterHeight-1,n=this.workgroupSize[0]+this.filterWidth-1;return`
      ${wK(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${r}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${v1()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${wq(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}}class kG{constructor(e,t=!1,r=null,n=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;let a=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=ws(a),this.dispatch=wr(this.dispatchLayout,a,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),r0.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=r,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${r}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){let e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,r=this.convInfo.strideWidth;return`
      ${wK(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${v1("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${r}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${e}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${r} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${wq(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}}class kH{constructor(e,t=!1,r=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`,this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=r,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${wK(this.activation,this.hasPreluActivation,!1,4)}

      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast?3:1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${wq(this.addBias,this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}}class kj{constructor(e){this.variableNames=["x","dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class kK{constructor(e){this.variableNames=["dy","W"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class kq{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `}}class kX{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`
       ${v1("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `}}class kY{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(e.outShape),this.dispatch=wr(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==t&&"int32"!==t)throw Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`
       ${v1("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${vY("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}}class kQ{constructor(e,t,r){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=ws(e.outShape),this.dispatch=wr(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==r&&"int32"!==r)throw Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${r} type.`);this.type=r,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`
       ${v1("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${vY("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}}class kZ{constructor(e,t,r){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=TY.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=r,this.shaderKey=`draw_${t}_${r}`}getUserCode(){let e,t="float32"===this.type?"value":"value / 255.0";return e=`
      if (uniforms.numChannels == 1) {
        rgba[0] = ${t};
        rgba[1] = ${t};
        rgba[2] = ${t};
      } else {
        rgba[d] = ${t};
      }`,`
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${v1("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${e}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `}}const kJ=Su({opType:TZ.MUL,cpuKernelImpl:SE,supportsComplex:!0});function k0(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return S2(a,i,s,"sum",r)}const k1=Sl({opType:TJ.ELU}),k2=Su({opType:TZ.EQUAL,dtype:"bool",cpuKernelImpl:Sf}),k3=Sl({opType:TJ.ERF}),k4=Sl({opType:TJ.EXP,cpuKernelImpl:Sm,dtype:"float32"});function k6(e){let{inputs:t,attrs:r,backend:n}=e,{dim:a}=r,{input:i}=t,s=i.shape.length,o=i.shape.slice(),l=a;return a<0&&(r0.assert(-(s+1)<=a,()=>`Axis must be in the interval [${-(s+1)}, ${s}]`),l=s+a+1),o.splice(l,0,1),St({inputs:{x:i},backend:n,attrs:{shape:o}})}const k5=Sl({opType:TJ.EXPM1,cpuKernelImpl:Sg});class k8{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){let e="real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;";return`
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${e}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `}}function k7(e,t,r){let n=r.tensorMap.get(e.dataId),a=r0.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],s=[],o=St({inputs:{x:e},backend:r,attrs:{shape:[a/i,i]}});s.push(o);let l=o.shape,u=new k8("real",l),d=new k8("imag",l),h=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:l},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:l}],p=[{type:"float32",data:[t?2*Math.PI:-2*Math.PI]},{type:"float32",data:[t?l[1]:1]}],c=r.runWebGPUProgram(u,h,"float32",p);s.push(c);let f=r.runWebGPUProgram(d,h,"float32",p);s.push(f);let m=Ss({inputs:{real:c,imag:f},backend:r});s.push(m);let g=St({inputs:{x:m},backend:r,attrs:{shape:e.shape}});return s.forEach(e=>r.disposeData(e.dataId)),g}class k9{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}}const Ce=Sl({opType:TJ.FLOOR,cpuKernelImpl:Sy}),Ct=Su({opType:TZ.FLOOR_DIV,cpuKernelImpl:Sx,dtype:"int32"});class Cr{constructor(e,t,r=!1){this.pixelsOpType=TY.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=r,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)",t=this.importVideo?"texture_external":"texture_2d<f32>";return`
      @binding(1) @group(0) var src: ${t};
      ${v1("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}}let Cn=eb.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class Ca{constructor(e,t,r,n,a){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],sl.assertAndGetBroadcastShape(e,t),sl.assertAndGetBroadcastShape(e,r),this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=n&&(sl.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset")),null!=a&&(sl.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=a,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";return null!=this.scaleShape&&(t="getScaleByOutputIndex(index)"),`
      ${v1("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}}class Ci{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${vJ(e)},`}getUserCode(){let e;return e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides",`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}}class Cs{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){let e=function(e){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let n=0;n<e.length;n++)2===n?r.push("indexZ"):r.push(`${t[n]}`);return r.join()}(this.aShape);return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `}}function Co(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,indices:i}=t,{axis:s,batchDims:o}=n,l=r0.parseAxisParam(s,a.shape)[0],u=sl.segment_util.collectGatherOpShapeInfo(a,i,l,o),d=r0.sizeFromShape(i.shape),h=[],p=St({inputs:{x:a},backend:r,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),c=St({inputs:{x:i},backend:r,attrs:{shape:[u.batchSize,d/u.batchSize]}});h.push(p),h.push(c);let f=[u.batchSize,u.outerSize,d/u.batchSize,u.sliceSize];if(r.shouldExecuteOnCPU([a,i])){let e=r.tensorMap.get(c.dataId).values,t=iW(c.shape,c.dtype,e),n=r.tensorMap.get(p.dataId).values,a=Sv(iW(p.shape,p.dtype,n),t,f);return h.forEach(e=>r.disposeData(e.dataId)),r.makeTensorInfo(u.outputShape,a.dtype,a.values)}let m=new Cs(p.shape,f),g=r.runWebGPUProgram(m,[p,c],p.dtype);h.push(g);let y=St({inputs:{x:g},backend:r,attrs:{shape:u.outputShape}});return h.forEach(e=>r.disposeData(e.dataId)),y}const Cl=Su({opType:TZ.GREATER,cpuKernelImpl:SS,dtype:"bool"}),Cu=Su({opType:TZ.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:Sw}),Cd=Sl({opType:TJ.IS_FINITE,dtype:"bool"}),Ch=Sl({opType:TJ.IS_INF,dtype:"bool"}),Cp=Sl({opType:TJ.IS_NAN,dtype:"bool"}),Cc=Su({opType:TZ.LESS,dtype:"bool",cpuKernelImpl:SC}),Cf=Su({opType:TZ.LESS_EQUAL,dtype:"bool",cpuKernelImpl:Sk});class Cm{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `}}const Cg=Sl({opType:TJ.LOG,cpuKernelImpl:SI}),Cy=Sl({opType:TJ.LOG1P}),Cx=Su({opType:TZ.LOGICAL_AND,dtype:"bool"}),Cb=Sl({opType:TJ.LOGICAL_NOT}),Cv=Su({opType:TZ.LOGICAL_OR}),Cw=`
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`;class CS{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${Cw}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `}}class Ck{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,r0.assert(t<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=wr(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${v1()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${Cw}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `}}class CC{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `}}const CI=Su({opType:TZ.MAX,cpuKernelImpl:S$});class CT{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class C${constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`
      ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `}}const CN=Su({opType:TZ.MIN,cpuKernelImpl:SN});class CE{constructor(e,t,r){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]),this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.offset=+("reflect"!==r),this.shaderKey=`mirrorPad_${r}`}getUserCode(){let e=this.xShape.length,t=this.xShape.map((e,t)=>`uniforms.pad${t}[0]`).join(","),r=this.xShape.map((t,r)=>`uniforms.pad${r}[0] + uniforms.xShape${e>1?`[${r}]`:""}`).join(","),n=1===e?"start":"start[i]",a=1===e?"end":"end[i]",i=1===e?"outC":"outC[i]",s=vJ(e),o=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let start = ${s}(${t});
          let end = ${s}(${r});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${i} < ${n}) {
              ${i} = ${n} * 2 - ${i} - ${this.offset};
            } else if(${i} >= ${a}) {
              ${i} = (${a} - 1) * 2 - ${i} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${o}));
        }
      }
    `}}const CR=Su({opType:TZ.MOD});class CA{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${v1("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `}}class C_{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${v1("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `}}function CO(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{dim:i}=n,s=St({inputs:{x:a},backend:r,attrs:{shape:[r0.sizeFromShape(a.shape)/a.shape[i],a.shape[i]]}}),o=new C_(s.shape),l=r.runWebGPUProgram(o,[s],a.dtype),u=St({inputs:{x:l},backend:r,attrs:{shape:a.shape}});return r.disposeData(s.dataId),r.disposeData(l.dataId),u}class CF{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`
      ${v1("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `}}function CP(e){let{inputs:t,backend:r}=e,{x:n}=t;if("complex64"!==n.dtype)return Se({attrs:{shape:n.shape,dtype:n.dtype,value:"string"===n.dtype?"":0},backend:r});{let e=km({inputs:{input:n},backend:r}),t=CP({inputs:{x:e},backend:r}),a=kS({inputs:{input:n},backend:r}),i=CP({inputs:{x:a},backend:r}),s=Ss({inputs:{real:t,imag:i},backend:r});return r.disposeData(e.dataId),r.disposeData(t.dataId),r.disposeData(a.dataId),r.disposeData(i.dataId),s}}function CD(e,t=!1){let r=e.length,n=vJ(r),a=e.map((e,t)=>`uniforms.pad${t}[0]`).join(","),i=e.map((e,t)=>`uniforms.pad${t}[0] + uniforms.xShape${r>1?`[${t}]`:""}`).join(","),s=r>1?`${n}(${a})`:`${a}`,o=r>1?`${n}(${i})`:`${i}`,l=r>1?"any(paddedCoords < start)":"paddedCoords < start",u=r>1?"any(paddedCoords >= end)":"paddedCoords >= end",d=r>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r):"coords";return`
        let start = ${s};
        let end = ${o};
        if (${l} || ${u}) {
          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${d}));
        }
  `}class CL{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]),this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${CD(this.xShape)}
        }
      }
    `}}const CM=Su({opType:TZ.POW}),CB=Su({opType:TZ.DIV}),Cz=Sl({opType:TJ.RECIPROCAL}),CU=Sl({opType:TJ.RELU}),CW=Sl({opType:TJ.RELU6});class CV{constructor(e,t,r){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,r,e[3]],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}}class CG{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeBilinearBackprop_${t}`}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}}class CH{constructor(e,t,r,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,r,e[3]],this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let e;return e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}}class Cj{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeNearestNeigborBackprop_${t}`}getUserCode(){return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}}class CK{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){let e=`
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    `;return`
      ${e}
      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `}}class Cq{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${v1("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}}const CX=Sl({opType:TJ.ROUND}),CY=Sl({opType:TJ.RSQRT,cpuKernelImpl:SF});class CQ{constructor(e,t,r,n,a,i,s,o=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=s,this.sumDupeIndices=o,this.dispatchLayout=ws(e),this.dispatch=wr(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${r}_${n}_${this.sliceDimGreaterThanOne}_${s}_${o}_${a.length}`;let l=vJ(a.length);this.uniforms=`sliceDim : i32, strides: ${l}, updatesSize: i32,`,this.updatesRank=n,this.indicesRank=r}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");let t=`getIndices(${e})`,r=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",a="";1===this.dispatchLayout.x.length?(n="flattenedIndex",a=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):2===this.dispatchLayout.x.length&&(n="vec2<i32>(flattenedIndex, coords[1])",a=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let i=Array.from({length:this.updatesRank},(e,t)=>`coords[${t}]`),s=`getUpdates(${i.join(", ")})`;return`
    ${a}
      ${v1("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${r};
          }
          let updateValue =
              ${v8(this.type)}(${s});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${this.sumDupeIndices?vY("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`}}class CZ{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){let e="left"===this.side?"<":"<=";return`
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${e} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${v1("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `}}class CJ{constructor(e,t,r){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=r,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[],a=[];for(let e=0;e<this.outputShape.length;e++)a.push(`${r[e]}`),e<this.cRank&&n.push(`${r[e]}`);e=n.join(),t=a.join()}return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `}}const C0=Sl({opType:TJ.SELU}),C1=Sl({opType:TJ.SIGMOID}),C2=Sl({opType:TJ.SIGN}),C3=Sl({opType:TJ.SIN}),C4=Sl({opType:TJ.SINH}),C6=Sl({opType:TJ.SOFTPLUS});class C5{constructor(e,t,r,n,a,i){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;let s=Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[a[e]];this.outputShape=s,this.newDim=a,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${vJ(n.length)}, paddedXShapeStrides : ${vJ(i)}, `,r.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.shaderKey=`spaceToBatchND_${a}`}getUserCode(){let e=vJ(this.outputShape.length),t=SZ(this.newDim);return`
      ${v6(this.paddedXShape,"PaddedX")}
      ${v1("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${CD(this.xShape,!0)}
        }
      }
    `}}class C8{constructor(e,t,r){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=r,this.dispatchLayout=ws([t]),this.dispatch=wr(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${vY("&result[outIndex]","value",this.type)}
      }
    }
  `}}class C7{constructor(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=ws(t),this.dispatch=wr(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${vY("&result[segmentId]","1","int32")}
      }
    }
  `}}class C9{constructor(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=ws(e),this.dispatch=wr(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${"float32"===this.type?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `}}function Ie(e,t,r,n=!1,a){let i,s=r0.sizeFromShape(e.shape)/e.shape[0],o=e.dtype,l=r0.sizeFromShape(t.shape),u=a.readSync(r.dataId),d=l>0?u[l-1]+1:0,h=e.shape.slice();h[0]=d;let p=l*s,c=Se({backend:a,attrs:{shape:h,value:0,dtype:o}});i=new C8(h,p,o);let f=[{type:"int32",data:[s]},{type:"int32",data:[p]}],m=a.runWebGPUProgram(i,[e,t,r],o,f,c);if(n)return m;let g=Se({backend:a,attrs:{shape:[d],value:0,dtype:"int32"}});i=new C7(d,r.shape);let y=a.runWebGPUProgram(i,[r],"int32",null,g),x=Se({backend:a,attrs:{shape:h,value:0,dtype:o}});i=new C9(h,o),f=[{type:"int32",data:[s]}];let b=a.runWebGPUProgram(i,[m,y],o,f,x);return a.disposeData(m.dataId),a.disposeData(y.dataId),b}class It{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[n]*t[n];this.outputShape=r,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let a=0;a<e;a++)n.push(`(${r[a]} % ${t}aShape[${a}])`);return n.join()}(this.rank,"uniforms.");return`
      ${v1("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `}}function Ir(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reps:i}=n;if(r.shouldExecuteOnCPU([a])||"string"===a.dtype||a.shape.length>=5){let e=r.readSync(a.dataId),t="string"===a.dtype?e.map(e=>r0.decodeString(e)):e,n=SU(iW(a.shape,a.dtype,t),i);return r.makeTensorInfo(n.shape,n.dtype,n.values)}let s=new It(a.shape,i);return r.runWebGPUProgram(s,[a],a.dtype)}const In=Sl({opType:TJ.SQRT}),Ia=Su({opType:TZ.SQUARED_DIFFERENCE});class Ii{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);let t=vJ(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e=this.outputShape.length,t="";if(1===e)t="coords * uniforms.strides + uniforms.begin";else{let e=0;t=this.outputShape.map((t,r)=>(e++,1===this.outputShape.length?`coords * uniforms.strides[${r}] + uniforms.begin[${r}]`:`coords[${e-1}] * uniforms.strides[${r}] + uniforms.begin[${r}]`)).join(",")}return`
       ${v1("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `}}const Is=Su({opType:TZ.SUB,cpuKernelImpl:Sz,supportsComplex:!0}),Io=Sl({opType:TJ.TAN}),Il=Sl({opType:TJ.TANH});class Iu{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${v1("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}}class Id{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${v1("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}}function Ih(e,t){null!==t&&e.disposeData(t.dataId)}function Ip(e){let t=1;for(;t<e;)t*=2;return t}class Ic{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ws(this.outputShape),this.dispatch=wr(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${v1("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}}class If{constructor(e,t,r){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=ws(e),this.dispatch=wr(this.dispatchLayout,e,this.workgroupSize),"float32"!==r&&"int32"!==r)throw Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${r} type.`);this.type=r,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`
    ${v1("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${vY("&result[flatIndex]","value",this.type)}
        }
      }
    }
  `}}for(const e of[{kernelName:rV,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i,bias:s,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:d,leakyreluAlpha:h}=n;return Sr({a:a,b:i,transposeA:l,transposeB:u,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:h,activation:d})}},{kernelName:"Abs",backendName:"webgpu",kernelFunc:SH},{kernelName:ek,backendName:"webgpu",kernelFunc:Sj},{kernelName:eC,backendName:"webgpu",kernelFunc:SK},{kernelName:"Add",backendName:"webgpu",kernelFunc:Sq},{kernelName:eI,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e;if(1===t.length)return Si({inputs:{x:t[0]},backend:r});let n=t.map(e=>e.dtype).reduce((e,t)=>nY(e,t)),a=new SX(t.map(e=>e.shape));return r.runWebGPUProgram(a,t,n)}},{kernelName:"All",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{keepDims:i,axis:s}=n;return S2(a,s,i,"all",r)}},{kernelName:"Any",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{keepDims:i,axis:s}=n;return S2(a,s,i,"any",r)}},{kernelName:eT,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=r0.parseAxisParam(i,a.shape),o=sl.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=SJ({inputs:{x:a},backend:r,attrs:{perm:o}})),s=sl.getInnerMostAxes(s.length,l.shape.length)),sl.assertAxesAreInnerMostDims("argMax",[s[0]],l.shape.length);let d=new S3(l.shape,s[0],"max"),h=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],p=r.runWebGPUProgram(d,[l],"int32",h);return u.forEach(e=>r.disposeData(e.dataId)),p}},{kernelName:e$,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=r0.parseAxisParam(i,a.shape),o=sl.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=SJ({inputs:{x:a},backend:r,attrs:{perm:o}})),s=sl.getInnerMostAxes(s.length,l.shape.length)),sl.assertAxesAreInnerMostDims("argMin",[s[0]],l.shape.length);let d=new S3(l.shape,s[0],"min"),h=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],p=r.runWebGPUProgram(d,[l],"int32",h);return u.forEach(e=>r.disposeData(e.dataId)),p}},{kernelName:eN,backendName:"webgpu",kernelFunc:S4},{kernelName:eE,backendName:"webgpu",kernelFunc:S6},{kernelName:eR,backendName:"webgpu",kernelFunc:S5},{kernelName:e_,backendName:"webgpu",kernelFunc:S8},{kernelName:eA,backendName:"webgpu",kernelFunc:S7},{kernelName:eO,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n,u=sl.computePool2DInfo(a.shape,i,s,1,o,l);return ka(a,u,"avg",r)}},{kernelName:eP,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=n,d=sl.computePool3DInfo(a.shape,i,s,[1,1,1],o,u,l),h=new kt(d,"avg"),p=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}];return r.runWebGPUProgram(h,[a],a.dtype,p)}},{kernelName:eD,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,d=sl.computePool3DInfo(i.shape,s,o,1,l,u),h=new ks(d),p=1/(d.filterDepth*d.filterHeight*d.filterWidth),c=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.effectiveFilterDepth-1-d.padInfo.front,d.effectiveFilterHeight-1-d.padInfo.top,d.effectiveFilterWidth-1-d.padInfo.left]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]},{type:"int32",data:[d.outDepth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"float32",data:[p]}];return r.runWebGPUProgram(h,[a],i.dtype,c)}},{kernelName:eF,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t;wu([a,i],"avgPoolGrad");let{filterSize:s,strides:o,pad:l}=n,u=sl.computePool2DInfo(i.shape,s,o,1,l),d=new ki(u),h=1/(u.filterHeight*u.filterWidth),p=[{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.effectiveFilterHeight-1-u.padInfo.top,u.effectiveFilterWidth-1-u.padInfo.left]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]},{type:"int32",data:[u.effectiveFilterHeight,u.effectiveFilterWidth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"float32",data:[h]}];return r.runWebGPUProgram(d,[a],i.dtype,p)}},{kernelName:eL,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i}=t,{transposeA:s,transposeB:o}=n;return Sr({a:a,b:i,transposeA:s,transposeB:o,backend:r})}},{kernelName:eM,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,crops:s}=n;r0.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=sl.getReshaped(a.shape,i,o),u=sl.getPermuted(l.length,i.length),d=sl.getReshapedPermuted(a.shape,i,o),h=sl.getSliceBeginCoords(s,i.length),p=sl.getSliceSize(d,s,i.length),c=[],f=St({inputs:{x:a},backend:r,attrs:{shape:l}}),m=SJ({inputs:{x:f},backend:r,attrs:{perm:u}}),g=St({inputs:{x:m},backend:r,attrs:{shape:d}}),y=ku({inputs:{x:g},backend:r,attrs:{begin:h,size:p}});return c.push(f),c.push(m),c.push(g),c.forEach(e=>r.disposeData(e.dataId)),y}},{kernelName:eB,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s}=n,o=r0.sizeFromShape(a.shape),l=r0.sizeFromShape(i.shape)>0,u=i.dtype,d=Se({backend:r,attrs:{shape:[s],value:0,dtype:u}}),h=new kp([o],l),p=[{type:"int32",data:[s]}],c=l?[a,i]:[a];return r.runWebGPUProgram(h,c,u,p,d)}},{kernelName:eU,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{s0:n,s1:a}=t;if(r.shouldExecuteOnCPU([n,a])){let e=r.tensorMap.get(n.dataId),t=r.tensorMap.get(a.dataId),i=e.values,s=t.values,o=sl.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return r.makeTensorInfo([o.length],"int32",Int32Array.from(o))}let i=r0.sizeFromShape(n.shape),s=r0.sizeFromShape(a.shape),o=new kc(Math.max(i,s)),l=[{type:"int32",data:[i]},{type:"int32",data:[s]}];return r.runWebGPUProgram(o,[n,a],"int32",l)}},{kernelName:eW,backendName:"webgpu",kernelFunc:function e(t){let{inputs:r,backend:n,attrs:a}=t,{x:i}=r,{dtype:s}=a;if("complex64"===s){if("complex64"===i.dtype)return Si({inputs:{x:i},backend:n});let t=u0(i.shape),r=e({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),a=Ss({inputs:{real:r,imag:t},backend:n});return t.dispose(),n.disposeData(r.dataId),a}if("complex64"===i.dtype){let t=km({inputs:{input:i},backend:n}),r=e({inputs:{x:t},backend:n,attrs:{dtype:s}});return n.disposeData(t.dataId),r}if(!r0.hasEncodingLoss(i.dtype,s)){let e=Si({inputs:{x:i},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if(n.shouldExecuteOnCPU([i])){let[e,t,r]=Sh(n.tensorMap.get(i.dataId).values,i.shape,i.dtype,s);return n.makeTensorInfo(e,t,r)}if("int32"===s){let e=new So(i.shape,TJ.TO_INT),t=n.runWebGPUProgram(e,[i],"int32");return{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}if("bool"===s){let e=n.makeTensorInfo([],"bool",r0.getTypedArrayFromDType("bool",1)),t=kf({inputs:{a:i,b:e},backend:n});return n.disposeData(e.dataId),t}throw Error(`Error in Cast: failed to cast ${i.dtype} to ${s}`)}},{kernelName:eV,backendName:"webgpu",kernelFunc:kg},{kernelName:eG,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{clipValueMin:s,clipValueMax:o}=a;return t=r0.sizeFromShape(i.shape)%4==0?new ky(i.shape):new kx(i.shape),n.runWebGPUProgram(t,[i],i.dtype,[{type:"float32",data:[s]},{type:"float32",data:[o]}])}},{kernelName:eH,backendName:"webgpu",kernelFunc:Ss},{kernelName:ej,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=r.tensorMap.get(n.dataId),i=new kb(n.shape),s=[kv(n,a.complexTensorInfos.real),kv(n,a.complexTensorInfos.imag)];return r.runWebGPUProgram(i,s,s[0].dtype)}},{kernelName:eK,backendName:"webgpu",kernelFunc:kk},{kernelName:eq,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,attrs:r,backend:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dataFormat:l,dilations:u,dimRoundingMode:d}=r,h=sl.convertConv2DDataFormat(l),p=sl.computeConv2DInfo(a.shape,i.shape,s,u,o,d,!1,h);return kN({x:a,filter:i,convInfo:p,backend:n})}},{kernelName:eX,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:d}=n,h=sl.convertConv2DDataFormat(l),p=sl.computeConv2DInfo(a.shape,d,s,1,o,u,!1,h),c=new kR(p),f=[{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]}];return r.runWebGPUProgram(c,[a,i],a.dtype,f)}},{kernelName:eY,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{dy:i,filter:s}=r,{inputShape:o,strides:l,pad:u,dataFormat:d,dimRoundingMode:h}=a,p=sl.convertConv2DDataFormat(d),c=sl.computeConv2DInfo(o,s.shape,l,1,u,h,!1,p),f=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.filterHeight-1-c.padInfo.top,c.filterWidth-1-c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.batchSize,c.outHeight,c.outWidth,c.outChannels]}];if(eb.getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==c.dataFormat)t=new kE(c);else{t=new kO(c);let e=c.inHeight*c.inWidth,r=c.inChannels,n=c.filterHeight*c.filterWidth*c.outChannels;f.push({type:"uint32",data:[e]},{type:"uint32",data:[r]},{type:"uint32",data:[n]})}return n.runWebGPUProgram(t,[i,s],"float32",f)}},{kernelName:eQ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n,u=sl.computeConv3DInfo(a.shape,i.shape,s,l,o),d=[u.padInfo.front,u.padInfo.top,u.padInfo.left],h=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[...d]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationDepth,u.dilationHeight,u.dilationWidth]}],p=new kF(u),c=nY(a.dtype,i.dtype);return r.runWebGPUProgram(p,[a,i],c,h)}},{kernelName:eZ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,filterShape:l}=n,u=sl.computeConv3DInfo(a.shape,l,s,1,o),d=new kA(u),h=[{type:"int32",data:[u.padInfo.front,u.padInfo.top,u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.batchSize]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.inDepth]},{type:"int32",data:[u.inHeight]},{type:"int32",data:[u.inWidth]}];return r.runWebGPUProgram(d,[a,i],i.dtype,h)}},{kernelName:eJ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,pad:o,inputShape:l}=n,u=sl.computeConv3DInfo(l,i.shape,s,1,o),d=new k_(u),h=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[u.filterDepth-1-u.padInfo.front,u.filterHeight-1-u.padInfo.top,u.filterWidth-1-u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.outChannels]}];return r.runWebGPUProgram(d,[a,i],a.dtype,h)}},{kernelName:"Cos",backendName:"webgpu",kernelFunc:kP},{kernelName:e0,backendName:"webgpu",kernelFunc:kD},{kernelName:e3,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{image:a,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=n,d=new kL(a.shape[3],i.shape,o,l);return r.runWebGPUProgram(d,[a,i,s],"float32",[{type:"float32",data:[u]}])}},{kernelName:e1,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return kU(T0.Prod,a,r,i,s,o)}},{kernelName:e2,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return kU(T0.Sum,a,r,i,s,o)}},{kernelName:e4,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s,binaryOutput:o}=n,l=1===a.shape.length,u=r0.sizeFromShape(i.shape)>0,d=i.dtype,h=l?[a.shape[0]]:[a.shape[0],a.shape[1]],p=Se({backend:r,attrs:{shape:l?[s]:[a.shape[0],s],value:0,dtype:d}}),c=new kp(h,u,o),f=[{type:"int32",data:[s]}],m=u?[a,i]:[a];return r.runWebGPUProgram(c,m,d,f,p)}},{kernelName:e6,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockSize:i,dataFormat:s}=n,o=a.shape[0],l="NHWC"===s?a.shape[1]:a.shape[2],u="NHWC"===s?a.shape[2]:a.shape[3],d="NHWC"===s?a.shape[3]:a.shape[1],h=l*i,p=u*i,c=d/(i*i),f=new kW("NHWC"===s?[o,h,p,c]:[o,c,h,p],s);return r.runWebGPUProgram(f,[a],a.dtype,[{type:"int32",data:[i]}])}},{kernelName:e8,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:d}=n,h=sl.computeConv2DInfo(a.shape,d,s,o,l,u,!0),p=new kj(h),c=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.inHeight]},{type:"int32",data:[h.inWidth]},{type:"int32",data:[h.batchSize]},{type:"int32",data:[h.outChannels/h.inChannels]}];return r.runWebGPUProgram(p,[a,i],"float32",c)}},{kernelName:e7,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:d}=n,h=sl.computeConv2DInfo(d,i.shape,s,o,l,u,!0),p=new kK(h),c=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.filterHeight-1-h.padInfo.top,h.filterWidth-1-h.padInfo.left]},{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.outChannels/h.inChannels]}];return r.runWebGPUProgram(p,[a,i],a.dtype,c)}},{kernelName:e5,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dataFormat:u,dilations:d,dimRoundingMode:h}=a,p=sl.convertConv2DDataFormat(u),c=d;null==c&&(c=[1,1]);let f=sl.computeConv2DInfo(i.shape,s.shape,o,c,l,h,!0,p),m=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],g="channelsLast"===f.dataFormat;return!g&&f.inHeight>16&&f.inWidth>16&&1===f.strideHeight&&1===f.strideWidth&&1===f.dilationWidth&&1===f.dilationHeight&&f.inChannels===f.outChannels?t=new kV(f.outShape,f.filterHeight,f.filterWidth):g&&f.outHeight>4&&f.outWidth>4&&f.strideWidth<=2&&f.inChannels===f.outChannels&&1===f.dilationHeight&&1===f.dilationWidth&&f.inChannels%4==0?(t=new kG(f),m.push({type:"int32",data:[t.virtualWidth]})):(t=new kH(f),m.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),n.runWebGPUProgram(t,[i,s],i.dtype,m)}},{kernelName:e9,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=[...n.shape,...n.shape],i=r0.sizeFromShape(n.shape),s=St({inputs:{x:n},backend:r,attrs:{shape:[i]}}),o=new kq(i),l=r.runWebGPUProgram(o,[s],s.dtype),u=St({inputs:{x:l},backend:r,attrs:{shape:a}});return r.disposeData(s.dataId),r.disposeData(l.dataId),u}},{kernelName:te,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n,u=sl.computeDilation2DInfo(a.shape,i.shape,s,o,"NHWC",l),d=[u.padInfo.top,u.padInfo.left],h=[{type:"int32",data:[u.filterHeight,u.filterWidth]},{type:"int32",data:[...d]},{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]}],p=new kX(u);return r.runWebGPUProgram(p,[a,i],a.dtype,h)}},{kernelName:"Dilation2DBackpropFilter",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=n,d=sl.computeDilation2DInfo(a.shape,i.shape,o,l,"NHWC",u),h=i.dtype,p=new kQ(d,i.shape,h),c=[{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[r0.sizeFromShape(d.outShape)]}],f=Se({backend:r,attrs:{shape:i.shape,value:0,dtype:h}});return r.runWebGPUProgram(p,[a,i,s],h,c,f)}},{kernelName:"Dilation2DBackpropInput",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=n,d=sl.computeDilation2DInfo(a.shape,i.shape,o,l,"NHWC",u),h=a.dtype,p=new kY(d,h),c=[{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[r0.sizeFromShape(d.outShape)]}],f=Se({backend:r,attrs:{shape:d.inShape,value:0,dtype:h}});return r.runWebGPUProgram(p,[a,i,s],h,c,f)}},{kernelName:tt,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{image:i}=r,{canvas:s,options:o}=a,[l,u]=i.shape.slice(0,2),{imageOptions:d}=o||{},h=(null==d?void 0:d.alpha)||1,p=n.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",c=[l,u],f=new kZ(c,i.dtype,p);s.width=u,s.height=l;let m="webgpu",g=s.getContext(m);g||(g=(t=new OffscreenCanvas(u,l)).getContext(m));let y=3===i.shape.length?i.shape[2]:1;g.configure({device:n.device,format:p,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});let x="int32",b=n.makeTensorInfo(c,x),v=n.tensorMap.get(b.dataId);if(v.resource=g.getCurrentTexture(),v.external=!0,n.runWebGPUProgram(f,[i],x,[{type:"uint32",data:[y]},{type:"float32",data:[h]}],b),t){let e=s.getContext("2d");if(!e)throw Error("Please make sure this canvas has only been used for 2d or webgpu context!");e.drawImage(t,0,0)}return n.disposeData(b.dataId),i}},{kernelName:tn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{equation:a}=n,{allDims:i,summedDims:s,idDims:o}=sl.decodeEinsumEquation(a,t.length);sl.checkEinsumDimSizes(i.length,o,t);let{path:l,steps:u}=sl.getEinsumComputePath(s,o),d=u.length,h=null,p=i.length,c=[];for(let e=0;e<d;++e){for(let n of u[e]){let e,{permutationIndices:a,expandDims:i}=sl.getEinsumPermutation(p,o[n]);sl.isIdentityPermutation(a)?e=t[n]:(e=SJ({inputs:{x:t[n]},backend:r,attrs:{perm:a}}),c.push(e));let s=e.shape.slice();for(let e=0;e<i.length;++e)s.splice(i[e],0,1);r0.arraysEqual(e.shape,s)||(e=St({inputs:{x:e},backend:r,attrs:{shape:s}}),c.push(e)),null===h?h=e:(h=kJ({inputs:{a:e,b:h},backend:r}),c.push(h))}e<d-1&&(l[e]>=0&&(h=k0({inputs:{x:h},backend:r,attrs:{axis:l[e]-(i.length-p),keepDims:!1}}),c.push(h)),p--)}for(let e of c)e!==h&&r.disposeData(e.dataId);return h}},{kernelName:"Elu",backendName:"webgpu",kernelFunc:k1},{kernelName:ta,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r}=e,{dy:n,y:a}=t,i=new Sa(TZ.ELU_DER,n.shape,a.shape);return r.runWebGPUProgram(i,[n,a],n.dtype)}},{kernelName:ti,backendName:"webgpu",kernelFunc:k2},{kernelName:"Erf",backendName:"webgpu",kernelFunc:k3},{kernelName:"Exp",backendName:"webgpu",kernelFunc:k4},{kernelName:ts,backendName:"webgpu",kernelFunc:k6},{kernelName:to,backendName:"webgpu",kernelFunc:k5},{kernelName:"FFT",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return k7(n,!1,r)}},{kernelName:tl,backendName:"webgpu",kernelFunc:Se},{kernelName:tu,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{let{image:r}=e,n=new k9(r.shape);return t.runWebGPUProgram(n,[r],r.dtype)}},{kernelName:rU,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{pixels:a}=t,{numChannels:i}=n;if(null==a)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let s="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,u="undefined"!=typeof HTMLCanvasElement&&a instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&a instanceof OffscreenCanvas,d="undefined"!=typeof ImageBitmap&&a instanceof ImageBitmap,[h,p]=s?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[p,h,i],f=eb.getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&s,m=s||l;if(d||u||m){let e;if(f)e=r.device.importExternalTexture({source:a});else{if(m){let e=eb.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==o||e!==Cn)&&(Cn=e,o=document.createElement("canvas").getContext("2d",{willReadFrequently:Cn})),o.canvas.width=h,o.canvas.height=p,o.drawImage(a,0,0,h,p),a=o.canvas}let t=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,n=r.textureManager.acquireTexture(c[1],c[0],"rgba8unorm",t);r.queue.copyExternalImageToTexture({source:a},{texture:n},[c[1],c[0]]),e=n}let t=r0.sizeFromShape(c),n=r0.computeStrides(c),s=new Cr(c,i,f),l=[{type:"uint32",data:[t]},{type:"uint32",data:[i]},{type:"uint32",data:[...n]}],u=r.makeTensorInfo([p,h],"int32");r.tensorMap.get(u.dataId).resource=e;let d=r.runWebGPUProgram(s,[u],"int32",l);return r.disposeData(u.dataId),d}let g=a.data,y=g;if(null!=i&&4!==i){y=new Uint8Array(a.width*a.height*i);let e=g.length,t=0;for(let r=0;r<e;r++)r%4<i&&(y[t++]=g[r])}let x=r.makeTensorInfo(c,"int32",new Int32Array(y));return r.uploadToGPU(x.dataId),x}},{kernelName:td,backendName:"webgpu",kernelFunc:Ce},{kernelName:th,backendName:"webgpu",kernelFunc:Ct},{kernelName:tp,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n,scale:a,offset:i,mean:s,variance:o}=e,{varianceEpsilon:l}=t,u=[n,s,o],d=null;null!=i&&(d=i.shape,u.push(i));let h=null;null!=a&&(h=a.shape,u.push(a));let p=new Ca(n.shape,s.shape,o.shape,d,h);return r.runWebGPUProgram(p,u,n.dtype,[{type:"float32",data:[l]}])}},{kernelName:rG,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:d,dilations:h,dimRoundingMode:p,activation:c,leakyreluAlpha:f}=n,m=sl.convertConv2DDataFormat(d),g=sl.computeConv2DInfo(a.shape,i.shape,l,h,u,p,!1,m);return kN({x:a,filter:i,convInfo:g,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:f,activation:c})}},{kernelName:rH,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=r,{strides:u,pad:d,dilations:h,dimRoundingMode:p,activation:c,leakyreluAlpha:f}=a,m=h;null==m&&(m=[1,1]),r0.assert(sl.eitherStridesOrDilationsAreOne(u,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);let g=sl.computeConv2DInfo(i.shape,s.shape,u,m,d,p,!0),y=[i,s],x=null!=o,b=null!=l;x&&y.push(o),b&&y.push(l);let v=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&1===g.dilationHeight&&1===g.dilationWidth&&g.inChannels%4==0?(t=new kG(g,x,c,b),v.push({type:"int32",data:[t.virtualWidth]})):(t=new kH(g,x,c,b),v.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),"leakyrelu"===c&&(v.push({type:"float32",data:[f]}),t.uniforms+=" alpha : f32,"),n.runWebGPUProgram(t,y,"float32",v)}},{kernelName:tf,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{params:n,indices:a}=t,i=a.shape,s=i[i.length-1],o=r0.sizeFromShape(n.shape),[l,u,d,h]=sl.prepareAndValidate(n,a),p=St({inputs:{x:a},backend:r,attrs:{shape:[u,s]}}),c=St({inputs:{x:n},backend:r,attrs:{shape:[r0.sizeFromShape(n.shape)/d,d]}});if(r.shouldExecuteOnCPU([n,a])||"string"===n.dtype){let e=Sb(r.readSync(a.dataId),r.bufferSync(n),n.dtype,u,s,d,h,n.shape,o);return r.makeTensorInfo(l,n.dtype,e.values)}let f=new Ci(s,[u,d]),m=[{type:"int32",data:[s]},{type:"int32",data:h}],g=r.runWebGPUProgram(f,[c,p],c.dtype,m),y=St({inputs:{x:g},backend:r,attrs:{shape:l}});return r.disposeData(p.dataId),r.disposeData(c.dataId),r.disposeData(g.dataId),y}},{kernelName:tc,backendName:"webgpu",kernelFunc:Co},{kernelName:tm,backendName:"webgpu",kernelFunc:Cl},{kernelName:tg,backendName:"webgpu",kernelFunc:Cu},{kernelName:ty,backendName:"webgpu",kernelFunc:Si},{kernelName:tx,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return k7(n,!0,r)}},{kernelName:tb,backendName:"webgpu",kernelFunc:kS},{kernelName:tv,backendName:"webgpu",kernelFunc:Cd},{kernelName:tw,backendName:"webgpu",kernelFunc:Ch},{kernelName:tS,backendName:"webgpu",kernelFunc:Cp},{kernelName:tk,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{alpha:i}=n,s=new So(a.shape,TJ.LEAKYRELU,"alpha : f32,");return r.runWebGPUProgram(s,[a],"float32",[{type:"float32",data:[i]}])}},{kernelName:tC,backendName:"webgpu",kernelFunc:Cc},{kernelName:tI,backendName:"webgpu",kernelFunc:Cf},{kernelName:tT,backendName:"webgpu",kernelFunc:function(e){let{backend:t,attrs:r}=e,{start:n,stop:a,num:i}=r,s=(a-n)/(i-1),o=new Cm(i);return t.runWebGPUProgram(o,[],"float32",[{type:"float32",data:[n]},{type:"float32",data:[s]}])}},{kernelName:t$,backendName:"webgpu",kernelFunc:Cy},{kernelName:"Log",backendName:"webgpu",kernelFunc:Cg},{kernelName:tN,backendName:"webgpu",kernelFunc:Cx},{kernelName:tE,backendName:"webgpu",kernelFunc:Cb},{kernelName:tR,backendName:"webgpu",kernelFunc:Cv},{kernelName:"LRN",backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{depthRadius:s,bias:o,alpha:l,beta:u}=a;t=s>16?new CS(i.shape):new Ck(i.shape,s);let d=[{type:"int32",data:[s]},{type:"float32",data:[o]},{type:"float32",data:[l]},{type:"float32",data:[u]}];return n.runWebGPUProgram(t,[i],i.dtype,d)}},{kernelName:tA,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:d}=n,h=new CC(a.shape);return r.runWebGPUProgram(h,[a,i,s],a.dtype,[{type:"int32",data:[o]},{type:"float32",data:[l]},{type:"float32",data:[u]},{type:"float32",data:[d]}])}},{kernelName:"Max",backendName:"webgpu",kernelFunc:kr},{kernelName:t_,backendName:"webgpu",kernelFunc:CI},{kernelName:tO,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n,u=sl.computePool2DInfo(a.shape,i,s,1,o,l);return ka(a,u,"max",r)}},{kernelName:tF,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i,output:s}=t;wu([i,s],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:d}=n,h=sl.computePool2DInfo(i.shape,o,l,1,u,d),p=new ke(h,"max",!0),c=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]}],f=r.runWebGPUProgram(p,[i],"int32",c),m=new CT(h);c=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]}];let g=r.runWebGPUProgram(m,[a,f],i.dtype,c);return r.disposeData(f.dataId),g}},{kernelName:tP,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=n,d=sl.computePool3DInfo(a.shape,i,s,[1,1,1],o,u,l),h=new kt(d,"max"),p=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}];return r.runWebGPUProgram(h,[a],a.dtype,p)}},{kernelName:tD,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,d=sl.computePool3DInfo(i.shape,s,o,[1,1,1],l,u),h=new kt(d,"max",!0),p=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}],c=r.runWebGPUProgram(h,[i],"int32",p),f=new C$(d);p=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.effectiveFilterDepth-1-d.padInfo.front,d.effectiveFilterHeight-1-d.padInfo.top,d.effectiveFilterWidth-1-d.padInfo.left]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]},{type:"int32",data:[d.outDepth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]}];let m=r.runWebGPUProgram(f,[a,c],i.dtype,p);return r.disposeData(c.dataId),m}},{kernelName:tL,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{filterSize:a,strides:i,pad:s,includeBatchInIndex:o}=n,{x:l}=t;r0.assert(4===l.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${l.shape.length}.`);let u=[1,1];r0.assert(sl.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let d=sl.computePool2DInfo(l.shape,a,i,u,s),h=[{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterHeight,d.effectiveFilterWidth]}],p=new ke(d,"max",!1),c=r.runWebGPUProgram(p,[l],l.dtype,h);return p=new ke(d,"max",!0,!0,o),[c,r.runWebGPUProgram(p,[l],"int32",h)]}},{kernelName:tM,backendName:"webgpu",kernelFunc:kn},{kernelName:"Min",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return S2(a,i,s,"min",r)}},{kernelName:tB,backendName:"webgpu",kernelFunc:CN},{kernelName:tz,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{paddings:a,mode:i}=t,s=a.map(e=>({type:"int32",data:[e[0],e[1]]})),o=new CE(n.shape,a,i);return r.runWebGPUProgram(o,[n],n.dtype,s)}},{kernelName:"Mod",backendName:"webgpu",kernelFunc:CR},{kernelName:tU,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{numSamples:i,seed:s,normalized:o}=n,l=o?a:CO({inputs:{logits:a},backend:r,attrs:{dim:a.shape.length-1}}),u=l.shape[0],d=l.shape[1],h=new CA(u,i),p=r.runWebGPUProgram(h,[l],"int32",[{type:"float32",data:[s]},{type:"int32",data:[d]}]);return o||r.disposeData(l.dataId),p}},{kernelName:tW,backendName:"webgpu",kernelFunc:kJ},{kernelName:"Neg",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t;if(r.shouldExecuteOnCPU([n])){let[e,t]=SR(r.tensorMap.get(n.dataId).values,n.shape,n.dtype);return r.makeTensorInfo(t,n.dtype,e)}let a=new So(n.shape,TJ.NEG);return r.runWebGPUProgram(a,[n],n.dtype)}},{kernelName:tG,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=n,u=r.readSync(a.dataId),d=r.readSync(i.dataId),{selectedIndices:h}=pQ.nonMaxSuppressionV3Impl(u,d,s,o,l);return r.makeTensorInfo([h.length],"int32",new Int32Array(h))}},{kernelName:tj,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=n,d=r.readSync(a.dataId),h=r.readSync(i.dataId),{selectedIndices:p,selectedScores:c}=pQ.nonMaxSuppressionV5Impl(d,h,s,o,l,u);return[r.makeTensorInfo([p.length],"int32",new Int32Array(p)),r.makeTensorInfo([c.length],"float32",new Float32Array(c))]}},{kernelName:tV,backendName:"webgpu",kernelFunc:kf},{kernelName:tq,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{indices:a}=t,{dtype:i,depth:s,onValue:o,offValue:l}=n,u=r0.sizeFromShape(a.shape),d=new CF(u,s),h=St({inputs:{x:a},backend:r,attrs:{shape:[u]}}),p=r.runWebGPUProgram(d,[h],i,[{type:"float32",data:[o]},{type:"float32",data:[l]}]);r.disposeData(h.dataId);let c=St({inputs:{x:p},backend:r,attrs:{shape:[...a.shape,s]}});return r.disposeData(p.dataId),c}},{kernelName:tK,backendName:"webgpu",kernelFunc:function e(t){let{inputs:r,backend:n}=t,{x:a}=r;if("string"===a.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==a.dtype)return Se({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:n});{let t=km({inputs:{input:a},backend:n}),r=e({inputs:{x:t},backend:n}),i=kS({inputs:{input:a},backend:n}),s=CP({inputs:{x:i},backend:n}),o=Ss({inputs:{real:r,imag:s},backend:n});return n.disposeData(t.dataId),n.disposeData(r.dataId),n.disposeData(i.dataId),n.disposeData(s.dataId),o}}},{kernelName:tX,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n;if(1===t.length)return k6({inputs:{input:t[0]},backend:r,attrs:{dim:a}});let i=t[0].shape,s=t[0].dtype;t.forEach(e=>{r0.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r0.assert(s===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=kk({inputs:t.map(e=>{let t=k6({inputs:{input:e},backend:r,attrs:{dim:a}});return o.push(t),t}),backend:r,attrs:{axis:a}});return o.forEach(e=>r.disposeData(e.dataId)),l}},{kernelName:tY,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{paddings:i,constantValue:s}=n;if(i.every(e=>r0.arraysEqual(e,[0,0])))return Si({inputs:{x:a},backend:r});if(0===r0.sizeFromShape(a.shape))return Se({backend:r,attrs:{shape:i.map((e,t)=>e[0]+a.shape[t]+e[1]),value:s,dtype:a.dtype}});let o=[{type:"float32",data:[s]}];i.map(e=>o.push({type:"int32",data:[e[0],e[1]]}));let l=new CL(a.shape,i);return r.runWebGPUProgram(l,[a],a.dtype,o)}},{kernelName:"Pow",backendName:"webgpu",kernelFunc:CM},{kernelName:tQ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n,alpha:a}=t,i=new Sa(TZ.PRELU,n.shape,a.shape);return r.runWebGPUProgram(i,[n,a],"float32")}},{kernelName:tZ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return S2(a,i,s,"prod",r)}},{kernelName:t2,backendName:"webgpu",kernelFunc:e=>{let{backend:t,attrs:r}=e,{start:n,stop:a,step:i,dtype:s}=r,o=SO(n,a,i,s);return t.makeTensorInfo([o.length],s,o)}},{kernelName:t3,backendName:"webgpu",kernelFunc:km},{kernelName:tr,backendName:"webgpu",kernelFunc:CB},{kernelName:t4,backendName:"webgpu",kernelFunc:Cz},{kernelName:t6,backendName:"webgpu",kernelFunc:CU},{kernelName:rt,backendName:"webgpu",kernelFunc:CW},{kernelName:t5,backendName:"webgpu",kernelFunc:St},{kernelName:t9,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,size:s,halfPixelCenters:o}=n,[l,u]=s,d=[{type:"float32",data:[i&&l>1?1:0,i&&u>1?1:0]},{type:"float32",data:[.5*!!o]}],h=new CV(a.shape,l,u);return r.runWebGPUProgram(h,[a],"float32",d)}},{kernelName:re,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,[,o,l]=a.shape,[,u,d]=i.shape,h=[s&&u>1?o-1:o,s&&d>1?l-1:l],p=[s&&u>1?u-1:u,s&&d>1?d-1:d],c=h[0]/p[0],f=h[1]/p[1],m=1/c,g=1/f,y=2*Math.ceil(m)+2,x=2*Math.ceil(g)+2,b=new CG(a.shape,s),v=[{type:"int32",data:h},{type:"int32",data:p},{type:"float32",data:[c]},{type:"float32",data:[f]},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"int32",data:[y]},{type:"int32",data:[x]}];return r.runWebGPUProgram(b,[i],i.dtype,v)}},{kernelName:t8,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n,[l,u]=o,d=[{type:"float32",data:[i&&l>1?1:0,i&&u>1?1:0]},{type:"float32",data:[.5*!!i]}],h=new CH(a.shape,l,u,s);return r.runWebGPUProgram(h,[a],a.dtype,d)}},{kernelName:t7,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,[,o,l]=a.shape,[,u,d]=i.shape,h=[s&&u>1?o-1:o,s&&d>1?l-1:l],p=[s&&u>1?u-1:u,s&&d>1?d-1:d],c=h[0]/p[0],f=h[1]/p[1],m=1/c,g=1/f,y=2*Math.ceil(m)+2,x=2*Math.ceil(g)+2,b=new Cj(a.shape,s),v=[{type:"int32",data:h},{type:"int32",data:p},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"int32",data:[y]},{type:"int32",data:[x]}];return r.runWebGPUProgram(b,[i],i.dtype,v)}},{kernelName:rr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dims:i}=n,s=a.shape.length;if(0===s)return Si({inputs:{x:a},backend:r});let o=a.shape,l=[1,1,1,1];o.forEach((e,t)=>{l[t+4-s]=e});let u=r0.parseAxisParam(i,a.shape),d=[0,0,0,0];u.forEach(e=>{d[e+4-s]=1});let h=[{type:"int32",data:d}],p=St({inputs:{x:a},backend:r,attrs:{shape:l}}),c=new CK(l),f=r.runWebGPUProgram(c,[p],p.dtype,h);r.disposeData(p.dataId);let m=St({inputs:{x:f},backend:r,attrs:{shape:o}});return r.disposeData(f.dataId),m}},{kernelName:rW,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:n}=e,{radians:a,fillValue:i,center:s}=t,o=new Cq(n.shape,i),[l,u]=sl.getImageCenter(s,n.shape[1],n.shape[2]),d=[{type:"float32",data:[l]},{type:"float32",data:[u]},{type:"float32",data:[Math.sin(a)]},{type:"float32",data:[Math.cos(a)]}];return"number"==typeof i?d.push({type:"float32",data:[Number.parseFloat(i.toFixed(2))]}):d.push({type:"float32",data:i}),r.runWebGPUProgram(o,[n],n.dtype,d)}},{kernelName:rn,backendName:"webgpu",kernelFunc:CX},{kernelName:ra,backendName:"webgpu",kernelFunc:CY},{kernelName:ri,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{indices:a,updates:i}=t,{shape:s}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:h}=sl.calculateShapes(i,a,s),p=[h/u,u];if(0===h)return r.makeTensorInfo(s,a.dtype);let c=St({inputs:{x:a},backend:r,attrs:{shape:[l,o]}}),f=St({inputs:{x:i},backend:r,attrs:{shape:[l,u]}}),m=f.dtype,g=Se({backend:r,attrs:{shape:p,value:0,dtype:m}}),y=[{type:"int32",data:[o]},{type:"int32",data:d},{type:"int32",data:[r0.sizeFromShape(f.shape)]}],x=new CQ(f.shape,o,c.shape.length,f.shape.length,d,p,m),b=r.runWebGPUProgram(x,[f,c],m,y,g),v=St({inputs:{x:b},backend:r,attrs:{shape:s}});return r.disposeData(c.dataId),r.disposeData(f.dataId),r.disposeData(b.dataId),v}},{kernelName:ro,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sortedSequence:a,values:i}=t,{side:s}=n,o=new CZ([i.shape[0],i.shape[1]],s),l=[{type:"int32",data:[a.shape[1]]}];return r.runWebGPUProgram(o,[a,i],"int32",l)}},{kernelName:rl,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{condition:n,t:a,e:i}=t,s=new CJ(n.shape.length,a.shape,a.shape.length);return r.runWebGPUProgram(s,[n,a,i],nY(a.dtype,i.dtype))}},{kernelName:ru,backendName:"webgpu",kernelFunc:C0},{kernelName:rc,backendName:"webgpu",kernelFunc:C1},{kernelName:rp,backendName:"webgpu",kernelFunc:C2},{kernelName:"Sin",backendName:"webgpu",kernelFunc:C3},{kernelName:rh,backendName:"webgpu",kernelFunc:C4},{kernelName:rd,backendName:"webgpu",kernelFunc:ku},{kernelName:rz,backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:r}){let{x:n}=e,a=new So(n.shape,TJ.STEP,"stepAlpha : f32,"),i=[{type:"float32",data:[t.alpha]}];return r.runWebGPUProgram(a,[n],n.dtype,i)}},{kernelName:r$,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{begin:s,end:o,strides:l,beginMask:u,endMask:d,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:c}=a,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:x,begin:b,end:v,strides:w}=s6.sliceInfo(i.shape,s,o,l,u,d,h,p,c);if(g)t=St({inputs:{x:i},backend:n,attrs:{shape:m}});else if(y||x){r0.assert(i.shape.length>=1,()=>`Input must have rank at least 1, got: ${i.shape.length}`);let e=s6.computeOutShape(b,v,w),r=ku({inputs:{x:i},backend:n,attrs:{begin:b,size:e}});t=St({inputs:{x:r},backend:n,attrs:{shape:m}}),n.disposeData(r.dataId)}else if(n.shouldExecuteOnCPU([i])){let e=n.readSync(i.dataId),r=SM(f,iW(i.shape,i.dtype,e),w,b);t=n.makeTensorInfo(m,i.dtype,r.values)}else{let e=new Ii(f),r=[{type:"int32",data:b},{type:"int32",data:w}],a=n.runWebGPUProgram(e,[i],i.dtype,r);t=St({inputs:{x:a},backend:n,attrs:{shape:m}}),n.disposeData(a.dataId)}return t}},{kernelName:rN,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{separator:a,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=n,{data:d,dataSplits:h}=t,[p,c]=SB(r.readSync(d.dataId),r.readSync(h.dataId),a,i,s,o,l,u);return[r.makeTensorInfo([p.length],"string",p),r.makeTensorInfo(h.shape,"int32",c)]}},{kernelName:rx,backendName:"webgpu",kernelFunc:CO},{kernelName:rf,backendName:"webgpu",kernelFunc:C6},{kernelName:rg,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,paddings:s}=n;r0.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);let u=l.map((e,t)=>e[0]+a.shape[t]+e[1]),d=sl.getReshaped(u,i,o,!1),h=sl.getPermuted(d.length,i.length,!1),p=sl.getReshapedPermuted(u,i,o,!1),c=r0.computeStrides(u),f=new C5(a.shape,u,l,d,h,c.length),m=[{type:"int32",data:d},{type:"int32",data:c}];l.map(e=>m.push({type:"int32",data:[e[0],e[1]]}));let g=r.runWebGPUProgram(f,[a],a.dtype,m),y=St({inputs:{x:g},backend:r,attrs:{shape:p}});return r.disposeData(g.dataId),y}},{kernelName:rw,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;return Ie(n,a,i,!1,r)}},{kernelName:rS,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;return Ie(n,a,i,!0,r)}},{kernelName:rk,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sparseIndices:a,sparseValues:i,defaultValue:s}=t,{outputShape:o}=n,{sliceRank:l,numUpdates:u,sliceSize:d,strides:h,outputSize:p}=sl.calculateShapes(i,a,o);if("string"===i.dtype){let e=r.bufferSync(a),t=SP(e,r.bufferSync(i),o,p,d,u,l,h,r0.decodeString(r.readSync(s.dataId)[0]),!1);return r.makeTensorInfo(o,t.dtype,t.values)}let c=[p/d,d],f=St({inputs:{x:a},backend:r,attrs:{shape:[u,l]}}),m=i.shape.length?St({inputs:{x:i},backend:r,attrs:{shape:[u,d]}}):Si({inputs:{x:i},backend:r}),g=m.dtype,y=r.makeTensorInfo([],g,r0.makeZerosTypedArray(1,g)),x=St({inputs:{x:s},backend:r,attrs:{shape:Array(c.length).fill(1)}}),b=Ir({inputs:{x:x},backend:r,attrs:{reps:c}}),v=[{type:"int32",data:[l]},{type:"int32",data:h},{type:"int32",data:[r0.sizeFromShape([u,d])]}];switch(u){case 0:break;case 1:{let e=new CQ([u,d],l,f.shape.length,m.shape.length,h,c,g,!1);r.runWebGPUProgram(e,[m,f],g,v,b)}break;default:{let e=new CQ([u,d],l,f.shape.length,y.shape.length,h,c,g,!1);r.runWebGPUProgram(e,[y,f],g,v,b)}{let e=new CQ([u,d],l,f.shape.length,m.shape.length,h,c,g);r.runWebGPUProgram(e,[m,f],g,v,b)}}let w=St({inputs:{x:b},backend:r,attrs:{shape:o}});return r.disposeData(f.dataId),r.disposeData(m.dataId),r.disposeData(x.dataId),r.disposeData(y.dataId),r.disposeData(b.dataId),w}},{kernelName:ry,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{numOrSizeSplits:i,axis:s}=n,o=r0.parseAxisParam(s,a.shape)[0],l=sl.prepareSplitSize(a,i,o),u=Array(a.shape.length).fill(0),d=a.shape.slice();return l.map(e=>{let t=[...d];t[o]=e;let n=ku({inputs:{x:a},backend:r,attrs:{begin:u,size:t}});return u[o]+=e,n})}},{kernelName:rm,backendName:"webgpu",kernelFunc:In},{kernelName:rI,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{let{x:r}=e,n=new So(r.shape,TJ.SQUARE);return t.runWebGPUProgram(n,[r],r.dtype)}},{kernelName:rC,backendName:"webgpu",kernelFunc:Ia},{kernelName:"Sub",backendName:"webgpu",kernelFunc:Is},{kernelName:"Sum",backendName:"webgpu",kernelFunc:k0},{kernelName:"Tan",backendName:"webgpu",kernelFunc:Io},{kernelName:rA,backendName:"webgpu",kernelFunc:Il},{kernelName:rs,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{tensor:a,indices:i,updates:s}=t,{}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:h}=sl.calculateShapes(s,i,a.shape),p=[h/u,u];if(0===h)return r.makeTensorInfo(a.shape,i.dtype);let c=[],f=St({inputs:{x:i},backend:r,attrs:{shape:[l,o]}});c.push(f);let m=St({inputs:{x:s},backend:r,attrs:{shape:[l,u]}});c.push(m);let g=St({inputs:{x:a},backend:r,attrs:{shape:p}});c.push(g);let y=Ir({inputs:{x:g},backend:r,attrs:{reps:Array(p.length).fill(1)}}),x=new CQ([l,u],o,f.shape.length,m.shape.length,d,p,a.dtype,!1),b=[{type:"int32",data:[o]},{type:"int32",data:d},{type:"int32",data:[r0.sizeFromShape([l,u])]}],v=r.runWebGPUProgram(x,[m,f],g.dtype,b,y);c.push(v);let w=St({inputs:{x:v},backend:r,attrs:{shape:a.shape}});return c.forEach(e=>r.disposeData(e.dataId)),w}},{kernelName:r_,backendName:"webgpu",kernelFunc:Ir},{kernelName:rO,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{k:i,sorted:s}=n,o=a.shape,l=o[o.length-1];if(r.shouldExecuteOnCPU([a])){let[e,t]=SW(r.readSync(a.dataId),o,a.dtype,i,s);return[r.makeTensorInfo(e.shape,e.dtype,e.values),r.makeTensorInfo(t.shape,t.dtype,t.values)]}if(0===i)return o[o.length-1]=0,[r.makeTensorInfo(o,a.dtype,[]),r.makeTensorInfo(o,"int32",[])];if(1===l)return[a,Se({attrs:{shape:o,dtype:"int32",value:0},backend:r})];let u=r0.sizeFromShape(o)/l,d=St({inputs:{x:a},attrs:{shape:[u,l]},backend:r}),h=Ip(i),p=Ip(l),c=null,f=()=>null===c?[d,d]:[d,c],m=(e,t,n)=>{let a=f(),i=new Iu(n),s=[{type:"int32",data:[l]},{type:"int32",data:[+(null===c)]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}],o=c;c=r.runWebGPUProgram(i,a,"int32",s),Ih(r,o)};for(let e=1;e<h;e*=2){let t=2*e;for(let r=e;r>=1;r/=2)m(t,r,[u,p])}for(let e=p;e>h;e/=2){let t=f(),n=new Id([u,e/2]),a=[{type:"int32",data:[l]},{type:"int32",data:[+(null===c)]},{type:"int32",data:[h]}],i=c;c=r.runWebGPUProgram(n,t,"int32",a),Ih(r,i);let s=h/2,o=2*s;for(let e=s;e>=1;e/=2)m(o,e,c.shape)}let g=c;c=ku({inputs:{x:c},backend:r,attrs:{begin:0,size:[u,i]}}),Ih(r,g);let y=Co({inputs:{x:d,indices:c},backend:r,attrs:{axis:1,batchDims:1}});Ih(r,d);let x=o.slice(0,-1);x.push(i),g=c,c=St({inputs:{x:c},attrs:{shape:x},backend:r}),Ih(r,g);let b=y;return y=St({inputs:{x:y},attrs:{shape:x},backend:r}),Ih(r,b),[y,c]}},{kernelName:rF,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{image:i,transforms:s}=r,{interpolation:o,fillMode:l,fillValue:u,outputShape:d}=a,[h,p,c,f]=i.shape,[m,g]=null!=d?d:[p,c],y=new Ic([h,m,g,f]);switch(l){case"constant":default:t=1;break;case"reflect":t=2;break;case"wrap":t=3;break;case"nearest":t=4}let x=[{type:"int32",data:["nearest"===o?1:2]},{type:"int32",data:[t]},{type:"float32",data:[u]}];return n.runWebGPUProgram(y,[i,s],"float32",x)}},{kernelName:rP,backendName:"webgpu",kernelFunc:SJ},{kernelName:rL,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{value:a}=t,{axis:i}=n;i<0&&(i+=a.shape.length);let s=a.shape.length,o=a.shape[i],l=Array(s-1),u=0;for(let e=0;e<s;e++)e!==i&&(l[u++]=a.shape[e]);let d=[],h=Array(s).fill(0),p=a.shape.slice();p[i]=1;let c=Array(o);for(let e=0;e<c.length;e++){h[i]=e;let t=ku({inputs:{x:a},backend:r,attrs:{begin:h,size:p}}),n=St({inputs:{x:t},backend:r,attrs:{shape:l}});c[e]=n,d.push(t)}return d.forEach(e=>r.disposeData(e.dataId)),c}},{kernelName:rM,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,segmentIds:i}=t,{numSegments:s}=n,o=a.shape.length,l=[],u=0,d=sl.getAxesPermutation([u],o),h=a;null!=d&&(l.push(h=SJ({inputs:{x:a},backend:r,attrs:{perm:d}})),u=sl.getInnerMostAxes(1,o)[0]);let p=sl.segment_util.computeOutShape(h.shape,u,s),c=r0.sizeFromShape([h.shape[u]]),f=St({inputs:{x:h},backend:r,attrs:{shape:[-1,c]}});l.push(f);let m=a.dtype,g=[f.shape[0],s],y=Se({backend:r,attrs:{shape:g,value:0,dtype:m}}),x=new If(f.shape,g,m),b=[{type:"int32",data:[s]},{type:"int32",data:[r0.sizeFromShape(f.shape)]}],v=r.runWebGPUProgram(x,[f,i],m,b,y),w=St({inputs:{x:v},backend:r,attrs:{shape:p}});l.push(v);let S=w;return null!=d&&(l.push(w),S=SJ({inputs:{x:S},backend:r,attrs:{perm:sl.getUndoAxesPermutation(d)}})),l.forEach(e=>r.disposeData(e.dataId)),S}},{kernelName:rB,backendName:"webgpu",kernelFunc:CP}])rJ(e);var Im=function(e,t){return(Im=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};function Ig(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}Im(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var Iy=function(){return(Iy=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function Ix(e,t,r,n){return new(r||(r=Promise))(function(a,i){function s(e){try{l(n.next(e))}catch(e){i(e)}}function o(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):((t=e.value)instanceof r?t:new r(function(e){e(t)})).then(s,o)}l((n=n.apply(e,t||[])).next())})}function Ib(e,t){var r,n,a,i,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){var l=[i,o];if(r)throw TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(a=2&l[0]?n.return:l[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,l[1])).done)return a;switch(n=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,n=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!(a=(a=s.trys).length>0&&a[a.length-1])&&(6===l[0]||2===l[0])){s=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){s.label=l[1];break}if(6===l[0]&&s.label<a[1]){s.label=a[1],a=l;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(l);break}a[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],n=0}finally{r=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}}}function Iv(e,t,r){if(r||2==arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))}var Iw=["nose","left_eye","right_eye","left_ear","right_ear","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle"],IS=["nose","left_eye_inner","left_eye","left_eye_outer","right_eye_inner","right_eye","right_eye_outer","left_ear","right_ear","mouth_left","mouth_right","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_pinky","right_pinky","left_index","right_index","left_thumb","right_thumb","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle","left_heel","right_heel","left_foot_index","right_foot_index"],Ik={left:[1,2,3,7,9,11,13,15,17,19,21,23,25,27,29,31],right:[4,5,6,8,10,12,14,16,18,20,22,24,26,28,30,32],middle:[0]},IC={left:[1,3,5,7,9,11,13,15],right:[2,4,6,8,10,12,14,16],middle:[0]},II=[[0,1],[0,2],[1,3],[2,4],[5,6],[5,7],[5,11],[6,8],[6,12],[7,9],[8,10],[11,12],[11,13],[12,14],[13,15],[14,16]],IT=[[0,1],[0,4],[1,2],[2,3],[3,7],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[11,23],[12,14],[14,16],[12,24],[13,15],[15,17],[16,18],[16,20],[15,17],[15,19],[15,21],[16,22],[17,19],[18,20],[23,25],[23,24],[24,26],[25,27],[26,28],[27,29],[28,30],[27,31],[28,32],[29,31],[30,32]];function I$(e){return e instanceof SVGAnimatedLength?e.baseVal.value:e}function IN(e){return Ix(this,void 0,void 0,function(){var t,r;return Ib(this,function(n){switch(n.label){case 0:return t=document.createElement("canvas"),e instanceof nj?[4,lc.toPixels(e,t)]:[3,2];case 1:return n.sent(),[3,3];case 2:t.width=I$(e.width),t.height=I$(e.height),r=t.getContext("2d"),e instanceof ImageData?r.putImageData(e,0,0):r.drawImage(e,0,0),n.label=3;case 3:return[2,t]}})})}function IE(e){return Ix(this,void 0,void 0,function(){var t,r,n,a,i,s;return Ib(this,function(o){switch(o.label){case 0:return e instanceof nj?(r=(t=e.shape.slice(0,2))[0],n=t[1],a=ImageData.bind,[4,lc.toPixels(e)]):[3,2];case 1:return[2,new(a.apply(ImageData,[void 0,o.sent(),n,r]))];case 2:return s=(i=document.createElement("canvas")).getContext("2d"),i.width=I$(e.width),i.height=I$(e.height),s.drawImage(e,0,0),[2,s.getImageData(0,0,i.width,i.height)]}})})}function IR(e){if(e<0||e>=256)throw Error("Mask value must be in range [0, 255] but got ".concat(e));if(!Number.isInteger(e))throw Error("Mask value must be an integer but got ".concat(e))}var IA={runtime:"mediapipe",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,modelType:"full"},I_=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return Ix(this,void 0,void 0,function(){return Ib(this,function(e){return[2,this.mask]})})},e.prototype.toImageData=function(){return Ix(this,void 0,void 0,function(){return Ib(this,function(e){return[2,IE(this.mask)]})})},e.prototype.toTensor=function(){return Ix(this,void 0,void 0,function(){return Ib(this,function(e){return[2,function(e){return Ix(this,void 0,void 0,function(){var t,r;return Ib(this,function(n){switch(n.label){case 0:return e instanceof SVGImageElement||e instanceof OffscreenCanvas?[4,IN(e)]:[3,2];case 1:return r=n.sent(),[3,3];case 2:r=e,n.label=3;case 3:return t=r,[2,lc.fromPixels(t,4)]}})})}(this.mask)]})})},e.prototype.getUnderlyingType=function(){return"canvasimagesource"},e}();function IO(e){return IR(e),"person"}var IF=function(){function e(e){var t,r=this;switch(this.width=0,this.height=0,this.selfieMode=!1,this.poseSolution=new(0,vV.Pose)({locateFile:function(t,r){if(e.solutionPath){var n=e.solutionPath.replace(/\/+$/,"");return"".concat(n,"/").concat(t)}return"".concat(r,"/").concat(t)}}),e.modelType){case"lite":t=0;break;case"heavy":t=2;break;default:t=1}this.poseSolution.setOptions({modelComplexity:t,smoothLandmarks:e.enableSmoothing,enableSegmentation:e.enableSegmentation,smoothSegmentation:e.smoothSegmentation,selfieMode:this.selfieMode}),this.poseSolution.onResults(function(e){if(r.height=e.image.height,r.width=e.image.width,null==e.poseLandmarks)r.poses=[];else{var t=r.translateOutput(e.poseLandmarks,e.poseWorldLandmarks);e.segmentationMask&&(t.segmentation={maskValueToLabel:IO,mask:new I_(e.segmentationMask)}),r.poses=[t]}})}return e.prototype.translateOutput=function(e,t){var r=this,n={keypoints:e.map(function(e,t){return{x:e.x*r.width,y:e.y*r.height,z:e.z,score:e.visibility,name:IS[t]}})};return null!=t&&(n.keypoints3D=t.map(function(e,t){return{x:e.x,y:e.y,z:e.z,score:e.visibility,name:IS[t]}})),n},e.prototype.estimatePoses=function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a;return Ib(this,function(i){switch(i.label){case 0:return t&&t.flipHorizontal&&t.flipHorizontal!==this.selfieMode&&(this.selfieMode=t.flipHorizontal,this.poseSolution.setOptions({selfieMode:this.selfieMode})),e instanceof nj?(a=ImageData.bind,[4,lc.toPixels(e)]):[3,2];case 1:return n=new(a.apply(ImageData,[void 0,i.sent(),e.shape[1],e.shape[0]])),[3,3];case 2:n=e,i.label=3;case 3:return e=n,[4,this.poseSolution.send({image:e},r)];case 4:return i.sent(),[2,this.poses]}})})},e.prototype.dispose=function(){this.poseSolution.close()},e.prototype.reset=function(){this.poseSolution.reset()},e.prototype.initialize=function(){return this.poseSolution.initialize()},e}();function IP(e){return e instanceof nj?{height:e.shape[0],width:e.shape[1]}:{height:e.height,width:e.width}}function ID(e){return e-2*Math.PI*Math.floor((e+Math.PI)/(2*Math.PI))}function IL(e){return e instanceof nj?e:lc.fromPixels(e)}function IM(e,t,r){return IB(r,"inputResolution"),[1/r.width*e[0][0]*t.width,1/r.height*e[0][1]*t.width,e[0][3]*t.width,1/r.width*e[1][0]*t.height,1/r.height*e[1][1]*t.height,e[1][3]*t.height,0,0]}function IB(e,t){r0.assert(0!==e.width,function(){return"".concat(t," width cannot be 0.")}),r0.assert(0!==e.height,function(){return"".concat(t," height cannot be 0.")})}function Iz(e,t,r){var n,a,i,s,o,l,u,d=r.rotationVectorStartKeypointIndex,h=r.rotationVectorEndKeypointIndex,p=e.locationData,c=p.relativeKeypoints[d].x*t.width,f=p.relativeKeypoints[d].y*t.height,m=p.relativeKeypoints[h].x*t.width,g=p.relativeKeypoints[h].y*t.height,y=2*Math.sqrt((m-c)*(m-c)+(g-f)*(g-f)),x=(a=e.locationData,i=r.rotationVectorStartKeypointIndex,s=r.rotationVectorEndKeypointIndex,n=r.rotationVectorTargetAngle?r.rotationVectorTargetAngle:Math.PI*r.rotationVectorTargetAngleDegree/180,o=a.relativeKeypoints[i].x*t.width,l=a.relativeKeypoints[i].y*t.height,u=a.relativeKeypoints[s].x*t.width,ID(n-Math.atan2(-(a.relativeKeypoints[s].y*t.height-l),u-o)));return{xCenter:c/t.width,yCenter:f/t.height,width:y/t.width,height:y/t.height,rotation:x}}function IU(e){if(16!==e.length)throw Error("Array length must be 16 but got ".concat(e.length));return[[e[0],e[1],e[2],e[3]],[e[4],e[5],e[6],e[7]],[e[8],e[9],e[10],e[11]],[e[12],e[13],e[14],e[15]]]}function IW(e,t,r,n,a,i,s){return e[t][a]*(e[r][i]*e[n][s]-e[r][s]*e[n][i])}function IV(e,t,r){var n=(t+1)%4,a=(t+2)%4,i=(t+3)%4,s=(r+1)%4,o=(r+2)%4,l=(r+3)%4;return IW(e,n,a,i,s,o,l)+IW(e,a,i,n,s,o,l)+IW(e,i,n,a,s,o,l)}function IG(e,t,r){void 0===r&&(r={ignoreRotation:!1});for(var n=[],a=0;a<e.length;a++){var i=e[a],s=i.x-.5,o=i.y-.5,l=r.ignoreRotation?0:t.rotation,u=Math.cos(l)*s-Math.sin(l)*o,d=Math.sin(l)*s+Math.cos(l)*o;u=u*t.width+t.xCenter,d=d*t.height+t.yCenter;var h=i.z*t.width,p=Iy({},i);p.x=u,p.y=d,p.z=h,n.push(p)}return n}function IH(e,t){var r=function(e,t,r,n){!1;var a=(n-r)/255;return{scale:a,offset:r-e*a}}(0,0,t[0],t[1]);return af(function(){return ij(iX(e,r.scale),r.offset)})}function Ij(e,t,r){var n,a,i,s,o,l,u,d,h,p,c,f=t.outputTensorSize,m=t.keepAspectRatio,g=t.borderMode,y=t.outputTensorFloatRange,x=IP(e),b=r?{xCenter:r.xCenter*x.width,yCenter:r.yCenter*x.height,width:r.width*x.width,height:r.height*x.height,rotation:r.rotation}:{xCenter:.5*x.width,yCenter:.5*x.height,width:x.width,height:x.height,rotation:0},v=function(e,t,r){if(void 0===r&&(r=!1),!r)return{top:0,left:0,right:0,bottom:0};var n=t.height,a=t.width;IB(t,"targetSize"),IB(e,"roi");var i,s,o=n/a,l=e.height/e.width,u=0,d=0;return o>l?(i=e.width,s=e.width*o,d=(1-l/o)/2):(i=e.height/o,s=e.height,u=(1-o/l)/2),e.width=i,e.height=s,{top:d,left:u,right:u,bottom:d}}(b,f,m),w=(n=x.width,a=x.height,i=b.width,s=b.height,o=Math.cos(b.rotation),l=Math.sin(b.rotation),u=b.xCenter,d=b.yCenter,h=1/n,p=1/a,(c=Array(16))[0]=i*o*1*h,c[1]=-s*l*h,c[2]=0,c[3]=(-.5*i*o*1+.5*s*l+u)*h,c[4]=i*l*1*p,c[5]=s*o*p,c[6]=0,c[7]=(-.5*s*o-.5*i*l*1+d)*p,c[8]=0,c[9]=0,c[10]=i*h,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,IU(c));return{imageTensor:af(function(){var t=IL(e),r=he(IM(w,x,f),[1,8]),n=pI.transform(lI(iV(t,"float32")),r,"bilinear","zero"===g?"constant":"nearest",0,[f.height,f.width]);return null!=y?IH(n,y):n}),padding:v,transformationMatrix:w}}function IK(e,t,r,n){return 1===n?.5*(e+t):e+(t-e)*r/(n-1)}function Iq(e){return null!=e&&null!=e.currentTime}function IX(e){for(var t={locationData:{relativeKeypoints:[]}},r=Number.MAX_SAFE_INTEGER,n=Number.MIN_SAFE_INTEGER,a=Number.MAX_SAFE_INTEGER,i=Number.MIN_SAFE_INTEGER,s=0;s<e.length;++s){var o=e[s];r=Math.min(r,o.x),n=Math.max(n,o.x),a=Math.min(a,o.y),i=Math.max(i,o.y),t.locationData.relativeKeypoints.push({x:o.x,y:o.y})}return t.locationData.relativeBoundingBox={xMin:r,yMin:a,xMax:n,yMax:i,width:n-r,height:i-a},t}function IY(e,t){return e.map(function(e){var r=Iy(Iy({},e),{x:e.x*t.width,y:e.y*t.height});return null!=e.z&&(r.z=e.z*t.width),r})}function IQ(e,t){var r=t.left,n=t.top,a=t.left+t.right,i=t.top+t.bottom;return e.map(function(e){return Iy(Iy({},e),{x:(e.x-r)/(1-a),y:(e.y-n)/(1-i),z:e.z/(1-a)})})}function IZ(e,t,r,n){return Ix(this,void 0,void 0,function(){var a,i,s,o,l,u,d;return Ib(this,function(h){switch(h.label){case 0:return r=r||t.flipHorizontally||!1,n=n||t.flipVertically||!1,a=e.size/t.numLandmarks,[4,e.data()];case 1:for(i=h.sent(),s=[],o=0;o<t.numLandmarks;++o){var p,c;l=o*a,(d={x:0,y:0}).x=r?t.inputImageWidth-i[l]:i[l],a>1&&(d.y=n?t.inputImageHeight-i[l+1]:i[l+1]),a>2&&(d.z=i[l+2]),a>3&&(d.score=(p=t.visibilityActivation,c=i[l+3],"none"===p?c:1/(1+Math.exp(-c)))),s.push(d)}for(u=0;u<s.length;++u)(d=s[u]).x=d.x/t.inputImageWidth,d.y=d.y/t.inputImageHeight,d.z=d.z/t.inputImageWidth/(t.normalizeZ||1);return[2,s]}})})}function IJ(e,t,r){var n,a=e.width,i=e.height,s=e.rotation;if(null==r.rotation&&null==r.rotationDegree||(n=s,null!=r.rotation?n+=r.rotation:null!=r.rotationDegree&&(n+=Math.PI*r.rotationDegree/180),s=ID(n)),0===s)e.xCenter=e.xCenter+a*r.shiftX,e.yCenter=e.yCenter+i*r.shiftY;else{var o=(t.width*a*r.shiftX*Math.cos(s)-t.height*i*r.shiftY*Math.sin(s))/t.width,l=(t.width*a*r.shiftX*Math.sin(s)+t.height*i*r.shiftY*Math.cos(s))/t.height;e.xCenter=e.xCenter+o,e.yCenter=e.yCenter+l}if(r.squareLong){var u=Math.max(a*t.width,i*t.height);a=u/t.width,i=u/t.height}else if(r.squareShort){var d=Math.min(a*t.width,i*t.height);a=d/t.width,i=d/t.height}return e.width=a*r.scaleX,e.height=i*r.scaleY,e}var I0=function(){function e(e){this.alpha=e,this.initialized=!1}return e.prototype.apply=function(e,t){var r;return this.initialized?r=null==t?this.storedValue+this.alpha*(e-this.storedValue):this.storedValue+this.alpha*t*Math.asinh((e-this.storedValue)/t):(r=e,this.initialized=!0),this.rawValue=e,this.storedValue=r,r},e.prototype.applyWithAlpha=function(e,t,r){return this.alpha=t,this.apply(e,r)},e.prototype.hasLastRawValue=function(){return this.initialized},e.prototype.lastRawValue=function(){return this.rawValue},e.prototype.reset=function(){this.initialized=!1},e}(),I1=function(){function e(e){this.frequency=e.frequency,this.minCutOff=e.minCutOff,this.beta=e.beta,this.thresholdCutOff=e.thresholdCutOff,this.thresholdBeta=e.thresholdBeta,this.derivateCutOff=e.derivateCutOff,this.x=new I0(this.getAlpha(this.minCutOff)),this.dx=new I0(this.getAlpha(this.derivateCutOff)),this.lastTimestamp=0}return e.prototype.apply=function(e,t,r){if(null==e)return e;var n=Math.trunc(t);if(this.lastTimestamp>=n)return e;0!==this.lastTimestamp&&0!==n&&(this.frequency=1/(1e-6*(n-this.lastTimestamp))),this.lastTimestamp=n;var a=this.x.hasLastRawValue()?(e-this.x.lastRawValue())*r*this.frequency:0,i=this.dx.applyWithAlpha(a,this.getAlpha(this.derivateCutOff)),s=this.minCutOff+this.beta*Math.abs(i),o=null!=this.thresholdCutOff?this.thresholdCutOff+this.thresholdBeta*Math.abs(i):null;return this.x.applyWithAlpha(e,this.getAlpha(s),o)},e.prototype.getAlpha=function(e){return 1/(1+this.frequency/(2*Math.PI*e))},e}(),I2=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,r){var n=this;if(null==e)return this.reset(),null;this.initializeFiltersIfEmpty(e);var a=1;if(!this.config.disableValueScaling){if(r<this.config.minAllowedObjectScale)return Iv([],e,!0);a=1/r}return e.map(function(e,r){var i=Iy(Iy({},e),{x:n.xFilters[r].apply(e.x,t,a),y:n.yFilters[r].apply(e.y,t,a)});return null!=e.z&&(i.z=n.zFilters[r].apply(e.z,t,a)),i})},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map(function(e){return new I1(t.config)}),this.yFilters=e.map(function(e){return new I1(t.config)}),this.zFilters=e.map(function(e){return new I1(t.config)}))},e}(),I3=function(){function e(e){this.config=e,this.window=[],this.lowPassFilter=new I0(1),this.lastValue=0,this.lastValueScale=1,this.lastTimestamp=-1}return e.prototype.apply=function(e,t,r){if(null==e)return e;var n,a=Math.trunc(t);if(this.lastTimestamp>=a)return e;if(-1===this.lastTimestamp)n=1;else{for(var i=e*r-this.lastValue*this.lastValueScale,s=a-this.lastTimestamp,o=i,l=s,u=(1+this.window.length)*(1e6/30),d=0,h=this.window;d<h.length;d++){var p=h[d];if(l+p.duration>u)break;o+=p.distance,l+=p.duration}var c=o/(1e-6*l);n=1-1/(1+this.config.velocityScale*Math.abs(c)),this.window.unshift({distance:i,duration:s}),this.window.length>this.config.windowSize&&this.window.pop()}return this.lastValue=e,this.lastValueScale=r,this.lastTimestamp=a,this.lowPassFilter.applyWithAlpha(e,n)},e}(),I4=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,r){var n=this;if(null==e)return this.reset(),null;var a=1;if(!this.config.disableValueScaling){if(r<this.config.minAllowedObjectScale)return Iv([],e,!0);a=1/r}return this.initializeFiltersIfEmpty(e),e.map(function(e,r){var i=Iy(Iy({},e),{x:n.xFilters[r].apply(e.x,t,a),y:n.yFilters[r].apply(e.y,t,a)});return null!=e.z&&(i.z=n.zFilters[r].apply(e.z,t,a)),i})},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map(function(e){return new I3(t.config)}),this.yFilters=e.map(function(e){return new I3(t.config)}),this.zFilters=e.map(function(e){return new I3(t.config)}))},e}(),I6=function(){function e(e){if(null!=e.velocityFilter)this.keypointsFilter=new I4(e.velocityFilter);else{if(null==e.oneEuroFilter)throw Error("Either configure velocityFilter or oneEuroFilter, but got "+"".concat(e,"."));this.keypointsFilter=new I2(e.oneEuroFilter)}}return e.prototype.apply=function(e,t,r,n,a){if(void 0===n&&(n=!1),null==e)return this.keypointsFilter.reset(),null;var i=null!=a?(a.width*r.width+a.height*r.height)/2:1,s=n?IY(e,r):e,o=this.keypointsFilter.apply(s,t,i);return n?o.map(function(e){var t=Iy(Iy({},e),{x:e.x/r.width,y:e.y/r.height});return null!=e.z&&(e.z=e.z/r.width),t}):o},e}(),I5=function(){function e(e){this.alpha=e.alpha}return e.prototype.apply=function(e){var t=this;if(null==e)return this.visibilityFilters=null,null;null!=this.visibilityFilters&&this.visibilityFilters.length===e.length||(this.visibilityFilters=e.map(function(e){return new I0(t.alpha)}));for(var r=[],n=0;n<e.length;++n){var a=e[n],i=Iy({},a);i.score=this.visibilityFilters[n].apply(a.score),r.push(i)}return r},e}(),I8={reduceBoxesInLowestlayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:5,minScale:.1484375,maxScale:.75,inputSizeHeight:224,inputSizeWidth:224,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,32,32,32],aspectRatios:[1],fixedAnchorSize:!0},I7={runtime:"tfjs",modelType:"full",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/detector/1",landmarkModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"},I9={maxPoses:1,flipHorizontal:!1},Te={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2254,numCoords:12,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:4,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:224,yScale:224,hScale:224,wScale:224,minScoreThresh:.5},Tt={shiftX:0,shiftY:0,scaleX:1.25,scaleY:1.25,squareLong:!0},Tr={outputTensorSize:{width:224,height:224},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},Tn={outputTensorSize:{width:256,height:256},keepAspectRatio:!0,outputTensorFloatRange:[0,1],borderMode:"zero"},Ta={numLandmarks:39,inputImageWidth:256,inputImageHeight:256,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},Ti={numLandmarks:39,inputImageWidth:1,inputImageHeight:1,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},Ts={kernelSize:7,minConfidenceToRefine:.5},To={alpha:.1},Tl={oneEuroFilter:{frequency:30,minCutOff:.05,beta:80,derivateCutOff:1,minAllowedObjectScale:1e-6}},Tu={oneEuroFilter:{frequency:30,minCutOff:.01,beta:10,derivateCutOff:1,minAllowedObjectScale:1e-6}},Td={oneEuroFilter:{frequency:30,minCutOff:.1,beta:40,derivateCutOff:1,minAllowedObjectScale:1e-6,disableValueScaling:!0}},Th={activation:"none"},Tp={combineWithPreviousRatio:.7},Tc=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return Ix(this,void 0,void 0,function(){return Ib(this,function(e){return[2,IN(this.mask)]})})},e.prototype.toImageData=function(){return Ix(this,void 0,void 0,function(){return Ib(this,function(e){return[2,IE(this.mask)]})})},e.prototype.toTensor=function(){return Ix(this,void 0,void 0,function(){return Ib(this,function(e){return[2,this.mask]})})},e.prototype.getUnderlyingType=function(){return"tensor"},e}();function Tf(e){return IR(e),"person"}var Tm,Tg,Ty,Tx,Tb,Tv,Tw,TS,Tk,TC,TI,TT,T$,TN,TE,TR,TA,T_,TO,TF,TP,TD,TL,TM,TB,Tz,TU,TW,TV,TG,TH,Tj,TK,Tq,TX,TY,TQ,TZ,TJ,T0,T1,T2,T3=function(){function e(e,t,r,n,a,i){this.detectorModel=e,this.landmarkModel=t,this.enableSmoothing=r,this.enableSegmentation=n,this.smoothSegmentation=a,this.modelType=i,this.regionOfInterest=null,this.prevFilteredSegmentationMask=null,this.anchors=function(e){null==e.reduceBoxesInLowestLayer&&(e.reduceBoxesInLowestLayer=!1),null==e.interpolatedScaleAspectRatio&&(e.interpolatedScaleAspectRatio=1),null==e.fixedAnchorSize&&(e.fixedAnchorSize=!1);for(var t=[],r=0;r<e.numLayers;){for(var n=[],a=[],i=[],s=[],o=r;o<e.strides.length&&e.strides[o]===e.strides[r];){var l=IK(e.minScale,e.maxScale,o,e.strides.length);if(0===o&&e.reduceBoxesInLowestLayer)i.push(1),i.push(2),i.push(.5),s.push(.1),s.push(l),s.push(l);else{for(var u=0;u<e.aspectRatios.length;++u)i.push(e.aspectRatios[u]),s.push(l);if(e.interpolatedScaleAspectRatio>0){var d=o===e.strides.length-1?1:IK(e.minScale,e.maxScale,o+1,e.strides.length);s.push(Math.sqrt(l*d)),i.push(e.interpolatedScaleAspectRatio)}}o++}for(var h=0;h<i.length;++h){var p=Math.sqrt(i[h]);n.push(s[h]/p),a.push(s[h]*p)}var c=0,f=0;if(e.featureMapHeight.length>0)c=e.featureMapHeight[r],f=e.featureMapWidth[r];else{var m=e.strides[r];c=Math.ceil(e.inputSizeHeight/m),f=Math.ceil(e.inputSizeWidth/m)}for(var g=0;g<c;++g)for(var y=0;y<f;++y)for(var x=0;x<n.length;++x){var b={xCenter:(y+e.anchorOffsetX)/f,yCenter:(g+e.anchorOffsetY)/c,width:0,height:0};e.fixedAnchorSize?(b.width=1,b.height=1):(b.width=a[x],b.height=n[x]),t.push(b)}r=o}return t}(I8);var s=d9(this.anchors.map(function(e){return e.width})),o=d9(this.anchors.map(function(e){return e.height})),l=d9(this.anchors.map(function(e){return e.xCenter})),u=d9(this.anchors.map(function(e){return e.yCenter}));this.anchorTensor={x:l,y:u,w:s,h:o},this.prevFilteredSegmentationMask=this.enableSegmentation?he([],[0,0]):null}return e.prototype.estimatePoses=function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s,o,l,u,d,h,p,c,f,m,g,y,x,b,v,w,S,k,C;return Ib(this,function(I){switch(I.label){case 0:return n=function(e){var t;if(null==(t=null==e?I9:Iy({},e)).maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1)throw Error("Multi-pose detection is not implemented yet. Please set maxPoses to 1.");return t}(t),null==e?(this.reset(),[2,[]]):(this.maxPoses=n.maxPoses,this.timestamp=null!=r?1e3*r:Iq(e)?1e6*e.currentTime:null,a=IP(e),i=af(function(){return iV(IL(e),"float32")}),null!=(s=this.regionOfInterest)?[3,2]:[4,this.detectPose(i)]);case 1:if(0===(o=I.sent()).length)return this.reset(),i.dispose(),[2,[]];l=o[0],s=this.poseDetectionToRoi(l,a),I.label=2;case 2:return[4,this.poseLandmarksByRoi(s,i)];case 3:return u=I.sent(),i.dispose(),null==u?(this.reset(),[2,[]]):(d=u.landmarks,h=u.auxiliaryLandmarks,p=u.poseScore,c=u.worldLandmarks,f=u.segmentationMask,g=(m=this.poseLandmarkFiltering(d,h,c,a)).actualLandmarksFiltered,y=m.auxiliaryLandmarksFiltered,x=m.actualWorldLandmarksFiltered,b=this.poseLandmarksToRoi(y,a),this.regionOfInterest=b,v=this.smoothSegmentation&&null!=f?this.poseSegmentationFiltering(f):f,null!=(w=null!=g?IY(g,a):null)&&w.forEach(function(e,t){e.name=IS[t]}),null!=(S=x)&&S.forEach(function(e,t){e.name=IS[t]}),k={score:p,keypoints:w,keypoints3D:S},null!==v&&(C=af(function(){return u4(dn(lI(v,2),[[0,0],[0,0],[0,1]]),[[0,0],[0,0],[0,2]],"symmetric")}),this.smoothSegmentation||am(v),k.segmentation={maskValueToLabel:Tf,mask:new Tc(C)}),[2,[k]])}})})},e.prototype.poseSegmentationFiltering=function(e){var t,r,n,a=this.prevFilteredSegmentationMask;return 0===a.size?this.prevFilteredSegmentationMask=e:(this.prevFilteredSegmentationMask="webgl"===ax()?(t=Tp.combineWithPreviousRatio.toFixed(2),r={variableNames:["prevMask","newMask"],outputShape:a.shape,userCode:"\n  void main() {\n      ivec2 coords = getOutputCoords();\n      int height = coords[0];\n      int width = coords[1];\n\n      float prevMaskValue = getPrevMask(height, width);\n      float newMaskValue = getNewMask(height, width);\n\n      /*\n      * Assume p := newMaskValue\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\n      * uncertainty alpha(p) =\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\n      * uncertainty]\n      *\n      * The following polynomial approximates uncertainty alpha as a\n      * function of (p + 0.5):\n      */\n      const float c1 = 5.68842;\n      const float c2 = -0.748699;\n      const float c3 = -57.8051;\n      const float c4 = 291.309;\n      const float c5 = -624.717;\n      float t = newMaskValue - 0.5;\n      float x = t * t;\n\n      float uncertainty =\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\n\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\n                             (uncertainty * ".concat(t,");\n\n      setOutput(outputValue);\n    }\n")},n=av(),af(function(){var t=n.compileAndRun(r,[a,e]);return n5.makeTensorFromDataId(t.dataId,t.shape,t.dtype)})):af(function(){var t=iQ(i7(e,.5)),r=i7(1,u3(1,iX(t,ij(5.68842,iX(t,ij(-.748699,iX(t,ij(-57.8051,iX(t,ij(291.309,iX(t,-624.717)))))))))));return ij(e,iX(i7(a,e),iX(r,Tp.combineWithPreviousRatio)))}),am(e)),am(a),this.prevFilteredSegmentationMask},e.prototype.dispose=function(){this.detectorModel.dispose(),this.landmarkModel.dispose(),am([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h,this.prevFilteredSegmentationMask])},e.prototype.reset=function(){this.regionOfInterest=null,this.enableSegmentation&&(am(this.prevFilteredSegmentationMask),this.prevFilteredSegmentationMask=he([],[0,0])),this.visibilitySmoothingFilterActual=null,this.visibilitySmoothingFilterAuxiliary=null,this.landmarksSmoothingFilterActual=null,this.landmarksSmoothingFilterAuxiliary=null},e.prototype.detectPose=function(e){return Ix(this,void 0,void 0,function(){var t,r,n,a,i,s,o,l,u;return Ib(this,function(d){switch(d.label){case 0:var h;return r=(t=Ij(e,Tr)).imageTensor,n=t.padding,h=a=this.detectorModel.predict(r),s=(i=af(function(){var e=af(function(){return[lU(h,[0,0,0],[1,-1,1]),lU(h,[0,0,1],[1,-1,-1])]}),t=e[0];return{boxes:d6(e[1]),logits:d6(t)}})).boxes,[4,function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s;return Ib(this,function(o){switch(o.label){case 0:var l;return n=e[0],l=e[1],a=af(function(){r.reverseOutputOrder?(n=d6(lU(l,[0,r.boxCoordOffset+0],[-1,1])),e=d6(lU(l,[0,r.boxCoordOffset+1],[-1,1])),i=d6(lU(l,[0,r.boxCoordOffset+2],[-1,1])),a=d6(lU(l,[0,r.boxCoordOffset+3],[-1,1]))):(e=d6(lU(l,[0,r.boxCoordOffset+0],[-1,1])),n=d6(lU(l,[0,r.boxCoordOffset+1],[-1,1])),a=d6(lU(l,[0,r.boxCoordOffset+2],[-1,1])),i=d6(lU(l,[0,r.boxCoordOffset+3],[-1,1]))),n=ij(iX(iq(n,r.xScale),t.w),t.x),e=ij(iX(iq(e,r.yScale),t.h),t.y),r.applyExponentialOnBoxSize?(a=iX(lC(iq(a,r.hScale)),t.h),i=iX(lC(iq(i,r.wScale)),t.w)):(a=iX(iq(a,r.hScale),t.h),i=iX(iq(i,r.wScale),t.h));var e,n,a,i,s=i7(e,iq(a,2)),o=i7(n,iq(i,2)),u=ij(e,iq(a,2)),d=ij(n,iq(i,2)),h=lk([sV(s,[r.numBoxes,1]),sV(o,[r.numBoxes,1]),sV(u,[r.numBoxes,1]),sV(d,[r.numBoxes,1])],1);if(r.numKeypoints)for(var p=0;p<r.numKeypoints;++p){var c=r.keypointCoordOffset+p*r.numValuesPerKeypoint,f=void 0,m=void 0;r.reverseOutputOrder?(f=d6(lU(l,[0,c],[-1,1])),m=d6(lU(l,[0,c+1],[-1,1]))):(m=d6(lU(l,[0,c],[-1,1])),f=d6(lU(l,[0,c+1],[-1,1])));var g=ij(iX(iq(f,r.xScale),t.w),t.x),y=ij(iX(iq(m,r.yScale),t.h),t.y);h=lk([h,sV(g,[r.numBoxes,1]),sV(y,[r.numBoxes,1])],1)}return h}),i=af(function(){var e=n;return r.sigmoidScore?(null!=r.scoreClippingThresh&&(e=lS(n,-r.scoreClippingThresh,r.scoreClippingThresh)),e=sG(e)):e}),[4,function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s,o,l,u,d,h,p,c,f;return Ib(this,function(m){switch(m.label){case 0:return n=[],[4,e.data()];case 1:return a=m.sent(),[4,t.data()];case 2:for(i=m.sent(),s=0;s<r.numBoxes;++s){var g,y,x,b,v,w;if(!(null!=r.minScoreThresh&&i[s]<r.minScoreThresh||(u=(g=a[(o=s*r.numCoords)+0],y=a[o+1],x=a[o+2],b=a[o+3],v=i[s],w=r.flipVertically,l={score:[v],ind:s,locationData:{relativeBoundingBox:{xMin:y,yMin:w?1-x:g,xMax:b,yMax:w?1-g:x,width:b-y,height:x-g}}}).locationData.relativeBoundingBox).width<0||u.height<0)){if(r.numKeypoints>0)for((d=l.locationData).relativeKeypoints=[],h=r.numKeypoints*r.numValuesPerKeypoint,p=0;p<h;p+=r.numValuesPerKeypoint)f={x:a[(c=o+r.keypointCoordOffset+p)+0],y:r.flipVertically?1-a[c+1]:a[c+1]},d.relativeKeypoints.push(f);n.push(l)}}return[2,n]}})})}(a,i,r)];case 1:return s=o.sent(),am([a,i]),[2,s]}})})}([o=i.logits,s],this.anchorTensor,Te)];case 1:return 0===(l=d.sent()).length?(am([r,a,o,s]),[2,l]):[4,function(e,t,r,n){return Ix(this,void 0,void 0,function(){var r,n,a,i,s;return Ib(this,function(o){switch(o.label){case 0:return e.sort(function(e,t){return Math.max.apply(Math,t.score)-Math.max.apply(Math,e.score)}),r=he(e.map(function(e){return[e.locationData.relativeBoundingBox.yMin,e.locationData.relativeBoundingBox.xMin,e.locationData.relativeBoundingBox.yMax,e.locationData.relativeBoundingBox.xMax]})),n=d9(e.map(function(e){return e.score[0]})),[4,pI.nonMaxSuppressionAsync(r,n,t,.3)];case 1:return[4,(a=o.sent()).array()];case 2:return i=o.sent(),s=e.filter(function(e,t){return i.indexOf(t)>-1}),am([r,n,a]),[2,s]}})})}(l,this.maxPoses,0)];case 2:return u=function(e,t){void 0===e&&(e=[]);for(var r=t.left,n=t.top,a=t.left+t.right,i=t.top+t.bottom,s=0;s<e.length;s++){var o=e[s],l=o.locationData.relativeBoundingBox,u=(l.xMin-r)/(1-a),d=(l.yMin-n)/(1-i),h=l.width/(1-a),p=l.height/(1-i);l.xMin=u,l.yMin=d,l.width=h,l.height=p,l.xMax=u+h,l.yMax=d+p;var c=o.locationData.relativeKeypoints;c&&c.forEach(function(e){var t=(e.x-r)/(1-a),s=(e.y-n)/(1-i);e.x=t,e.y=s})}return e}(d.sent(),n),am([r,a,o,s]),[2,u]}})})},e.prototype.poseDetectionToRoi=function(e,t){return IJ(Iz(e,t,{rotationVectorEndKeypointIndex:1,rotationVectorStartKeypointIndex:0,rotationVectorTargetAngleDegree:90}),t,Tt)},e.prototype.poseLandmarksByRoi=function(e,t){return Ix(this,void 0,void 0,function(){var r,n,a,i,s,o,l,u,d,h,p,c,f,m;return Ib(this,function(g){switch(g.label){case 0:if(r=IP(t),a=(n=Ij(t,Tn,e)).imageTensor,i=n.padding,s=n.transformationMatrix,"lite"!==this.modelType&&"full"!==this.modelType&&"heavy"!==this.modelType)throw Error("Model type must be one of lite, full or heavy,"+"but got ".concat(this.modelType));return o=["ld_3d","output_poseflag","activation_heatmap","world_3d"],this.enableSegmentation&&o.push("activation_segmentation"),l=this.landmarkModel.execute(a,o),[4,this.tensorsToPoseLandmarksAndSegmentation(l)];case 1:return null==(u=g.sent())?(am(l),am(a),[2,null]):(d=u.landmarks,h=u.auxiliaryLandmarks,p=u.poseScore,c=u.worldLandmarks,f=u.segmentationMask,[4,this.poseLandmarksAndSegmentationInverseProjection(r,e,i,s,d,h,c,f)]);case 2:return m=g.sent(),am(l),am(a),[2,Iy({poseScore:p},m)]}})})},e.prototype.poseLandmarksAndSegmentationInverseProjection=function(e,t,r,n,a,i,s,o){return Ix(this,void 0,void 0,function(){var l,u,d,h,p,c;return Ib(this,function(f){return l=IQ(a,r),u=IQ(i,r),d=IG(l,t),h=IG(u,t),p=function(e,t){for(var r=[],n=0;n<e.length;n++){var a=e[n],i=a.x,s=a.y,o=t.rotation,l=Math.cos(o)*i-Math.sin(o)*s,u=Math.sin(o)*i+Math.cos(o)*s,d=Iy({},a);d.x=l,d.y=u,r.push(d)}return r}(s,t),c=null,this.enableSegmentation&&(c=af(function(){var t=o.shape,r=t[0],a=t[1],i=he(IM(function(e){var t=IU(Array(16).fill(0));t[0][0]=IV(e,0,0),t[1][0]=-IV(e,0,1),t[2][0]=IV(e,0,2),t[3][0]=-IV(e,0,3),t[0][2]=IV(e,2,0),t[1][2]=-IV(e,2,1),t[2][2]=IV(e,2,2),t[3][2]=-IV(e,2,3),t[0][1]=-IV(e,1,0),t[1][1]=IV(e,1,1),t[2][1]=-IV(e,1,2),t[3][1]=IV(e,1,3),t[0][3]=-IV(e,3,0),t[1][3]=IV(e,3,1),t[2][3]=-IV(e,3,2),t[3][3]=IV(e,3,3);for(var r=e[0][0]*t[0][0]+e[1][0]*t[0][1]+e[2][0]*t[0][2]+e[3][0]*t[0][3],n=0;n<t.length;n++)for(var a=0;a<t.length;a++)t[n][a]/=r;return t}(n),{width:a,height:r},e),[1,8]),s=[1,r,a,1];return d6(pI.transform(sV(o,s),i,"bilinear","constant",0,[e.height,e.width]),[0,3])}),am(o)),[2,{landmarks:d,auxiliaryLandmarks:h,worldLandmarks:p,segmentationMask:c}]})})},e.prototype.tensorsToPoseLandmarksAndSegmentation=function(e){return Ix(this,void 0,void 0,function(){var t,r,n,a,i,s,o,l,u,d,h,p;return Ib(this,function(c){switch(c.label){case 0:return t=e[0],r=e[1],n=e[2],a=e[3],i=this.enableSegmentation?e[4]:null,[4,r.data()];case 1:return(s=c.sent()[0])<.5?[2,null]:[4,IZ(t,Ta)];case 2:return[4,function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s,o,l,u,d,h,p,c,f,m,g,y,x,b,v,w,S,k,C,I,T;return Ib(this,function($){switch($.label){case 0:if(i=(a=(n=d6(t,[0])).shape)[0],s=a[1],o=a[2],e.length!==o)throw Error("Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: "+"".concat(e.length,", heatmap length: ").concat(o));return l=[],[4,n.buffer()];case 1:for(u=$.sent(),d=0;d<e.length;d++)if(h=e[d],p=Iy({},h),l.push(p),c=Math.trunc(p.x*s),f=Math.trunc(p.y*i),!(c<0||c>=s||f<0||c>=i)){for(g=Math.max(0,c-(m=Math.trunc((r.kernelSize-1)/2))),y=Math.min(s,c+m+1),x=Math.max(0,f-m),b=Math.min(i,f+m+1),v=0,w=0,S=0,k=0,C=x;C<b;++C)for(I=g;I<y;++I)T=u.get(C,I,d),v+=T,k=Math.max(k,T),w+=I*T,S+=C*T;k>=r.minConfidenceToRefine&&v>0&&(p.x=w/s/v,p.y=S/i/v)}return n.dispose(),[2,l]}})})}(c.sent(),n,Ts)];case 3:return l=(o=c.sent()).slice(0,33),u=o.slice(33,35),[4,IZ(a,Ti)];case 4:var f;return d=c.sent().slice(0,33),h=function(e,t,r){void 0===r&&(r=!0);for(var n=[],a=0;a<e.length;a++){var i=Iy({},t[a]);r&&(i.score=e[a].score),n.push(i)}return n}(l,d,!0),p=this.enableSegmentation?(f=i,af(function(){var e=d6(f,[0]),t=e.shape[2];if(1===t){var r=e;switch(Th.activation){case"none":break;case"sigmoid":r=sG(r);break;case"softmax":throw Error("Softmax activation requires two channels.");default:throw Error("Activation not supported (".concat(Th.activation,")"))}return d6(r,[2])}throw Error("Unsupported number of tensor channels ".concat(t))})):null,[2,{landmarks:l,auxiliaryLandmarks:u,poseScore:s,worldLandmarks:h,segmentationMask:p}]}})})},e.prototype.poseLandmarksToRoi=function(e,t){return IJ(Iz(IX(e),t,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:90}),t,Tt)},e.prototype.poseLandmarkFiltering=function(e,t,r,n){var a,i,s;if(null!=this.timestamp&&this.enableSmoothing){var o=Iz(IX(t),n,{rotationVectorEndKeypointIndex:0,rotationVectorStartKeypointIndex:1,rotationVectorTargetAngleDegree:90});null==this.visibilitySmoothingFilterActual&&(this.visibilitySmoothingFilterActual=new I5(To)),a=this.visibilitySmoothingFilterActual.apply(e),null==this.visibilitySmoothingFilterAuxiliary&&(this.visibilitySmoothingFilterAuxiliary=new I5(To)),i=this.visibilitySmoothingFilterAuxiliary.apply(t),s=this.visibilitySmoothingFilterActual.apply(r),null==this.landmarksSmoothingFilterActual&&(this.landmarksSmoothingFilterActual=new I6(Tl)),a=this.landmarksSmoothingFilterActual.apply(a,this.timestamp,n,!0,o),null==this.landmarksSmoothingFilterAuxiliary&&(this.landmarksSmoothingFilterAuxiliary=new I6(Tu)),i=this.landmarksSmoothingFilterAuxiliary.apply(i,this.timestamp,n,!0,o),null==this.worldLandmarksSmoothingFilterActual&&(this.worldLandmarksSmoothingFilterActual=new I6(Td)),s=this.worldLandmarksSmoothingFilterActual.apply(r,this.timestamp)}else a=e,i=t,s=r;return{actualLandmarksFiltered:a,auxiliaryLandmarksFiltered:i,actualWorldLandmarksFiltered:s}},e}(),T4=function(){function e(e){!function(e){if(e.maxTracks<1)throw Error("Must specify 'maxTracks' to be at least 1, but "+"encountered ".concat(e.maxTracks));if(e.maxAge<=0)throw Error("Must specify 'maxAge' to be positive, but "+"encountered ".concat(e.maxAge));if(void 0!==e.keypointTrackerParams){if(e.keypointTrackerParams.keypointConfidenceThreshold<0||e.keypointTrackerParams.keypointConfidenceThreshold>1)throw Error("Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered "+"".concat(e.keypointTrackerParams.keypointConfidenceThreshold));if(e.keypointTrackerParams.minNumberOfKeypoints<1)throw Error("Must specify 'minNumberOfKeypoints' to be at least 1, but "+"encountered ".concat(e.keypointTrackerParams.minNumberOfKeypoints));for(var t=0,r=e.keypointTrackerParams.keypointFalloff;t<r.length;t++){var n=r[t];if(n<=0)throw Error("Must specify each keypoint falloff parameterto be positive "+"but encountered ".concat(n))}}}(e),this.tracks=[],this.maxTracks=e.maxTracks,this.maxAge=1e3*e.maxAge,this.minSimilarity=e.minSimilarity,this.nextID=1}return e.prototype.apply=function(e,t){this.filterOldTracks(t);var r=this.computeSimilarity(e);return this.assignTracks(e,r,t),this.updateTracks(t),e},e.prototype.getTracks=function(){return this.tracks.slice()},e.prototype.getTrackIDs=function(){return new Set(this.tracks.map(function(e){return e.id}))},e.prototype.filterOldTracks=function(e){var t=this;this.tracks=this.tracks.filter(function(r){return e-r.lastTimestamp<=t.maxAge})},e.prototype.assignTracks=function(e,t,r){for(var n=Array.from(Array(t[0].length).keys()),a=[],i=0,s=Array.from(Array(e.length).keys());i<s.length;i++){var o=s[i];if(0!==n.length){for(var l=-1,u=-1,d=0;d<n.length;d++){var h=n[d],p=t[o][h];p>=this.minSimilarity&&p>u&&(l=h,u=p)}if(l>=0){var c=this.tracks[l];c=Object.assign(c,this.createTrack(e[o],r,c.id)),e[o].id=c.id;var f=n.indexOf(l);n.splice(f,1)}else a.push(o)}else a.push(o)}for(var m=0;m<a.length;m++){o=a[m];var g=this.createTrack(e[o],r);this.tracks.push(g),e[o].id=g.id}},e.prototype.updateTracks=function(e){this.tracks.sort(function(e,t){return t.lastTimestamp-e.lastTimestamp}),this.tracks=this.tracks.slice(0,this.maxTracks)},e.prototype.createTrack=function(e,t,r){var n={id:r||this.nextTrackID(),lastTimestamp:t,keypoints:Iv([],e.keypoints,!0).map(function(e){return Iy({},e)})};return void 0!==e.box&&(n.box=Iy({},e.box)),n},e.prototype.nextTrackID=function(){var e=this.nextID;return this.nextID+=1,e},e.prototype.remove=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.tracks=this.tracks.filter(function(t){return!e.includes(t.id)})},e.prototype.reset=function(){this.tracks=[]},e}(),T6=function(e){function t(t){return e.call(this,t)||this}return Ig(t,e),t.prototype.computeSimilarity=function(e){var t=this;return 0===e.length||0===this.tracks.length?[[]]:e.map(function(e){return t.tracks.map(function(r){return t.iou(e,r)})})},t.prototype.iou=function(e,t){var r=Math.max(e.box.xMin,t.box.xMin),n=Math.max(e.box.yMin,t.box.yMin),a=Math.min(e.box.xMax,t.box.xMax),i=Math.min(e.box.yMax,t.box.yMax);if(r>=a||n>=i)return 0;var s=(a-r)*(i-n);return s/(e.box.width*e.box.height+t.box.width*t.box.height-s)},t}(T4),T5=function(e){function t(t){var r=e.call(this,t)||this;return r.keypointThreshold=t.keypointTrackerParams.keypointConfidenceThreshold,r.keypointFalloff=t.keypointTrackerParams.keypointFalloff,r.minNumKeyoints=t.keypointTrackerParams.minNumberOfKeypoints,r}return Ig(t,e),t.prototype.computeSimilarity=function(e){if(0===e.length||0===this.tracks.length)return[[]];for(var t=[],r=0;r<e.length;r++){for(var n=e[r],a=[],i=0,s=this.tracks;i<s.length;i++){var o=s[i];a.push(this.oks(n,o))}t.push(a)}return t},t.prototype.oks=function(e,t){for(var r=this.area(t.keypoints)+1e-6,n=0,a=0,i=0;i<e.keypoints.length;++i){var s=e.keypoints[i],o=t.keypoints[i];s.score<this.keypointThreshold||o.score<this.keypointThreshold||(a+=1,n+=Math.exp(-1*(Math.pow(s.x-o.x,2)+Math.pow(s.y-o.y,2))/(2*r*Math.pow(2*this.keypointFalloff[i],2))))}return a<this.minNumKeyoints?0:n/a},t.prototype.area=function(e){var t=this,r=e.filter(function(e){return e.score>t.keypointThreshold}),n=Math.min.apply(Math,Iv([1],r.map(function(e){return e.x}),!1)),a=Math.max.apply(Math,Iv([0],r.map(function(e){return e.x}),!1)),i=Math.min.apply(Math,Iv([1],r.map(function(e){return e.y}),!1));return(a-n)*(Math.max.apply(Math,Iv([0],r.map(function(e){return e.y}),!1))-i)},t}(T4);function T8(e){switch(e){case T2.BlazePose:return IS.reduce(function(e,t,r){return e[t]=r,e},{});case T2.PoseNet:case T2.MoveNet:return Iw.reduce(function(e,t,r){return e[t]=r,e},{});default:throw Error("Model ".concat(e," is not supported."))}}(u=T1||(T1={})).Keypoint="keypoint",u.BoundingBox="boundingBox",(d=T2||(T2={})).MoveNet="MoveNet",d.BlazePose="BlazePose",d.PoseNet="PoseNet",Object.freeze({__proto__:null,getKeypointIndexBySide:function(e){switch(e){case T2.BlazePose:return Ik;case T2.PoseNet:case T2.MoveNet:return IC;default:throw Error("Model ".concat(e," is not supported."))}},getAdjacentPairs:function(e){switch(e){case T2.BlazePose:return IT;case T2.PoseNet:case T2.MoveNet:return II;default:throw Error("Model ".concat(e," is not supported."))}},getKeypointIndexByName:T8});var T7=["SinglePose.Lightning","SinglePose.Thunder","MultiPose.Lightning"],T9={modelType:"SinglePose.Lightning",enableSmoothing:!0},$e={},$t={frequency:30,minCutOff:2.5,beta:300,derivateCutOff:2.5,thresholdCutOff:.5,thresholdBeta:5,disableValueScaling:!0},$r={maxTracks:18,maxAge:1e3,minSimilarity:.2,keypointTrackerParams:{keypointConfidenceThreshold:.3,keypointFalloff:[.026,.025,.025,.035,.035,.079,.079,.072,.072,.062,.062,.107,.107,.087,.087,.089,.089],minNumberOfKeypoints:4}},$n={maxTracks:18,maxAge:1e3,minSimilarity:.15,trackerParams:{}};function $a(e,t){var r,n,a,i;return e?t.width>t.height?(r=1,n=t.height/t.width,a=0,i=(t.width/2-t.height/2)/t.width):(r=t.width/t.height,n=1,a=(t.height/2-t.width/2)/t.height,i=0):t.width>t.height?(r=t.width/t.height,n=1,a=(t.height/2-t.width/2)/t.height,i=0):(r=1,n=t.height/t.width,a=0,i=(t.width/2-t.height/2)/t.width),{yMin:a,xMin:i,yMax:a+r,xMax:i+n,height:r,width:n}}function $i(e,t){var r={maxTracks:e.maxTracks,maxAge:e.maxAge,minSimilarity:e.minSimilarity};return null!=t.maxTracks&&(r.maxTracks=t.maxTracks),null!=t.maxAge&&(r.maxAge=t.maxAge),null!=t.minSimilarity&&(r.minSimilarity=t.minSimilarity),r}var $s=function(){function e(e,t){this.moveNetModel=e,this.modelInputResolution={height:0,width:0},this.keypointIndexByName=T8(T2.MoveNet),"SinglePose.Lightning"===t.modelType?(this.modelInputResolution.width=192,this.modelInputResolution.height=192):"SinglePose.Thunder"===t.modelType&&(this.modelInputResolution.width=256,this.modelInputResolution.height=256),this.multiPoseModel="MultiPose.Lightning"===t.modelType,this.multiPoseModel||(this.keypointFilter=new I2($t),this.cropRegionFilterYMin=new I0(.9),this.cropRegionFilterXMin=new I0(.9),this.cropRegionFilterYMax=new I0(.9),this.cropRegionFilterXMax=new I0(.9)),this.enableSmoothing=t.enableSmoothing,t.minPoseScore?this.minPoseScore=t.minPoseScore:this.minPoseScore=.25,t.multiPoseMaxDimension?this.multiPoseMaxDimension=t.multiPoseMaxDimension:this.multiPoseMaxDimension=256,this.enableTracking=t.enableTracking,this.multiPoseModel&&this.enableTracking&&(t.trackerType===T1.Keypoint?this.tracker=new T5(t.trackerConfig):t.trackerType===T1.BoundingBox&&(this.tracker=new T6(t.trackerConfig)),this.enableSmoothing&&(this.keypointFilterMap=new Map))}return e.prototype.runSinglePersonPoseModel=function(e){return Ix(this,void 0,void 0,function(){var t,r,n,a,i;return Ib(this,function(s){switch(s.label){case 0:if(4!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||1!==t.shape[1]||17!==t.shape[2]||3!==t.shape[3])throw t.dispose(),Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===ax()?[3,1]:(r=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:r=s.sent(),s.label=3;case 3:for(t.dispose(),n={keypoints:[],score:0},a=0,i=0;i<17;++i)n.keypoints[i]={y:r[3*i],x:r[3*i+1],score:r[3*i+2]},n.keypoints[i].score>.2&&(++a,n.score+=n.keypoints[i].score);return a>0&&(n.score/=a),[2,n]}})})},e.prototype.runMultiPersonPoseModel=function(e){return Ix(this,void 0,void 0,function(){var t,r,n,a,i,s,o,l;return Ib(this,function(u){switch(u.label){case 0:if(3!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||56!==t.shape[2])throw t.dispose(),Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===ax()?[3,1]:(r=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:r=u.sent(),u.label=3;case 3:for(t.dispose(),n=[],a=r.length/56,i=0;i<a;++i)for(n[i]={keypoints:[]},s=56*i+51,n[i].box={yMin:r[s],xMin:r[s+1],yMax:r[s+2],xMax:r[s+3],width:r[s+3]-r[s+1],height:r[s+2]-r[s]},o=56*i+55,n[i].score=r[o],n[i].keypoints=[],l=0;l<17;++l)n[i].keypoints[l]={y:r[56*i+3*l],x:r[56*i+3*l+1],score:r[56*i+3*l+2]};return[2,n]}})})},e.prototype.estimatePoses=function(e,t,r){return void 0===t&&(t=$e),Ix(this,void 0,void 0,function(){var n,a,i,s,o,l;return Ib(this,function(u){switch(u.label){case 0:var d;return t=null==(d=t)?$e:Iy({},d),null==e?(this.reset(),[2,[]]):(null==r?Iq(e)&&(r=1e6*e.currentTime):r*=1e3,a=IP(n=IL(e)),i=lI(n,0),e instanceof nj||n.dispose(),s=[],this.multiPoseModel?[3,2]:[4,this.estimateSinglePose(i,a,r)]);case 1:return s=u.sent(),[3,4];case 2:return[4,this.estimateMultiplePoses(i,a,r)];case 3:s=u.sent(),u.label=4;case 4:for(o=0;o<s.length;++o)for(l=0;l<s[o].keypoints.length;++l)s[o].keypoints[l].name=Iw[l],s[o].keypoints[l].y*=a.height,s[o].keypoints[l].x*=a.width;return[2,s]}})})},e.prototype.estimateSinglePose=function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s,o=this;return Ib(this,function(l){switch(l.label){case 0:return this.cropRegion||(this.cropRegion=$a(null==this.cropRegion,t)),n=af(function(){var t=he([[o.cropRegion.yMin,o.cropRegion.xMin,o.cropRegion.yMax,o.cropRegion.xMax]]),r=u0([1],"int32"),n=[o.modelInputResolution.height,o.modelInputResolution.width];return iV(pI.cropAndResize(e,t,r,n,"bilinear",0),"int32")}),e.dispose(),[4,this.runSinglePersonPoseModel(n)];case 1:if(a=l.sent(),n.dispose(),a.score<this.minPoseScore)return this.reset(),[2,[]];for(i=0;i<a.keypoints.length;++i)a.keypoints[i].y=this.cropRegion.yMin+a.keypoints[i].y*this.cropRegion.height,a.keypoints[i].x=this.cropRegion.xMin+a.keypoints[i].x*this.cropRegion.width;return null!=r&&this.enableSmoothing&&(a.keypoints=this.keypointFilter.apply(a.keypoints,r,1)),s=function(e,t,r,n){for(var a={},i=0;i<Iw.length;i++){var s=Iw[i];a[s]=[t[r[s]].y*n.height,t[r[s]].x*n.width]}if((t[r.left_hip].score>.2||t[r.right_hip].score>.2)&&(t[r.left_shoulder].score>.2||t[r.right_shoulder].score>.2)){var o=(a.left_hip[0]+a.right_hip[0])/2,l=(a.left_hip[1]+a.right_hip[1])/2,u=function(e,t,r,n,a){for(var i=["left_shoulder","right_shoulder","left_hip","right_hip"],s=0,o=0,l=0;l<i.length;l++)(c=Math.abs(n-r[i[l]][0]))>s&&(s=c),(f=Math.abs(a-r[i[l]][1]))>o&&(o=f);for(var u=0,d=0,h=0,p=Object.keys(r);h<p.length;h++){var c,f,m=p[h];!(e[t[m]].score<.2)&&((c=Math.abs(n-r[m][0]))>u&&(u=c),(f=Math.abs(a-r[m][1]))>d&&(d=f))}return[s,o,u,d]}(t,r,a,o,l),d=u[0],h=Math.max(1.9*u[1],1.9*d,1.2*u[2],1.2*u[3]),p=[o-(h=Math.min(h,Math.max(l,n.width-l,o,n.height-o))),l-h];if(h>Math.max(n.width,n.height)/2)return $a(null==e,n);var c=2*h;return{yMin:p[0]/n.height,xMin:p[1]/n.width,yMax:(p[0]+c)/n.height,xMax:(p[1]+c)/n.width,height:(p[0]+c)/n.height-p[0]/n.height,width:(p[1]+c)/n.width-p[1]/n.width}}return $a(null==e,n)}(this.cropRegion,a.keypoints,this.keypointIndexByName,t),this.cropRegion=this.filterCropRegion(s),[2,[a]]}})})},e.prototype.estimateMultiplePoses=function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s,o,l,u,d,h,p,c,f=this;return Ib(this,function(m){switch(m.label){case 0:return t.width>t.height?(a=this.multiPoseMaxDimension,i=Math.round(this.multiPoseMaxDimension*t.height/t.width),n=pI.resizeBilinear(e,[i,a]),o=a,s=dn(n,[[0,0],[0,(l=32*Math.ceil(i/32))-i],[0,0],[0,0]])):(a=Math.round(this.multiPoseMaxDimension*t.width/t.height),i=this.multiPoseMaxDimension,n=pI.resizeBilinear(e,[i,a]),o=32*Math.ceil(a/32),l=i,s=dn(n,[[0,0],[0,0],[0,o-a],[0,0]])),n.dispose(),e.dispose(),u=iV(s,"int32"),s.dispose(),[4,this.runMultiPersonPoseModel(u)];case 1:for(d=m.sent(),u.dispose(),d=d.filter(function(e){return e.score>=f.minPoseScore}),p=0;p<d.length;++p)for(h=0;h<d[p].keypoints.length;++h)d[p].keypoints[h].y*=l/i,d[p].keypoints[h].x*=o/a;if(this.enableTracking&&(this.tracker.apply(d,r),this.enableSmoothing)){for(p=0;p<d.length;++p)this.keypointFilterMap.has(d[p].id)||this.keypointFilterMap.set(d[p].id,new I2($t)),d[p].keypoints=this.keypointFilterMap.get(d[p].id).apply(d[p].keypoints,r,1);c=this.tracker.getTrackIDs(),this.keypointFilterMap.forEach(function(e,t){c.has(t)||f.keypointFilterMap.delete(t)})}return[2,d]}})})},e.prototype.filterCropRegion=function(e){if(e){var t=this.cropRegionFilterYMin.apply(e.yMin),r=this.cropRegionFilterXMin.apply(e.xMin),n=this.cropRegionFilterYMax.apply(e.yMax),a=this.cropRegionFilterXMax.apply(e.xMax);return{yMin:t,xMin:r,yMax:n,xMax:a,height:n-t,width:a-r}}return this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset(),null},e.prototype.dispose=function(){this.moveNetModel.dispose()},e.prototype.reset=function(){this.cropRegion=null,this.resetFilters()},e.prototype.resetFilters=function(){this.keypointFilter.reset(),this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset()},e}(),$o={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:{height:257,width:257}},$l=["MobileNetV1","ResNet50"],$u={MobileNetV1:[8,16],ResNet50:[16]},$d=[8,16,32],$h={MobileNetV1:[.5,.75,1],ResNet50:[1]},$p=[1,2,4],$c={maxPoses:1,flipHorizontal:!1},$f={maxPoses:5,flipHorizontal:!1,scoreThreshold:.5,nmsRadius:20},$m=[-123.15,-115.9,-103.06];function $g(e){return Math.floor(e/2)}var $y=function(){function e(e,t){this.priorityQueue=Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return -1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less($g(e),e);)this.exchange(e,$g(e)),e=$g(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var r=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=r},e}();function $x(e,t,r,n){return{y:n.get(e,t,r),x:n.get(e,t,r+17)}}function $b(e,t,r){var n=$x(e.heatmapY,e.heatmapX,e.id,r),a=n.y,i=n.x;return{x:e.heatmapX*t+i,y:e.heatmapY*t+a}}function $v(e,t,r,n){var a=r.x,i=r.y;return e.some(function(e){var r,s,o,l,u=e.keypoints;return r=u[n].y,s=u[n].x,(o=r-i)*o+(l=s-a)*l<=t})}var $w=Iw.reduce(function(e,t,r){return e[t]=r,e},{}),$S=[["nose","left_eye"],["left_eye","left_ear"],["nose","right_eye"],["right_eye","right_ear"],["nose","left_shoulder"],["left_shoulder","left_elbow"],["left_elbow","left_wrist"],["left_shoulder","left_hip"],["left_hip","left_knee"],["left_knee","left_ankle"],["nose","right_shoulder"],["right_shoulder","right_elbow"],["right_elbow","right_wrist"],["right_shoulder","right_hip"],["right_hip","right_knee"],["right_knee","right_ankle"]].map(function(e){var t=e[0],r=e[1];return[$w[t],$w[r]]}),$k=$S.map(function(e){return e[1]}),$C=$S.map(function(e){return e[0]});function $I(e,t,r,n){var a,i,s,o;return{y:(a=Math.round(e.y/t),i=r-1,a<0?0:a>i?i:a),x:(s=Math.round(e.x/t),o=n-1,s<0?0:s>o?o:s)}}function $T(e,t){return{x:e.x+t.x,y:e.y+t.y}}function $$(e,t,r,n,a,i,s,o){void 0===o&&(o=2);for(var l,u,d=n.shape,h=d[0],p=d[1],c={y:t.y,x:t.x},f=$T(c,(l=$I(c,i,h,p),u=s.shape[2]/2,{y:s.get(l.y,l.x,e),x:s.get(l.y,l.x,u+e)})),m=0;m<o;m++){var g=$I(f,i,h,p),y=$x(g.y,g.x,r,a);f=$T({x:g.x*i,y:g.y*i},{x:y.x,y:y.y})}var x=$I(f,i,h,p),b=n.get(x.y,x.x,r);return{y:f.y,x:f.x,name:Iw[r],score:b}}function $N(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];switch(t.length){case 0:e="fn main() ";break;case 1:e="fn main(".concat(t[0]," : i32)");break;default:throw Error("Unreachable")}return e}var $E=function(){function e(e){this.variableNames=["A","B"],this.size=!0,this.workgroupSize=[32,1,1],this.outputShape=[e[0],1],this.dispatchLayout=v9.flatDispatchLayout(this.outputShape),this.dispatch=v9.computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="getpointsConfidenceOp"}return e.prototype.getUserCode=function(){return"\n        ".concat($N("index")," {\n          if (index < uniforms.size) {\n            let y = B[index * 2];\n            let x = B[index * 2 + 1];\n            let outIndex = y * uniforms.aShape.x * uniforms.aShape.z + x * uniforms.aShape.z + index;\n            result[index] = A[outIndex];\n          }\n        }\n        ")},e}(),$R=function(){function e(e){if(this.variableNames=["A","B"],this.size=!0,this.supportedLastDimension=2,2!==e.length||e[1]!==this.supportedLastDimension)throw Error("GetOffsetVectorsProgram only supports shape of [x, ".concat(this.supportedLastDimension,"], but current shape is ").concat(e));this.workgroupSize=[32,1,1],this.outputShape=e;var t=[e[0],1];this.dispatchLayout=v9.flatDispatchLayout(t),this.dispatch=v9.computeDispatch(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="GetOffsetVectors"}return e.prototype.getUserCode=function(){return"\n    fn getOffsetPoint(y: i32, x: i32, index: i32) -> vec2<i32> {\n      let outIndexY = y * uniforms.bShape.x * uniforms.bShape.y + x * uniforms.bShape.y + index;\n      let outIndexX = outIndexY + uniforms.bShape.z;\n      let outY = i32(B[outIndexY]);\n      let outX = i32(B[outIndexX]);\n      return vec2<i32>(outY, outX);\n    }\n\n    ".concat($N("index")," {\n      if (index < uniforms.size) {\n        let indexY = index * ").concat(this.supportedLastDimension,";\n        let indexX = indexY + 1;\n        let heatmapY = A[indexY];\n        let heatmapX = A[indexX];\n        let out = getOffsetPoint(i32(heatmapY), i32(heatmapX), index);\n        result[indexY] = f32(out[0]);\n        result[indexX] = f32(out[1]);\n      }\n    }\n    ")},e}();function $A(e){var t=e.shape,r=t[0],n=t[1],a=t[2];return af(function(){var t=so(sV(e,[r*n,a]),0);return lk([lI(iq(t,i0(n,"int32")),1),lI(af(function(){var e=iq(t,i0(n,"int32"));return i7(t,iX(e,i0(n,"int32")))}),1)],1)})}var $_="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",$O="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";function $F(e,t){return(e-1)%t==0?e:Math.floor(e/t)*t+1}var $P=function(){function e(e,t){this.posenetModel=e;var r,n,a=this.posenetModel.inputs[0].shape;r0.assert(-1===a[1]&&-1===a[2],function(){return"Input shape [".concat(a[1],", ").concat(a[2],"] ")+"must both be equal to or -1"});var i,s,o=(i=t.inputResolution,s=t.outputStride,{height:$F(i.height,s),width:$F(i.width,s)});r=t.outputStride,r0.assert($d.indexOf(r)>=0,function(){return"outputStride of ".concat(r," is invalid. ")+"It must be either 8 or 16."}),n=t.outputStride,r0.assert((o.height-1)%n==0,function(){return"height of ".concat(o.height," is invalid for output stride ")+"".concat(n,".")}),r0.assert((o.width-1)%n==0,function(){return"width of ".concat(o.width," is invalid for output stride ")+"".concat(n,".")}),this.inputResolution=o,this.outputStride=t.outputStride,this.architecture=t.architecture}return e.prototype.estimatePoses=function(e,t){return void 0===t&&(t=$c),Ix(this,void 0,void 0,function(){return Ib(this,function(r){return[2,this.estimatePosesGPU(e,t,!1)]})})},e.prototype.estimatePosesGPU=function(e,t,r){return void 0===t&&(t=$c),void 0===r&&(r=!1),Ix(this,void 0,void 0,function(){var n,a,i,s,o,l,u,d,h,p,c,f,m,g,y,x,b,v;return Ib(this,function(w){switch(w.label){case 0:return n=function(e){var t=e;if(null==t.maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1){if((t=Iy(Iy({},$f),t)).scoreThreshold<0||t.scoreThreshold>1)throw Error("Invalid scoreThreshold ".concat(t.scoreThreshold,". ")+"Should be in range [0.0, 1.0]");if(t.nmsRadius<=0)throw Error("Invalid nmsRadius ".concat(t.nmsRadius,"."))}return t}(t),null==e?[2,r?[[],[]]:[]]:(this.maxPoses=n.maxPoses,i=(a=Ij(e,{outputTensorSize:this.inputResolution,keepAspectRatio:!0,borderMode:"replicate"})).imageTensor,s=a.padding,o="ResNet50"===this.architecture?ij(i,$m):IH(i,[-1,1]),l=this.posenetModel.predict(o),"ResNet50"===this.architecture?(u=d6(l[2],[0]),d=d6(l[3],[0]),h=d6(l[0],[0]),p=d6(l[1],[0])):(u=d6(l[0],[0]),d=d6(l[1],[0]),h=d6(l[2],[0]),p=d6(l[3],[0])),c=sG(d),1!==this.maxPoses?[3,5]:r?[4,function(e,t,r){return Ix(this,void 0,void 0,function(){var n;return Ib(this,function(a){var i;return i=n=$A(e),[2,[af(function(){var e=function(e,t){if(av()instanceof wp){var r,n,a;return r=av(),n=new $R(e.shape),a=r.runWebGPUProgram(n,[e,t],"float32"),n5.makeTensorFromTensorInfo(a)}throw Error("getOffsetVectorsGPU is not supported in this backend!")}(i,t);return ij(iV(iX(i,i0(r,"int32")),"float32"),e)}),function(e,t){if(av()instanceof wp){var r,n,a;return r=av(),n=new $E(t.shape),a=r.runWebGPUProgram(n,[e,t],"float32"),n5.makeTensorFromTensorInfo(a)}throw Error("getPointsConfidenceWebGPU is not supported in this backend!")}(e,n)]]})})}(c,u,this.outputStride)]:[3,2]);case 1:return y=(m=w.sent())[0],g=m[1],f=[y,g],[3,4];case 2:return[4,function(e,t,r){return Ix(this,void 0,void 0,function(){var n,a,i,s,o,l,u,d,h;return Ib(this,function(p){switch(p.label){case 0:return n=0,a=$A(e),[4,Promise.all([e.buffer(),t.buffer(),a.buffer()])];case 1:var c;return s=(i=p.sent())[0],o=i[1],[4,(c=l=i[2],u=af(function(){var e=function(e,t){for(var r=[],n=0;n<Iw.length;n++){var a,i,s,o,l=(a=e.get(n,0).valueOf(),i=e.get(n,1).valueOf(),s=n,{y:(o=t).get(a,i,s),x:o.get(a,i,s+Iw.length)}),u=l.x,d=l.y;r.push(d),r.push(u)}return he(r,[Iw.length,2])}(c,o);return ij(iV(iX(c.toTensor(),i0(r,"int32")),"float32"),e)})).buffer()];case 2:return d=p.sent(),h=Array.from(function(e,t){for(var r=t.shape[0],n=new Float32Array(r),a=0;a<r;a++){var i=t.get(a,0),s=t.get(a,1);n[a]=e.get(i,s,a)}return n}(s,l)).map(function(e,t){return n+=e,{y:d.get(t,0),x:d.get(t,1),score:e,name:Iw[t]}}),a.dispose(),u.dispose(),[2,{keypoints:h,score:n/h.length}]}})})}(c,u,this.outputStride)];case 3:f=[y=w.sent()],w.label=4;case 4:return[3,7];case 5:if(r)throw Error("GPU renderer only supports single pose!");return[4,function(e,t,r,n,a,i,s,o){return void 0===s&&(s=.5),void 0===o&&(o=20),Ix(this,void 0,void 0,function(){var l,u,d,h,p,c,f,m,g,y,x;return Ib(this,function(b){switch(b.label){case 0:return[4,function(e){return Ix(this,void 0,void 0,function(){return Ib(this,function(t){return[2,Promise.all(e.map(function(e){return e.buffer()}))]})})}([e,t,r,n])];case 1:for(u=(l=b.sent())[0],d=l[1],h=l[2],p=l[3],c=[],f=function(e,t,r){for(var n=r.shape,a=n[0],i=n[1],s=n[2],o=new $y(a*i*s,function(e){return e.score}),l=0;l<a;++l)for(var u=0;u<i;++u)for(var d=0;d<s;++d){var h=r.get(l,u,d);h<e||function(e,t,r,n,a,i){for(var s=i.shape,o=s[0],l=s[1],u=!0,d=Math.max(r-1,0),h=Math.min(r+a+1,o),p=d;p<h;++p){for(var c=Math.max(n-a,0),f=Math.min(n+a+1,l),m=c;m<f;++m)if(i.get(p,m,e)>t){u=!1;break}if(!u)break}return u}(d,h,l,u,1,r)&&o.enqueue({score:h,part:{heatmapY:l,heatmapX:u,id:d}})}return o}(s,0,u),m=o*o;c.length<i&&!f.empty();)$v(c,m,$b((g=f.dequeue()).part,a,d),g.part.id)||(x=function(e,t,r){return r.reduce(function(r,n,a){var i=n.y,s=n.x,o=n.score;return $v(e,t,{y:i,x:s},a)||(r+=o),r},0)/r.length}(c,m,y=function(e,t,r,n,a,i){var s=t.shape[2],o=$k.length,l=Array(s),u=e.part,d=e.score,h=$b(u,n,r);l[u.id]={score:d,name:Iw[u.id],y:h.y,x:h.x};for(var p=o-1;p>=0;--p){var c=$k[p],f=$C[p];l[c]&&!l[f]&&(l[f]=$$(p,l[c],f,t,r,n,i))}for(p=0;p<o;++p)c=$C[p],f=$k[p],l[c]&&!l[f]&&(l[f]=$$(p,l[c],f,t,r,n,a));return l}(g,u,d,a,h,p)),c.push({keypoints:y,score:x}));return[2,c]}})})}(c,u,h,p,this.outputStride,this.maxPoses,n.scoreThreshold,n.nmsRadius)];case 6:f=w.sent(),w.label=7;case 7:if(r){if(!0===n.flipHorizontal)throw Error("flipHorizontal is not supported!");x=this.getCanvasInfo(IP(e),this.inputResolution,s)}else v=IP(e),b=function(e,t,r,n){var a=t.height,i=t.width,s=a/(r.height*(1-n.top-n.bottom)),o=i/(r.width*(1-n.left-n.right)),l=-n.top*r.height,u=-n.left*r.width;if(1===o&&1===s&&0===l&&0===u)return e;for(var d=0;d<e.length;d++)for(var h=0,p=e[d].keypoints;h<p.length;h++){var c=p[h];c.x=(c.x+u)*o,c.y=(c.y+l)*s}return e}(f,v,this.inputResolution,s),n.flipHorizontal&&(b=function(e,t){for(var r=0;r<e.length;r++)for(var n=0,a=e[r].keypoints;n<a.length;n++){var i=a[n];i.x=t.width-1-i.x}return e}(b,v));return i.dispose(),o.dispose(),am(l),u.dispose(),d.dispose(),h.dispose(),p.dispose(),c.dispose(),[2,r?[f,x]:b]}})})},e.prototype.getCanvasInfo=function(e,t,r){var n=e.height,a=e.width,i=n/(t.height*(1-r.top-r.bottom)),s=a/(t.width*(1-r.left-r.right)),o=-r.top*t.height;return[-r.left*t.width,o,s,i,e.width,e.height]},e.prototype.dispose=function(){this.posenetModel.dispose()},e.prototype.reset=function(){},e}();function $D(e,t){return Ix(this,void 0,void 0,function(){var r,n;return Ib(this,function(a){switch(e){case T2.PoseNet:return[2,function(e){return void 0===e&&(e=$o),Ix(this,void 0,void 0,function(){var t,r,n;return Ib(this,function(a){var i,s,o,l,u,d,h,p;switch(a.label){case 0:return"ResNet50"!==(t=function(e){var t=e||$o;if(null==t.architecture&&(t.architecture="MobileNetV1"),0>$l.indexOf(t.architecture))throw Error("Invalid architecture ".concat(t.architecture,". ")+"Should be one of ".concat($l));if(null==t.inputResolution&&(t.inputResolution={height:257,width:257}),null==t.outputStride&&(t.outputStride=16),0>$u[t.architecture].indexOf(t.outputStride))throw Error("Invalid outputStride ".concat(t.outputStride,". ")+"Should be one of ".concat($u[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.multiplier&&(t.multiplier=1),0>$h[t.architecture].indexOf(t.multiplier))throw Error("Invalid multiplier ".concat(t.multiplier,". ")+"Should be one of ".concat($h[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.quantBytes&&(t.quantBytes=4),0>$p.indexOf(t.quantBytes))throw Error("Invalid quantBytes ".concat(t.quantBytes,". ")+"Should be one of ".concat($p," ")+"for architecture ".concat(t.architecture,"."));if("MobileNetV1"===t.architecture&&32===t.outputStride&&1!==t.multiplier)throw Error("When using an output stride of 32, you must select 1 as the multiplier.");return t}(e)).architecture?[3,2]:(i=t.outputStride,s=t.quantBytes,o="model-stride".concat(i,".json"),r=4===s?$O+"float/"+o:$O+"quant".concat(s,"/")+o,[4,vW(t.modelUrl||r)]);case 1:case 3:return[2,new $P(a.sent(),t)];case 2:return l=t.outputStride,u=t.multiplier,d=t.quantBytes,h={1:"100",.75:"075",.5:"050"},p="model-stride".concat(l,".json"),n=4===d?$_+"float/".concat(h[u],"/")+p:$_+"quant".concat(d,"/").concat(h[u],"/")+p,[4,vW(t.modelUrl||n)]}})})}(t)];case T2.BlazePose:if(n=void 0,null!=(r=t)){if("tfjs"===r.runtime)return[2,function(e){return Ix(this,void 0,void 0,function(){var t,r,n,a;return Ib(this,function(i){switch(i.label){case 0:return r="string"==typeof(t=function(e){var t=Iy({},null==e?I7:e);if(null==t.enableSmoothing&&(t.enableSmoothing=I7.enableSmoothing),null==t.enableSegmentation&&(t.enableSegmentation=I7.enableSegmentation),null==t.smoothSegmentation&&(t.smoothSegmentation=I7.smoothSegmentation),null==t.modelType&&(t.modelType=I7.modelType),null==t.detectorModelUrl&&(t.detectorModelUrl=I7.detectorModelUrl),null==t.landmarkModelUrl)switch(t.modelType){case"lite":t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/lite/2";break;case"heavy":t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/heavy/2";break;default:t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"}return t}(e)).detectorModelUrl&&t.detectorModelUrl.indexOf("https://tfhub.dev")>-1,n="string"==typeof t.landmarkModelUrl&&t.landmarkModelUrl.indexOf("https://tfhub.dev")>-1,[4,Promise.all([vW(t.detectorModelUrl,{fromTFHub:r}),vW(t.landmarkModelUrl,{fromTFHub:n})])];case 1:return[2,new T3((a=i.sent())[0],a[1],t.enableSmoothing,t.enableSegmentation,t.smoothSegmentation,t.modelType)]}})})}(t)];if("mediapipe"===r.runtime)return[2,function(e){return Ix(this,void 0,void 0,function(){var t;return Ib(this,function(r){switch(r.label){case 0:return[4,(t=new IF(function(e){if(null==e)return Iy({},IA);var t=Iy({},e);return t.runtime="mediapipe",null==t.enableSegmentation&&(t.enableSegmentation=IA.enableSegmentation),null==t.enableSmoothing&&(t.enableSmoothing=IA.enableSmoothing),null==t.smoothSegmentation&&(t.smoothSegmentation=IA.smoothSegmentation),null==t.modelType&&(t.modelType=IA.modelType),t}(e))).initialize()];case 1:return r.sent(),[2,t]}})})}(t)];n=r.runtime}throw Error("Expect modelConfig.runtime to be either 'tfjs' "+"or 'mediapipe', but got ".concat(n));case T2.MoveNet:return[2,function(e){return void 0===e&&(e=T9),Ix(this,void 0,void 0,function(){var t,r,n,a;return Ib(this,function(i){switch(i.label){case 0:return t=function(e){var t,r,n=null==e?T9:Iy({},e);if(null==n.modelType)n.modelType="SinglePose.Lightning";else if(0>T7.indexOf(n.modelType))throw Error("Invalid architecture ".concat(n.modelType,". ")+"Should be one of ".concat(T7));if(null==n.enableSmoothing&&(n.enableSmoothing=!0),null!=n.minPoseScore&&(n.minPoseScore<0||n.minPoseScore>1))throw Error("minPoseScore should be between 0.0 and 1.0");if(null!=n.multiPoseMaxDimension&&(n.multiPoseMaxDimension%32!=0||n.multiPoseMaxDimension<32))throw Error("multiPoseMaxDimension must be a multiple of 32 and higher than 0");if("MultiPose.Lightning"===n.modelType&&null==n.enableTracking&&(n.enableTracking=!0),"MultiPose.Lightning"===n.modelType&&!0===n.enableTracking)if(null==n.trackerType&&(n.trackerType=T1.BoundingBox),n.trackerType===T1.Keypoint)null!=n.trackerConfig?((r=$i($r,t=n.trackerConfig)).keypointTrackerParams=Iy({},$r.keypointTrackerParams),null!=t.keypointTrackerParams&&(null!=t.keypointTrackerParams.keypointConfidenceThreshold&&(r.keypointTrackerParams.keypointConfidenceThreshold=t.keypointTrackerParams.keypointConfidenceThreshold),null!=t.keypointTrackerParams.keypointFalloff&&(r.keypointTrackerParams.keypointFalloff=t.keypointTrackerParams.keypointFalloff),null!=t.keypointTrackerParams.minNumberOfKeypoints&&(r.keypointTrackerParams.minNumberOfKeypoints=t.keypointTrackerParams.minNumberOfKeypoints)),n.trackerConfig=r):n.trackerConfig=$r;else{if(n.trackerType!==T1.BoundingBox)throw Error("Tracker type not supported by MoveNet");null!=n.trackerConfig?n.trackerConfig=$i($n,n.trackerConfig):n.trackerConfig=$n}return n}(e),n=!0,t.modelUrl?(n="string"==typeof t.modelUrl&&t.modelUrl.indexOf("https://tfhub.dev")>-1,[4,vW(t.modelUrl,{fromTFHub:n})]):[3,2];case 1:return r=i.sent(),[3,4];case 2:return a=void 0,"SinglePose.Lightning"===t.modelType?a="https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4":"SinglePose.Thunder"===t.modelType?a="https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4":"MultiPose.Lightning"===t.modelType&&(a="https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1"),[4,vW(a,{fromTFHub:n})];case 3:r=i.sent(),i.label=4;case 4:return"webgl"===ax()&&eb.set("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",0),[2,new $s(r,t)]}})})}(t)];default:throw Error("".concat(e," is not a supported model name."))}})})}var $L={modelType:{SINGLEPOSE_LIGHTNING:"SinglePose.Lightning",SINGLEPOSE_THUNDER:"SinglePose.Thunder",MULTIPOSE_LIGHTNING:"MultiPose.Lightning"}};const $M={NOSE:0,LEFT_EYE:1,RIGHT_EYE:2,LEFT_SHOULDER:5,RIGHT_SHOULDER:6,LEFT_ELBOW:7,RIGHT_ELBOW:8,LEFT_WRIST:9,RIGHT_WRIST:10,LEFT_HIP:11,RIGHT_HIP:12,LEFT_KNEE:13,RIGHT_KNEE:14,LEFT_ANKLE:15,RIGHT_ANKLE:16};(h=p||(p={}))[h.NOSE=0]="NOSE",h[h.LEFT_EYE=1]="LEFT_EYE",h[h.RIGHT_EYE=2]="RIGHT_EYE",h[h.LEFT_EAR=3]="LEFT_EAR",h[h.RIGHT_EAR=4]="RIGHT_EAR",h[h.LEFT_SHOULDER=5]="LEFT_SHOULDER",h[h.RIGHT_SHOULDER=6]="RIGHT_SHOULDER",h[h.LEFT_ELBOW=7]="LEFT_ELBOW",h[h.RIGHT_ELBOW=8]="RIGHT_ELBOW",h[h.LEFT_WRIST=9]="LEFT_WRIST",h[h.RIGHT_WRIST=10]="RIGHT_WRIST",h[h.LEFT_HIP=11]="LEFT_HIP",h[h.RIGHT_HIP=12]="RIGHT_HIP",h[h.LEFT_KNEE=13]="LEFT_KNEE",h[h.RIGHT_KNEE=14]="RIGHT_KNEE",h[h.LEFT_ANKLE=15]="LEFT_ANKLE",h[h.RIGHT_ANKLE=16]="RIGHT_ANKLE";const $B="movenet_model_url";class $z{constructor(e,t,r=!0,n=.5,a=null,i=!1){Object.defineProperty(this,"detector",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"video",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"canvas",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"ctx",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"rafId",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"startTime",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"fps",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"frameCount",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"repCounter",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"showBodyParts",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"bodyPartDisplaySeconds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"frameTimestamp",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"spineAngle",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"keypointUpdateCallback",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"debugMode",{enumerable:!0,configurable:!0,writable:!0,value:!1}),this.video=e,this.canvas=t;let s=this.canvas.getContext("2d");if(!s)throw Error("Could not get canvas context");this.ctx=s,this.repCounter={count:0,isHinge:!1,lastHingeState:!1,hingeThreshold:45},this.showBodyParts=r,this.bodyPartDisplaySeconds=n,this.keypointUpdateCallback=a,this.debugMode=i}async initialize(){console.log("Initializing Swing Analyzer...");try{await ay("webgl"),console.log(`Using backend: ${ax()}`),eb.set("WEBGL_CPU_FORWARD",!1),eb.set("WEBGL_FORCE_F16_TEXTURES",!0),await this.setupModelCache();let e={modelType:$L.modelType.SINGLEPOSE_LIGHTNING,enableSmoothing:!0};console.log("Loading pose detection model...");try{if(this.detector=await $D(T2.MoveNet,e),this.video.videoWidth&&this.video.videoHeight){console.log(`Video dimensions: ${this.video.videoWidth}x${this.video.videoHeight}`),this.canvas.width=this.video.videoWidth,this.canvas.height=this.video.videoHeight;let e=this.video.videoHeight>this.video.videoWidth;console.log(`Video orientation: ${e?"Portrait":"Landscape"}`)}else console.log("Video dimensions not available, using defaults"),this.canvas.width=640,this.canvas.height=480;console.log("Pose detector initialized successfully"),console.log(`Canvas dimensions set to: ${this.canvas.width}x${this.canvas.height}`);try{let e=document.createElement("canvas");e.width=300,e.height=300;let t=e.getContext("2d");if(t){t.fillStyle="white",t.fillRect(100,50,100,200);let r=await this.detector.estimatePoses(e);console.log(`Test detection complete. Found ${r.length} poses.`)}}catch(e){console.warn("Test detection failed, but continuing:",e)}}catch(e){console.error("Failed to initialize primary model:",e),console.log("Trying fallback model...");try{this.detector=await $D(T2.PoseNet),console.log("Fallback model initialized")}catch(e){throw console.error("Failed to initialize fallback model:",e),Error("Could not initialize any pose detection model")}}}catch(e){throw console.error("Failed to initialize pose detector:",e),e}}async setupModelCache(){try{if(eb.set("IS_BROWSER",!0),eb.set("TENSORFLOWJS_CACHEABLE",!0),console.log("Enabled TensorFlow.js model caching with automatic IndexedDB"),localStorage.getItem($B)?console.log("Found cached model information"):(console.log("No cached model information found, will download and cache"),localStorage.setItem($B,JSON.stringify({version:1,timestamp:Date.now()}))),"serviceWorker"in navigator)try{let e=await navigator.serviceWorker.getRegistrations();0===e.length?(console.log("Registering service worker for model caching..."),console.log("Service worker would be registered if available")):console.log("Service worker already registered")}catch(e){console.warn("Service worker registration failed:",e)}}catch(e){console.warn("Failed to set up model cache:",e),console.log("Continuing without model caching")}}async detectPose(){if(!this.detector)return console.error("Detector not initialized"),null;try{console.log("Detecting pose...");let e=await this.detector.estimatePoses(this.video);if(0===e.length)return console.log("No poses detected in frame"),null;console.log(`Pose detected with ${e[0].keypoints.length} keypoints`);let t={face:e[0].keypoints.some(e=>"nose"===e.name&&(e.score||0)>.5)?"Detected":"Not detected",shoulders:e[0].keypoints.filter(e=>("left_shoulder"===e.name||"right_shoulder"===e.name)&&(e.score||0)>.5).length+"/2 detected",hips:e[0].keypoints.filter(e=>("left_hip"===e.name||"right_hip"===e.name)&&(e.score||0)>.5).length+"/2 detected",score:e[0].score?.toFixed(2)||"N/A"};return console.log("Body part summary:",t),console.log("All detected keypoints:",e[0].keypoints.map(e=>({name:e.name||"unknown",x:Math.round(e.x),y:Math.round(e.y),confidence:e.score?.toFixed(2)||"N/A"}))),{keypoints:e[0].keypoints}}catch(e){return console.error("Error detecting pose:",e),null}}calculateSpineVertical(e){let t=e.map((e,t)=>{let r=e.name||this.getBodyPartName(t)||`point_${t}`,n=void 0!==e.score?e.score:void 0!==e.visibility?e.visibility:0;return`${r}: ${n.toFixed(2)}`});console.log("ALL KEYPOINTS VISIBILITY:"),console.table(t),console.log("KEYPOINTS RAW DATA:",e);let r=e[$M.LEFT_SHOULDER],n=e[$M.RIGHT_SHOULDER],a=e[$M.LEFT_HIP],i=e[$M.RIGHT_HIP],s=[],o=[];if(r&&this.isPointVisible(r)&&s.push(r),n&&this.isPointVisible(n)&&s.push(n),a&&this.isPointVisible(a)&&o.push(a),i&&this.isPointVisible(i)&&o.push(i),s.length>0&&o.length>0){let e=s.reduce((e,t)=>e+t.x,0)/s.length,t=s.reduce((e,t)=>e+t.y,0)/s.length,r=o.reduce((e,t)=>e+t.x,0)/o.length,n=Math.abs(180*Math.atan2(e-r,o.reduce((e,t)=>e+t.y,0)/o.length-t)/Math.PI);return console.log(`Spine angle calculated (shoulders-hips): ${n.toFixed(2)}\xb0`),n}let l=e[$M.NOSE],u=e[$M.LEFT_EYE],d=e[$M.RIGHT_EYE];if(l&&(u||d)&&this.isPointVisible(l)){let e,t;if(u&&d&&this.isPointVisible(u)&&this.isPointVisible(d))e=(u.x+d.x)/2,t=(u.y+d.y)/2;else if(u&&this.isPointVisible(u))e=u.x,t=u.y;else{if(!(d&&this.isPointVisible(d)))return console.log("No visible eyes found for angle calculation"),0;e=d.x,t=d.y}let r=180*Math.atan2(e-l.x,l.y-t)/Math.PI,n=.5*Math.abs(r);return console.log(`Spine angle approximated from face: ${n.toFixed(2)}\xb0 (face angle: ${r.toFixed(2)}\xb0)`),n}return console.log("Could not find enough points to calculate spine angle"),0}isPointVisible(e){return!!e&&(void 0!==e.score?e.score:void 0!==e.visibility?e.visibility:0)>.2}updateRepCounter(e){this.repCounter.lastHingeState&&!e&&(this.repCounter.count++,this.updateRepCounterDisplay()),this.repCounter.lastHingeState=e,this.repCounter.isHinge=e}updateRepCounterDisplay(){let e=document.getElementById("rep-counter");e&&(e.textContent=this.repCounter.count.toString())}updateSpineAngleDisplay(){let e=document.getElementById("spine-angle");e&&(e.textContent=`${Math.round(this.spineAngle)}\xb0`)}drawPose(e,t){if(!e.keypoints)return;this.keypointUpdateCallback&&e.keypoints.length>0&&this.keypointUpdateCallback(e.keypoints);let{width:r,height:n}=this.canvas;this.ctx.clearRect(0,0,r,n),this.debugMode&&this.drawDebugInfo(r,n),0===this.startTime&&(this.startTime=t),this.frameCount++;let a=t-this.startTime;a>=1e3&&(this.fps=Math.round(1e3*this.frameCount/a),this.frameCount=0,this.startTime=t);let i=e.keypoints.some(e=>("left_shoulder"===e.name||"right_shoulder"===e.name)&&this.isPointVisible(e)),s=e.keypoints.some(e=>("left_hip"===e.name||"right_hip"===e.name)&&this.isPointVisible(e)),o=e.keypoints.some(e=>"nose"===e.name&&this.isPointVisible(e));if(this.spineAngle=this.calculateSpineVertical(e.keypoints),this.updateSpineAngleDisplay(),this.spineAngle>0){let e=this.spineAngle<this.repCounter.hingeThreshold;this.updateRepCounter(e)}this.drawConnections(e.keypoints),this.drawKeypoints(e.keypoints,t),this.ctx.fillStyle="rgba(0, 0, 0, 0.5)",this.ctx.fillRect(5,5,300,120),this.ctx.fillStyle="white",this.ctx.font="16px Arial",this.ctx.fillText(`FPS: ${this.fps}`,10,25),this.ctx.fillText(`Spine Angle: ${Math.round(this.spineAngle)}\xb0`,10,50),this.ctx.fillText(`Reps: ${this.repCounter.count}`,10,75),i&&s?this.ctx.fillText("Status: Full body detected",10,100):i&&!s?this.ctx.fillText("Status: Upper body only (move back)",10,100):!i&&o?this.ctx.fillText("Status: Face only (show more body)",10,100):this.ctx.fillText("Status: Limited detection",10,100)}drawConnections(e){let t=[[$M.LEFT_SHOULDER,$M.RIGHT_SHOULDER],[$M.LEFT_SHOULDER,$M.LEFT_HIP],[$M.RIGHT_SHOULDER,$M.RIGHT_HIP],[$M.LEFT_HIP,$M.RIGHT_HIP],[$M.LEFT_SHOULDER,$M.LEFT_ELBOW],[$M.LEFT_ELBOW,$M.LEFT_WRIST],[$M.RIGHT_SHOULDER,$M.RIGHT_ELBOW],[$M.RIGHT_ELBOW,$M.RIGHT_WRIST],[$M.LEFT_HIP,$M.LEFT_KNEE],[$M.LEFT_KNEE,$M.LEFT_ANKLE],[$M.RIGHT_HIP,$M.RIGHT_KNEE],[$M.RIGHT_KNEE,$M.RIGHT_ANKLE]];this.ctx.lineWidth=4;let r=e[$M.LEFT_SHOULDER],n=e[$M.RIGHT_SHOULDER],a=e[$M.LEFT_HIP],i=e[$M.RIGHT_HIP],s=e=>!!e&&(void 0!==e.score?e.score:void 0!==e.visibility?e.visibility:0)>.1,o=[];r&&s(r)&&o.push(r),n&&s(n)&&o.push(n),a&&s(a)&&o.push(a),i&&s(i)&&o.push(i);let l=o.includes(r)||o.includes(n),u=o.includes(a)||o.includes(i);if(console.log("Spine drawing - shoulders visible:",l,"hips visible:",u),l&&u){let e=o.includes(r)&&o.includes(n)?(r.x+n.x)/2:o.includes(r)?r.x:n.x,t=o.includes(r)&&o.includes(n)?(r.y+n.y)/2:o.includes(r)?r.y:n.y,s=o.includes(a)&&o.includes(i)?(a.x+i.x)/2:o.includes(a)?a.x:i.x,l=o.includes(a)&&o.includes(i)?(a.y+i.y)/2:o.includes(a)?a.y:i.y,u={x:e,y:t},d={x:s,y:l};console.log("Drawing spine from",u,"to",d),this.spineAngle<this.repCounter.hingeThreshold?this.ctx.strokeStyle="rgba(255, 0, 0, 1.0)":this.ctx.strokeStyle="rgba(0, 255, 0, 1.0)",this.ctx.lineWidth=8,this.ctx.beginPath(),this.ctx.moveTo(u.x,u.y),this.ctx.lineTo(d.x,d.y),this.ctx.stroke()}for(let[r,n]of(this.ctx.strokeStyle="rgba(255, 255, 255, 0.7)",this.ctx.lineWidth=4,t)){let t=e[r],a=e[n];t&&a&&this.isPointVisible(t)&&this.isPointVisible(a)&&(this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(a.x,a.y),this.ctx.stroke())}}drawKeypoints(e,t){let r=this.showBodyParts&&(t-this.frameTimestamp)/1e3<this.bodyPartDisplaySeconds,n=this.canvas;n.width,n.clientWidth,n.height,n.clientHeight;for(let t=0;t<e.length;t++){let n=e[t];if(!this.isPointVisible(n))continue;let a=n.x,i=n.y,s=t===$M.LEFT_SHOULDER||t===$M.RIGHT_SHOULDER||t===$M.LEFT_HIP||t===$M.RIGHT_HIP,o=s?12:8,l=s?8:5;if(this.ctx.fillStyle=s?"rgba(255, 255, 255, 0.5)":"rgba(255, 255, 255, 0.3)",this.ctx.beginPath(),this.ctx.arc(a,i,o,0,2*Math.PI),this.ctx.fill(),this.ctx.fillStyle=s?"rgba(255, 165, 0, 1.0)":"rgba(255, 255, 0, 0.8)",this.ctx.beginPath(),this.ctx.arc(a,i,l,0,2*Math.PI),this.ctx.fill(),r||s){let e=this.getBodyPartName(t);if(e){this.ctx.fillStyle="rgba(0, 0, 0, 0.7)";let t=this.ctx.measureText(e).width;this.ctx.fillRect(a+10,i-10,t+6,20),this.ctx.fillStyle="white",this.ctx.font=s?"bold 12px Arial":"12px Arial",this.ctx.fillText(e,a+13,i+5)}}}}getBodyPartName(e){return({[$M.NOSE]:"Nose",[$M.LEFT_SHOULDER]:"L.Shoulder",[$M.RIGHT_SHOULDER]:"R.Shoulder",[$M.LEFT_ELBOW]:"L.Elbow",[$M.RIGHT_ELBOW]:"R.Elbow",[$M.LEFT_WRIST]:"L.Wrist",[$M.RIGHT_WRIST]:"R.Wrist",[$M.LEFT_HIP]:"L.Hip",[$M.RIGHT_HIP]:"R.Hip",[$M.LEFT_KNEE]:"L.Knee",[$M.RIGHT_KNEE]:"R.Knee",[$M.LEFT_ANKLE]:"L.Ankle",[$M.RIGHT_ANKLE]:"R.Ankle"})[e]||""}async processFrame(e){if(!this.video.paused&&!this.video.ended){if(0===this.frameTimestamp&&(this.frameTimestamp=e),this.frameCount%2==0)try{let t=await this.detectPose();if(t&&t.keypoints)this.drawPose(t,e);else{let e=this.canvas.getContext("2d");e&&(e.fillStyle="rgba(0, 0, 0, 0.5)",e.fillRect(10,10,300,30),e.fillStyle="white",e.font="16px Arial",e.fillText("No pose detected - adjust position or lighting",20,30))}}catch(e){console.error("Error in frame processing:",e)}this.frameCount++,this.rafId=requestAnimationFrame(this.processFrame.bind(this))}}startProcessing(){this.rafId||(this.rafId=requestAnimationFrame(this.processFrame.bind(this)))}stopProcessing(){this.rafId&&(cancelAnimationFrame(this.rafId),this.rafId=null)}reset(){this.repCounter.count=0,this.repCounter.isHinge=!1,this.repCounter.lastHingeState=!1,this.frameTimestamp=0,this.updateRepCounterDisplay()}setBodyPartDisplay(e,t){this.showBodyParts=e,this.bodyPartDisplaySeconds=t}drawDebugInfo(e,t){this.ctx.strokeStyle="rgba(255, 0, 255, 0.5)",this.ctx.lineWidth=2,this.ctx.strokeRect(0,0,e,t);let r=e/2,n=t/2;this.ctx.strokeStyle="rgba(255, 0, 255, 0.5)",this.ctx.beginPath(),this.ctx.moveTo(r,0),this.ctx.lineTo(r,t),this.ctx.moveTo(0,n),this.ctx.lineTo(e,n),this.ctx.stroke(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(5,t-25,150,20),this.ctx.fillStyle="white",this.ctx.font="12px monospace",this.ctx.fillText(`Canvas: ${e}x${t}`,10,t-10),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(5,t-50,250,20),this.ctx.fillStyle="white",this.ctx.fillText(`Video: ${this.video.videoWidth}x${this.video.videoHeight}`,10,t-35),this.ctx.fillStyle="rgba(0, 0, 0, 0.5)",this.ctx.fillRect(5,5,50,25),this.ctx.fillStyle="white",this.ctx.fillText("(0,0)",10,20),this.ctx.fillStyle="rgba(0, 0, 0, 0.5)",this.ctx.fillRect(e-55,5,50,25),this.ctx.fillStyle="white",this.ctx.fillText(`(${e},0)`,e-50,20),this.ctx.fillStyle="rgba(0, 0, 0, 0.5)",this.ctx.fillRect(5,t-75,100,25),this.ctx.fillStyle="white",this.ctx.fillText(`(0,${t})`,10,t-60)}setDebugMode(e){this.debugMode=e,console.log(`Debug mode ${e?"enabled":"disabled"}`)}}const $U=document.getElementById("video"),$W=document.getElementById("output-canvas"),$V=document.getElementById("camera-btn"),$G=document.getElementById("play-pause-btn"),$H=document.getElementById("stop-btn"),$j=document.getElementById("video-upload");document.getElementById("rep-counter");const $K=document.getElementById("status");document.getElementById("spine-angle");const $q=document.querySelectorAll('input[name="display-mode"]'),$X=document.getElementById("show-keypoints-btn"),$Y=document.getElementById("keypoint-data"),$Q=document.getElementById("keypoint-container"),$Z=document.getElementById("loading-spinner"),$J=document.getElementById("loading-progress"),$0=document.getElementById("loading-text");let $1=null,$2=0;const $3={isModelLoaded:!1,isProcessing:!1,usingCamera:!1,showBodyParts:!0,bodyPartDisplayTime:.5};let $4=null,$6=[];async function $5(){Nt("Loading model..."),$8(!0),function(){function e(){if($U.videoWidth&&$U.videoHeight){$W.width=$U.videoWidth,$W.height=$U.videoHeight;let e=$U.videoHeight>$U.videoWidth,t=$U.parentElement;if(t&&(t.classList.remove("video-portrait","video-landscape"),t.classList.add(e?"video-portrait":"video-landscape")),e){let e=$U.parentElement?.clientWidth||640,t=e/$U.videoWidth;$U.style.width=`${e}px`,$U.style.height=`${$U.videoHeight*t}px`,$W.style.width=`${e}px`,$W.style.height=`${$U.videoHeight*t}px`}else $U.style.width="100%",$U.style.height="auto",$W.style.width="100%",$W.style.height="auto";$U.style.display="block",$W.style.display="block",console.log(`Video dimensions set: ${$U.videoWidth}x${$U.videoHeight}, Portrait: ${e}`)}}$U.addEventListener("loadedmetadata",e),$U.addEventListener("resize",e),window.addEventListener("resize",e),$U.videoWidth&&$U.videoHeight?e():($W.width=640,$W.height=480)}(),$V.addEventListener("click",Nn),$G.addEventListener("click",Ni),$H.addEventListener("click",Ns),$j.addEventListener("change",Na),$U.addEventListener("play",()=>{$4&&($4.startProcessing(),$3.isProcessing=!0,$G.textContent="Pause")}),$U.addEventListener("pause",()=>{$4&&($4.stopProcessing(),$3.isProcessing=!1,$G.textContent="Play")}),$U.addEventListener("ended",()=>{$4&&($4.stopProcessing(),$3.isProcessing=!1,$G.textContent="Play")}),$X.addEventListener("click",Nl),function(){$q.forEach(e=>{e.addEventListener("change",e=>{let t=e.target.value;switch(console.log(`Display mode changed to: ${t}`),t){case"both":$U.style.opacity="1",$W.style.display="block";break;case"video":$U.style.opacity="1",$W.style.display="none";break;case"overlay":$U.style.opacity="0.1",$W.style.display="block";let r=$W.getContext("2d");r&&(r.fillStyle="black",r.fillRect(0,0,$W.width,$W.height))}})});let e=document.getElementById("debug-mode-toggle");e&&e.addEventListener("change",()=>{if($4&&($4.setDebugMode(e.checked),$U.paused&&$4)){let e={keypoints:$6};$4.drawPose(e,performance.now())}})}(),Nt("Ready. Upload a video or start camera.")}function $8(e){$Z&&($Z.classList.toggle("active",e),e?($2=0,$J&&($J.style.width="0%"),$0&&($0.textContent="Loading model..."),$7(),$2=0,$9(0),$1=window.setInterval(()=>{($2+=(100-$2)/100)>=99&&($2=99),$9($2);let e=Math.ceil(Math.max(0,15e3-$2/100*15e3)/1e3);$0&&($0.textContent=`Loading model... ${Math.round($2)}% (about ${e}s remaining)`)},100)):$7())}function $7(){null!==$1&&(clearInterval($1),$1=null),$J&&($J.style.width="100%"),$0&&($0.textContent="Loading complete!")}function $9(e){$J&&($J.style.width=`${e}%`)}async function Ne(){if(!$4){$8(!0),$W.width=$U.videoWidth||640,$W.height=$U.videoHeight||480,$W.style.position="absolute",$W.style.top="0",$W.style.left="0",$W.style.width="100%",$W.style.height="100%",$4=new $z($U,$W,$3.showBodyParts,$3.bodyPartDisplayTime,Nd);try{let e=performance.now();await $4.initialize();let t=performance.now()-e;console.log(`Model loaded in ${Math.round(t)}ms`),Math.abs(t-15e3)>5e3&&localStorage.setItem("modelLoadingTime",t.toString()),$3.isModelLoaded=!0,Nt("Model loaded. Ready to analyze."),$8(!1)}catch(e){console.error("Error initializing analyzer:",e),Nt("Error loading model. Please refresh and try again."),$8(!1)}}}function Nt(e){$K&&($K.textContent=e)}function Nr(e,t,r){$V.disabled=!e,$G.disabled=!t,$H.disabled=!r,t&&($G.textContent=$U.paused?"Play":"Pause")}async function Nn(){try{$8(!0);let e=await navigator.mediaDevices.getUserMedia({video:{facingMode:"environment",width:{ideal:1280},height:{ideal:720}}});$U.style.display="block",$U.srcObject=e,$3.usingCamera=!0,await new Promise(e=>{$U.onloadedmetadata=()=>{console.log(`Camera stream loaded: ${$U.videoWidth}x${$U.videoHeight}`),e()}}),await Ne(),await $U.play(),Nr(!1,!0,!0),Nt("Camera active. Analyzing motion...")}catch(e){console.error("Error accessing camera:",e),Nt("Camera access denied or not available."),$8(!1)}}async function Na(e){let t=e.target;if(t.files&&t.files.length>0){let e=t.files[0];$8(!0),$3.usingCamera&&No(),$U.style.display="block",$U.src=URL.createObjectURL(e),$3.usingCamera=!1,$U.load(),await new Promise(e=>{$U.onloadedmetadata=()=>{console.log(`Video loaded: ${$U.videoWidth}x${$U.videoHeight}`),e()}}),await Ne(),Nr(!0,!0,!1),Nt(`Loaded video: ${e.name}. Press Play to analyze.`),$4&&$4.reset()}}function Ni(){$U.paused?($U.play(),$G.textContent="Pause"):($U.pause(),$G.textContent="Play"),Nr(!0,!0,!0)}function Ns(){$U.pause(),$U.currentTime=0,$3.usingCamera&&No(),Nr(!0,!0,!1),$G.textContent="Play",$4&&$4.reset()}function No(){$U.srcObject&&($U.srcObject.getTracks().forEach(e=>e.stop()),$U.srcObject=null),$3.usingCamera=!1,Nr(!0,!1,!1),$8(!1)}function Nl(){"none"===$Y.style.display?($Y.style.display="block",$X.textContent="Hide Keypoint Data",Nu()):($Y.style.display="none",$X.textContent="Show Keypoint Data")}function Nu(){if(!$6.length||"none"===$Y.style.display)return;$Q.innerHTML="";let e=document.createElement("div");e.className="keypoint-row",e.innerHTML=`
    <span><strong>Name</strong></span>
    <span><strong>X</strong></span>
    <span><strong>Y</strong></span>
    <span><strong>Confidence</strong></span>
  `,$Q.appendChild(e),$6.forEach(e=>{let t=document.createElement("div");t.className="keypoint-row",t.innerHTML=`
      <span>${e.name||"unknown"}</span>
      <span>${Math.round(e.x)}</span>
      <span>${Math.round(e.y)}</span>
      <span>${e.confidence||"N/A"}</span>
    `,$Q.appendChild(t)})}function Nd(e){$6=e.map(e=>({name:e.name||"unknown",x:e.x,y:e.y,confidence:e.score?.toFixed(2)||"N/A"})),Nu()}document.addEventListener("DOMContentLoaded",$5),(async function(){console.log("Initializing TensorFlow.js...");try{let e=Object.keys(n5.registryFactory);console.log("Available TensorFlow backends:",e),await ay("webgl");let t=ax();console.log(`TensorFlow.js backend initialized: ${t}`),console.log(`WebGL version: ${eb.getNumber("WEBGL_VERSION")}`),console.log(`Device pixel ratio: ${window.devicePixelRatio}`),"webgl"!==t&&console.warn(`WebGL not available, using ${t} instead. Performance may be affected.`)}catch(e){console.error("Failed to initialize TensorFlow backend:",e);try{await ay("cpu"),console.warn("Fallback to CPU backend. Performance will be severely limited.")}catch(e){console.error("Failed to initialize any TensorFlow backend:",e)}}})().catch(e=>{console.error("Fatal error during initialization:",e)});
//# sourceMappingURL=public.dfb3baf4.js.map

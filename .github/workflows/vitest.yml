name: Vitest

# This workflow runs Vitest tests and generates badges:
# 1. GitHub's built-in workflow status badge (pass/fail)
# 2. Custom badge showing test counts deployed to GitHub Pages
# 3. Coverage badge showing test coverage percentage
# 4. Test output badge linking to full test results
# 5. Verbose output badge linking to detailed test output file
#
# IMPORTANT: All test outputs (HTML reports, coverage, verbose text output) are published
# to the 'test-results' branch under the 'test-results' directory. This ensures that all
# test artifacts are accessible via consistent URLs without cluttering the main branch.
#
# The badges can be displayed in the README with:
# [![Vitest](https://github.com/idvorkin/idvorkin.github.io/actions/workflows/vitest.yml/badge.svg)](https://github.com/idvorkin/idvorkin.github.io/actions/workflows/vitest.yml)
# [![Vitest Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/idvorkin/idvorkin.github.io/test-results/test-results/vitest/badge-count.json)](https://htmlpreview.github.io/?https://raw.githubusercontent.com/idvorkin/idvorkin.github.io/test-results/test-results/vitest/test-verbose-output.html)
# [![Vitest Coverage](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/idvorkin/idvorkin.github.io/test-results/test-results/vitest/badge-coverage.json)](https://htmlpreview.github.io/?https://raw.githubusercontent.com/idvorkin/idvorkin.github.io/test-results/test-results/vitest/coverage/index.html)
# [![Test Report](https://img.shields.io/badge/Test%20Report-View%20Details-informational)](https://idvorkin.github.io/test-results/vitest/html/index.html)
# [![Verbose Output](https://img.shields.io/badge/Test%20Output-Verbose-blue)](https://github.com/idvorkin/idvorkin.github.io/blob/test-results/test-results/vitest/test-verbose-output.txt)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  WEBSITE_URL: idvork.in # The website URL for reference

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Verify lock file exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "package-lock.json not found. Creating one..."
            npm i --package-lock-only
            git status
          fi

      - name: Install dependencies
        run: npm ci

      - name: Install just
        uses: extractions/setup-just@v1

      - name: Run Vitest tests and generate badge data
        id: vitest
        run: |
          # Create directories for test results with a consistent structure
          mkdir -p test-results/vitest

          # Run tests with GitHub Actions reporter to get integrated annotations
          # This will also generate JSON output for badges
          set +e
          just js-test-github-actions
          TEST_RESULT=$?
          set -e

          # Run Vitest with HTML reporter and coverage using the justfile command
          just js-test-full-report

          # Also generate a verbose text output for reference
          just js-test-verbose-txt > test-results/vitest/test-verbose-output.txt 2>&1

          # Generate HTML version of the test output using the justfile command
          just js-test-output-to-html

          # Ensure test-results directory exists and has content even if tests failed
          ls -la test-results/vitest
          if [ ! -f test-results/vitest/badge-count.json ]; then
            echo "Creating fallback badge files using generate-badges.sh script..."
            ./deploy-scripts/generate-badges.sh fallback.json
          fi

          # Exit with the original test result to properly mark the workflow as passed/failed
          exit $TEST_RESULT

      - name: Ensure test-results directory exists before deploy
        if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          if [ ! -d "test-results/vitest" ]; then
            echo "Creating test-results directory"
            mkdir -p test-results/vitest
            
            # Use the generate-badges.sh script to create fallback badges
            ./deploy-scripts/generate-badges.sh fallback.json
            
            # Create an empty verbose output file if it doesn't exist
            touch test-results/vitest/test-verbose-output.txt
          fi

          # Check if verbose output file exists 
          if [ ! -f "test-results/vitest/test-verbose-output.txt" ]; then
            echo "No verbose test output found, creating empty file"
            echo "No test output available" > test-results/vitest/test-verbose-output.txt
          fi

          ls -la test-results/vitest

      - name: Deploy test results to GitHub Pages
        if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "Preparing to deploy test results to test-results branch"
          echo "Files being deployed:"
          find test-results -type f | sort
          echo "All test artifacts will be available at: https://github.com/idvorkin/idvorkin.github.io/tree/test-results/test-results"
          echo "Verbose test output is available at: https://github.com/idvorkin/idvorkin.github.io/blob/test-results/test-results/vitest/test-verbose-output.txt"

      - name: Deploy test results to test-results branch
        if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: test-results
          target-folder: test-results
          branch: test-results
          clean: false

      - name: Upload test coverage as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-coverage
          path: coverage/
          retention-days: 30

      - name: Upload verbose test output as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-verbose-output
          path: test-results/vitest/test-verbose-output.txt
          retention-days: 30
